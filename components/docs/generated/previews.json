{
  "date-and-time/date-field-demo": {
    "component": "@/components/docs/date-and-time/date-field-demo",
    "raw": "'use client'\n\nimport { DateField } from 'ui'\n\nexport default function DateFieldDemo() {\n  return <DateField label=\"Event date\" />\n}\n",
    "type": "docs"
  },
  "date-and-time/date-range-picker-disabled-demo": {
    "component": "@/components/docs/date-and-time/date-range-picker-disabled-demo",
    "raw": "'use client'\n\nimport { DateRangePicker } from 'ui'\n\nexport default function DateRangePickerDisabledDemo() {\n  return <DateRangePicker isDisabled label=\"Event date\" />\n}\n",
    "type": "docs"
  },
  "date-and-time/date-range-picker-controlled-demo": {
    "component": "@/components/docs/date-and-time/date-range-picker-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { getLocalTimeZone, today } from '@internationalized/date'\nimport { useDateFormatter } from '@react-aria/i18n'\nimport { DateRangePicker } from 'ui'\n\nexport default function DateRangePickerControlledDemo() {\n  const now = today(getLocalTimeZone())\n  const tomorrowWeek = today(getLocalTimeZone()).add({ days: 12 })\n  const formatter = useDateFormatter({ dateStyle: 'full' })\n\n  const [value, setValue] = React.useState({\n    start: now,\n    end: tomorrowWeek\n  })\n\n  return (\n    <div className=\"space-y-3\">\n      <div className=\"divide-y [&_p]:py-2\">\n        <p>\n          {value\n            ? `${formatter.format(value.start.toDate(getLocalTimeZone()))} to ${formatter.format(value.end.toDate(getLocalTimeZone()))}`\n            : '-- to --'}\n        </p>\n        <p>\n          {value ? `${value.start.toString()} to ${value.end.toString()}` : '-- to --'}\n        </p>\n      </div>\n      <DateRangePicker value={value} onChange={setValue} label=\"Event date\" />\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "date-and-time/time-field-disabled-demo": {
    "component": "@/components/docs/date-and-time/time-field-disabled-demo",
    "raw": "'use client'\n\nimport { TimeField } from 'ui'\n\nexport default function TimeFieldDisabledDemo() {\n  return <TimeField isDisabled label=\"Event time\" />\n}\n",
    "type": "docs"
  },
  "date-and-time/date-picker-custom-validation-demo": {
    "component": "@/components/docs/date-and-time/date-picker-custom-validation-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { getLocalTimeZone, parseDate, startOfYear, today } from '@internationalized/date'\nimport { Button, DatePicker, Form } from 'ui'\n\nexport default function DatePickerInvalidDemo() {\n  const ly = startOfYear(today(getLocalTimeZone()))\n  const now = today(getLocalTimeZone())\n  const [value, setValue] = React.useState(parseDate(ly.toString()))\n  return (\n    <Form onSubmit={(e) => e.preventDefault()}>\n      <DatePicker\n        validate={(date) => (date < now ? 'Select a future date, please.' : null)}\n        value={value}\n        onChange={setValue}\n        label=\"Delivery date\"\n        className=\"mb-2\"\n      />\n\n      <Button type=\"submit\">Submit</Button>\n    </Form>\n  )\n}\n",
    "type": "docs"
  },
  "date-and-time/date-field-controlled-demo": {
    "component": "@/components/docs/date-and-time/date-field-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { getLocalTimeZone, parseDate, today } from '@internationalized/date'\nimport { useDateFormatter } from '@react-aria/i18n'\nimport { DateField } from 'ui'\n\nexport default function DateFieldDisabledDemo() {\n  const now = today(getLocalTimeZone())\n  const [value, setValue] = React.useState(parseDate(now.toString()))\n\n  const formatter = useDateFormatter({ dateStyle: 'full' })\n\n  return (\n    <div className=\"space-y-3\">\n      <div className=\"divide-y [&_p]:py-2\">\n        <p>{value ? formatter.format(value.toDate(getLocalTimeZone())) : '--'}</p>\n        <p>{value ? value.toString() : '--'}</p>\n      </div>\n      <DateField value={value} onChange={setValue} label=\"Event date\" />\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "date-and-time/range-calendar-demo": {
    "component": "@/components/docs/date-and-time/range-calendar-demo",
    "raw": "'use client'\n\nimport { RangeCalendar } from 'ui'\n\nexport default function RangeCalendarDemo() {\n  return <RangeCalendar aria-label=\"Trip dates\" />\n}\n",
    "type": "docs"
  },
  "date-and-time/date-picker-demo": {
    "component": "@/components/docs/date-and-time/date-picker-demo",
    "raw": "'use client'\n\nimport { DatePicker } from 'ui'\n\nexport default function DatePickerDemo() {\n  return <DatePicker label=\"Event date\" />\n}\n",
    "type": "docs"
  },
  "date-and-time/date-range-picker-custom-validation-demo": {
    "component": "@/components/docs/date-and-time/date-range-picker-custom-validation-demo",
    "raw": "'use client'\n\nimport { getLocalTimeZone, today } from '@internationalized/date'\nimport { Button, DateRangePicker, Form } from 'ui'\n\nexport default function DateRangePickerCustomValidationDemo() {\n  return (\n    <Form onSubmit={(e) => e.preventDefault()}>\n      <DateRangePicker\n        label=\"Room Booking Dates\"\n        validate={(range) =>\n          range?.end.compare(range.start) > 7\n            ? 'Maximum booking duration is 1 week.'\n            : null\n        }\n        defaultValue={{\n          start: today(getLocalTimeZone()),\n          end: today(getLocalTimeZone()).add({ weeks: 2 })\n        }}\n        className=\"mb-2\"\n      />\n      <Button type=\"submit\">Book Room</Button>\n    </Form>\n  )\n}\n",
    "type": "docs"
  },
  "date-and-time/time-field-validation-demo": {
    "component": "@/components/docs/date-and-time/time-field-validation-demo",
    "raw": "'use client'\n\nimport { Button, Form, TimeField } from 'ui'\n\nexport default function TimeFieldValidationDemo() {\n  return (\n    <Form onSubmit={(e) => e.preventDefault()}>\n      <TimeField label=\"Event time\" isRequired className=\"mb-2\" />\n      <Button type=\"submit\">Submit</Button>\n    </Form>\n  )\n}\n",
    "type": "docs"
  },
  "date-and-time/date-field-disabled-demo": {
    "component": "@/components/docs/date-and-time/date-field-disabled-demo",
    "raw": "'use client'\n\nimport { DateField } from 'ui'\n\nexport default function DateFieldDisabledDemo() {\n  return <DateField isDisabled label=\"Event date\" />\n}\n",
    "type": "docs"
  },
  "date-and-time/calendar-demo": {
    "component": "@/components/docs/date-and-time/calendar-demo",
    "raw": "'use client'\n\nimport { Calendar } from 'ui'\n\nexport default function CalendarDemo() {\n  return (\n    <Calendar\n      aria-label=\"Event date\"\n      onChange={function Qa() {}}\n      onFocusChange={function Qa() {}}\n    />\n  )\n}\n",
    "type": "docs"
  },
  "date-and-time/date-range-picker-demo": {
    "component": "@/components/docs/date-and-time/date-range-picker-demo",
    "raw": "'use client'\n\nimport { DateRangePicker } from 'ui'\n\nexport default function DateRangePickerDemo() {\n  return <DateRangePicker label=\"Event date\" />\n}\n",
    "type": "docs"
  },
  "date-and-time/date-picker-required-demo": {
    "component": "@/components/docs/date-and-time/date-picker-required-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Button, DatePicker, Form } from 'ui'\n\nexport default function DatePickerRequiredDemo() {\n  return (\n    <Form onSubmit={(e) => e.preventDefault()}>\n      <DatePicker label=\"Delivery date\" name=\"deliveryDate\" isRequired className=\"mb-2\" />\n\n      <Button type=\"submit\">Submit</Button>\n    </Form>\n  )\n}\n",
    "type": "docs"
  },
  "date-and-time/time-field-hc-demo": {
    "component": "@/components/docs/date-and-time/time-field-hc-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { OptionPreview } from '@/components/docs/outside/option-preview'\nimport { Time } from '@internationalized/date'\nimport { Switch, TimeField } from 'ui'\n\nexport default function TimeFieldHcDemo() {\n  const [hc, setHc] = React.useState<12 | 24>(24)\n  const [value, setValue] = React.useState(new Time(13, 45))\n  return (\n    <>\n      <OptionPreview>\n        <Switch\n          isSelected={hc === 24}\n          onChange={() => setHc((prevHc) => (prevHc === 24 ? 12 : 24))}\n        >\n          {hc} hour\n        </Switch>\n      </OptionPreview>\n      <TimeField value={value} onChange={setValue} hourCycle={hc} label=\"Event time\" />\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "date-and-time/time-field-controlled-demo": {
    "component": "@/components/docs/date-and-time/time-field-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Time } from '@internationalized/date'\nimport { TimeField } from 'ui'\n\nexport default function TimeFieldValidationDemo() {\n  const [value, setValue] = React.useState(new Time(11, 45))\n  return (\n    <div className=\"space-y-3\">\n      <div className=\"divide-y [&_p]:py-2\">\n        <p>{value ? value.toString() : '--'}</p>\n      </div>\n      <TimeField label=\"Event time\" value={value} onChange={setValue} />\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "date-and-time/date-field-validation-demo": {
    "component": "@/components/docs/date-and-time/date-field-validation-demo",
    "raw": "'use client'\n\nimport { Button, DateField, Form } from 'ui'\n\nexport default function DateFieldDisabledDemo() {\n  return (\n    <Form onSubmit={(e) => e.preventDefault()}>\n      <DateField isRequired label=\"Event date\" className=\"mb-2\" />\n      <Button type=\"submit\">Submit</Button>\n    </Form>\n  )\n}\n",
    "type": "docs"
  },
  "date-and-time/date-picker-disabled-demo": {
    "component": "@/components/docs/date-and-time/date-picker-disabled-demo",
    "raw": "'use client'\n\nimport { DatePicker } from 'ui'\n\nexport default function DatePickerDisabledDemo() {\n  return <DatePicker isDisabled label=\"Event date\" />\n}\n",
    "type": "docs"
  },
  "date-and-time/time-field-demo": {
    "component": "@/components/docs/date-and-time/time-field-demo",
    "raw": "'use client'\n\nimport { TimeField } from 'ui'\n\nexport default function TimeFieldDemo() {\n  return <TimeField label=\"Event time\" />\n}\n",
    "type": "docs"
  },
  "date-and-time/date-range-picker-validation-demo": {
    "component": "@/components/docs/date-and-time/date-range-picker-validation-demo",
    "raw": "'use client'\n\nimport { Button, DateRangePicker, Form } from 'ui'\n\nexport default function DateRangePickerValidationDemo() {\n  return (\n    <Form onSubmit={(e) => e.preventDefault()}>\n      <DateRangePicker isRequired label=\"Event date\" className=\"mb-2\" />\n      <Button type=\"submit\">Submit</Button>\n    </Form>\n  )\n}\n",
    "type": "docs"
  },
  "date-and-time/date-picker-controlled-demo": {
    "component": "@/components/docs/date-and-time/date-picker-controlled-demo",
    "raw": "import React from 'react'\n\nimport { getLocalTimeZone, parseDate, today } from '@internationalized/date'\nimport { useDateFormatter } from '@react-aria/i18n'\nimport { DatePicker } from 'ui'\n\nexport default function DatePickerControlledDemo() {\n  const now = today(getLocalTimeZone())\n\n  const [value, setValue] = React.useState(parseDate(now.toString()))\n\n  const formatter = useDateFormatter({ dateStyle: 'full' })\n\n  return (\n    <div className=\"space-y-3\">\n      <div className=\"divide-y [&_p]:py-2\">\n        <p>{value ? formatter.format(value.toDate(getLocalTimeZone())) : '--'}</p>\n        <p>{value ? value.toString() : '--'}</p>\n      </div>\n      <DatePicker value={value} onChange={setValue} label=\"Event date\" />\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "forms/slider-range-demo": {
    "component": "@/components/docs/forms/slider-range-demo",
    "raw": "'use client'\n\nimport { Slider } from 'ui'\n\nexport default function SliderRangeDemo() {\n  return <Slider defaultValue={[25, 75]} label=\"Progress tracking\" />\n}\n",
    "type": "docs"
  },
  "forms/text-field-validation-demo": {
    "component": "@/components/docs/forms/text-field-validation-demo",
    "raw": "'use client'\n\nimport { Button, Form, TextField } from 'ui'\n\nexport default function TextFieldValidationDemo() {\n  return (\n    <Form>\n      <TextField isRequired label=\"Name\" className=\"mb-2\" />\n      <Button type=\"submit\">Submit</Button>\n    </Form>\n  )\n}\n",
    "type": "docs"
  },
  "forms/checkbox-demo": {
    "component": "@/components/docs/forms/checkbox-demo",
    "raw": "'use client'\n\nimport { Checkbox } from 'ui'\n\nexport default function CheckboxDemo() {\n  return <Checkbox>Enable notifications</Checkbox>\n}\n",
    "type": "docs"
  },
  "forms/checkbox-group-demo": {
    "component": "@/components/docs/forms/checkbox-group-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Checkbox, CheckboxGroup } from 'ui'\n\nexport default function CheckboxGroupDemo() {\n  return (\n    <CheckboxGroup label=\"Settings\">\n      <React.Fragment key=\".0\">\n        <Checkbox value=\"notifications\">Enable notifications</Checkbox>\n        <Checkbox value=\"auto_update\">Auto-update applications</Checkbox>\n        <Checkbox value=\"dark_mode\">Enable dark mode</Checkbox>\n        <Checkbox value=\"location_access\">Allow location access</Checkbox>\n        <Checkbox value=\"two_factor_auth\">Enable two-factor authentication</Checkbox>\n      </React.Fragment>\n    </CheckboxGroup>\n  )\n}\n",
    "type": "docs"
  },
  "forms/search-field-controlled-demo": {
    "component": "@/components/docs/forms/search-field-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Description, SearchField } from 'ui'\n\nexport default function SearchFieldControlledDemo() {\n  const [value, setValue] = React.useState('')\n  return (\n    <>\n      <SearchField value={value} onChange={setValue} className=\"mb-2\" />\n      <Description className=\"mt-2 block [&>strong]:text-fg\">\n        You have typed: <strong>{value ?? '-'}</strong>\n      </Description>\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "forms/input-otp-controlled-demo": {
    "component": "@/components/docs/forms/input-otp-controlled-demo",
    "raw": "import React from 'react'\n\nimport { InputOTP, InputOTPGroup, InputOTPSlot } from '@/components/ui'\n\nexport default function InputOtpControlledDemo() {\n  const [value, setValue] = React.useState('')\n  return (\n    <div className=\"space-y-2\">\n      <InputOTP maxLength={6} value={value} onChange={setValue}>\n        <InputOTPGroup>\n          {[...Array(6)].map((_, index) => (\n            <InputOTPSlot key={index} index={index} />\n          ))}\n        </InputOTPGroup>\n      </InputOTP>\n\n      <div className=\"text-center text-sm\">\n        {value === '' ? <>Enter your one-time password.</> : <>You entered: {value}</>}\n      </div>\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "forms/switch-variant-demo": {
    "component": "@/components/docs/forms/switch-variant-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { OptionPreview } from '@/components/docs/outside/option-preview'\nimport { Select, SelectItem, Switch } from 'ui'\n\nconst items = ['primary', 'secondary', 'success', 'danger', 'warning', 'info'].map(\n  (item) => ({\n    value: item,\n    label: item\n  })\n)\nexport default function SwitchVariantDemo() {\n  const [intent, setIntent] = React.useState('primary')\n\n  return (\n    <>\n      <OptionPreview>\n        <Select\n          items={items}\n          selectedKey={intent}\n          onSelectionChange={(v) => setIntent(v as any)}\n        >\n          {(item) => (\n            <SelectItem id={item.value} textValue={item.value}>\n              {item.label}\n            </SelectItem>\n          )}\n        </Select>\n      </OptionPreview>\n      <Switch defaultSelected intent={intent as any}>\n        Label\n      </Switch>\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "forms/input-otp-separator-demo": {
    "component": "@/components/docs/forms/input-otp-separator-demo",
    "raw": "import { InputOTP, InputOTPGroup, InputOTPSeparator, InputOTPSlot } from 'ui'\n\nexport default function InputOtpSeparatorDemo() {\n  return (\n    <InputOTP maxLength={6}>\n      <InputOTPGroup>\n        <InputOTPSlot index={0} />\n        <InputOTPSlot index={1} />\n        <InputOTPSlot index={2} />\n      </InputOTPGroup>\n      <InputOTPSeparator />\n      <InputOTPGroup>\n        <InputOTPSlot index={3} />\n        <InputOTPSlot index={4} />\n        <InputOTPSlot index={5} />\n      </InputOTPGroup>\n    </InputOTP>\n  )\n}\n",
    "type": "docs"
  },
  "forms/form-validation-demo": {
    "component": "@/components/docs/forms/form-validation-demo",
    "raw": "'use client'\n\nimport { Button, Form, TextField } from 'ui'\n\nexport default function FormValidationDemo() {\n  return (\n    <Form onSubmit={() => {}}>\n      <TextField label=\"Name\" isRequired className=\"mb-2\" />\n      <Button type=\"submit\">Submit</Button>\n    </Form>\n  )\n}\n",
    "type": "docs"
  },
  "forms/textarea-demo": {
    "component": "@/components/docs/forms/textarea-demo",
    "raw": "'use client'\n\nimport { Textarea } from 'ui'\n\nexport default function TextareaDemo() {\n  return <Textarea label=\"Address\" />\n}\n",
    "type": "docs"
  },
  "forms/number-field-invalid-demo": {
    "component": "@/components/docs/forms/number-field-invalid-demo",
    "raw": "'use client'\n\nimport { NumberField } from 'ui'\n\nexport default function NumberFieldInvalidDemo() {\n  return <NumberField isInvalid label=\"Cookies\" />\n}\n",
    "type": "docs"
  },
  "forms/number-field-disabled-demo": {
    "component": "@/components/docs/forms/number-field-disabled-demo",
    "raw": "'use client'\n\nimport { NumberField } from 'ui'\n\nexport default function NumberFieldDisabledDemo() {\n  return <NumberField isDisabled label=\"Cookies\" />\n}\n",
    "type": "docs"
  },
  "forms/search-field-disabled-demo": {
    "component": "@/components/docs/forms/search-field-disabled-demo",
    "raw": "'use client'\n\nimport { SearchField } from 'ui'\n\nexport default function SearchFieldDisabledDemo() {\n  return <SearchField isDisabled />\n}\n",
    "type": "docs"
  },
  "forms/checkbox-controlled-demo": {
    "component": "@/components/docs/forms/checkbox-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Checkbox, Description } from 'ui'\n\nexport default function CheckboxControlledDemo() {\n  const [selected, setSelection] = React.useState(false)\n  return (\n    <>\n      <Checkbox isSelected={selected} onChange={setSelection} value=\"updates\">\n        Receive Updates\n      </Checkbox>\n      <Description className=\"mt-2 block [&>strong]:text-fg\">\n        You have <strong>{selected ? 'enabled' : 'disabled'}</strong> the option.\n      </Description>\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "forms/slider-controlled-demo": {
    "component": "@/components/docs/forms/slider-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Description, Slider } from 'ui'\n\nexport default function SearchFieldControlledDemo() {\n  const [temperature, setTemperature] = React.useState<number>(31)\n  const [saturation, setSaturation] = React.useState<number[]>([21, 86])\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <Slider\n          value={temperature}\n          onChange={(v) => setTemperature(v as number)}\n          label=\"Temperature\"\n        />\n        <Description className=\"mt-2 block [&>strong]:text-fg\">\n          Current temperature: <strong>{temperature ?? '-'}</strong>\n        </Description>\n      </div>\n      <div>\n        <Slider\n          value={saturation}\n          onChange={(v) => setSaturation(v as number[])}\n          label=\"Saturation\"\n        />\n        <Description className=\"mt-2 block [&>strong]:text-fg\">\n          Current saturation: <strong>{saturation ?? '-'}</strong>\n        </Description>\n      </div>\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "forms/radio-group-demo": {
    "component": "@/components/docs/forms/radio-group-demo",
    "raw": "'use client'\n\nimport { Radio, RadioGroup } from 'ui'\n\nexport default function RadioGroupDemo() {\n  return (\n    <RadioGroup label=\"Features\">\n      <Radio value=\"fs\">Font size: Small, Medium, Large</Radio>\n      <Radio value=\"dr\">Display resolution: 1080p, 1440p, 4K</Radio>\n      <Radio value=\"ss\">Sound settings: Mute, Low, Medium, High</Radio>\n      <Radio value=\"bi\">Background image: Default, Custom</Radio>\n      <Radio value=\"ks\">Keyboard shortcuts: Enabled, Disabled</Radio>\n    </RadioGroup>\n  )\n}\n",
    "type": "docs"
  },
  "forms/slider-demo": {
    "component": "@/components/docs/forms/slider-demo",
    "raw": "import { Slider } from 'ui'\n\nexport default function SliderDemo() {\n  return <Slider label=\"Volume\" />\n}\n",
    "type": "docs"
  },
  "forms/textarea-controlled-demo": {
    "component": "@/components/docs/forms/textarea-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Textarea } from 'ui'\n\nexport default function TextareaControlledDemo() {\n  const [value, setValue] = React.useState('')\n  return (\n    <>\n      <Textarea value={value} onChange={setValue} label=\"Address\" className=\"mb-2\" />\n      <p className=\"mt-2\">You have typed: {value ?? '-'}</p>\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "forms/checkbox-invalid-demo": {
    "component": "@/components/docs/forms/checkbox-invalid-demo",
    "raw": "'use client'\n\nimport { Checkbox } from 'ui'\n\nexport default function CheckboxInvalidDemo() {\n  return <Checkbox isInvalid>Enable notifications</Checkbox>\n}\n",
    "type": "docs"
  },
  "forms/search-field-demo": {
    "component": "@/components/docs/forms/search-field-demo",
    "raw": "import { SearchField } from 'ui'\n\nexport default function SearchFieldDemo() {\n  return <SearchField aria-label=\"Search\" placeholder=\"Search\" />\n}\n",
    "type": "docs"
  },
  "forms/slider-disabled-demo": {
    "component": "@/components/docs/forms/slider-disabled-demo",
    "raw": "'use client'\n\nimport { Slider } from 'ui'\n\nexport default function SliderDisabledDemo() {\n  return <Slider isDisabled label=\"Volume\" />\n}\n",
    "type": "docs"
  },
  "forms/radio-group-controlled-demo": {
    "component": "@/components/docs/forms/radio-group-controlled-demo",
    "raw": "import React from 'react'\n\nimport { Description, Radio, RadioGroup } from 'ui'\n\nexport default function RadioGroupControlledDemo() {\n  const [selected, setSelected] = React.useState('')\n  return (\n    <>\n      <RadioGroup label=\"Features\" value={selected} onChange={setSelected}>\n        <Radio value=\"theme\">Theme</Radio>\n        <Radio value=\"language\">Language</Radio>\n        <Radio value=\"timezone\">Timezone</Radio>\n        <Radio value=\"notifications\">Notifications</Radio>\n        <Radio value=\"privacy\">Privacy</Radio>\n      </RadioGroup>\n      <Description className=\"mt-2 block [&>strong]:text-fg\">\n        You have selected: <strong>{selected ?? '-'}</strong>\n      </Description>\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "forms/text-field-prefix-suffix-demo": {
    "component": "@/components/docs/forms/text-field-prefix-suffix-demo",
    "raw": "'use client'\n\nimport { IconBrandTwitter } from '@irsyadadl/paranoid'\nimport { TextField } from 'ui'\n\nexport default function TextFieldPrefixSuffixDemo() {\n  return (\n    <div className=\"flex flex-col gap-4\">\n      <TextField label=\"Twitter\" suffix={<IconBrandTwitter />} />\n      <TextField label=\"Sites\" prefix=\"https://\" suffix=\".com\" />\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "forms/textarea-disabled-demo": {
    "component": "@/components/docs/forms/textarea-disabled-demo",
    "raw": "'use client'\n\nimport { Textarea } from 'ui'\n\nexport default function TextareaDisabledDemo() {\n  return <Textarea isDisabled label=\"Address\" />\n}\n",
    "type": "docs"
  },
  "forms/input-otp-demo": {
    "component": "@/components/docs/forms/input-otp-demo",
    "raw": "import { InputOTP, InputOTPGroup, InputOTPSlot } from '@/components/ui'\n\nexport default function InputOtpDemo() {\n  return (\n    <div>\n      <InputOTP maxLength={6}>\n        <InputOTPGroup>\n          {[...Array(6)].map((_, index) => (\n            <InputOTPSlot key={index} index={index} />\n          ))}\n        </InputOTPGroup>\n      </InputOTP>\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "forms/text-field-demo": {
    "component": "@/components/docs/forms/text-field-demo",
    "raw": "'use client'\n\nimport { TextField } from 'ui'\n\nexport default function TextFieldDemo() {\n  return <TextField label=\"Name\" />\n}\n",
    "type": "docs"
  },
  "forms/textarea-validation-demo": {
    "component": "@/components/docs/forms/textarea-validation-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Button, Form, Textarea } from 'ui'\n\nexport default function TextareaValidationDemo() {\n  const [value, setValue] = React.useState('')\n  return (\n    <Form onSubmit={(e) => e.preventDefault()}>\n      <Textarea\n        value={value}\n        onChange={setValue}\n        label=\"Address\"\n        isRequired\n        className=\"mb-2\"\n      />\n      <Button type=\"submit\">Submit</Button>\n    </Form>\n  )\n}\n",
    "type": "docs"
  },
  "forms/slider-step-demo": {
    "component": "@/components/docs/forms/slider-step-demo",
    "raw": "'use client'\n\nimport { Slider } from 'ui'\n\nexport default function SliderStepDemo() {\n  return <Slider step={10} description=\"Step in 10\" label=\"Progress tracking\" />\n}\n",
    "type": "docs"
  },
  "forms/form-demo": {
    "component": "@/components/docs/forms/form-demo",
    "raw": "'use client'\n\nimport { Button, Form, Heading, TextField } from 'ui'\n\nexport default function FormDemo() {\n  return (\n    <div className=\"mx-auto max-w-md py-10\">\n      <Heading level={2} className=\"mb-4\">\n        Register\n      </Heading>\n      <Form onSubmit={() => {}} className=\"space-y-4\">\n        <TextField isRequired label=\"Name\" placeholder=\"Enter your name\" />\n        <TextField isRequired label=\"Email\" placeholder=\"Enter your email\" />\n        <div className=\"grid grid-cols-2 gap-4\">\n          <TextField\n            isRequired\n            label=\"Password\"\n            placeholder=\"Enter your password\"\n            type=\"password\"\n          />\n          <TextField\n            isRequired\n            label=\"Confirm Password\"\n            placeholder=\"Enter your password again\"\n            type=\"password\"\n          />\n        </div>\n        <Button type=\"submit\">Submit</Button>\n      </Form>\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "forms/switch-demo": {
    "component": "@/components/docs/forms/switch-demo",
    "raw": "'use client'\n\nimport { useTheme } from 'next-themes'\nimport { Switch } from 'ui'\n\nexport default function SwitchDemo() {\n  const { resolvedTheme, setTheme } = useTheme()\n  return (\n    <Switch onChange={() => setTheme(resolvedTheme === 'light' ? 'dark' : 'light')}>\n      Switch Theme\n    </Switch>\n  )\n}\n",
    "type": "docs"
  },
  "forms/radio-group-invalid-demo": {
    "component": "@/components/docs/forms/radio-group-invalid-demo",
    "raw": "'use client'\n\nimport { Radio, RadioGroup } from 'ui'\n\nexport default function RadioGroupInvalidDemo() {\n  return (\n    <RadioGroup isInvalid label=\"Features\">\n      <Radio value=\"fs\">Font size: Small, Medium, Large</Radio>\n      <Radio value=\"dr\">Display resolution: 1080p, 1440p, 4K</Radio>\n      <Radio value=\"ss\">Sound settings: Mute, Low, Medium, High</Radio>\n      <Radio value=\"bi\">Background image: Default, Custom</Radio>\n      <Radio value=\"ks\">Keyboard shortcuts: Enabled, Disabled</Radio>\n    </RadioGroup>\n  )\n}\n",
    "type": "docs"
  },
  "forms/text-field-disabled-demo": {
    "component": "@/components/docs/forms/text-field-disabled-demo",
    "raw": "'use client'\n\nimport { TextField } from 'ui'\n\nexport default function TextFieldDisabledDemo() {\n  return <TextField isDisabled label=\"Name\" />\n}\n",
    "type": "docs"
  },
  "forms/radio-group-disabled-demo": {
    "component": "@/components/docs/forms/radio-group-disabled-demo",
    "raw": "'use client'\n\nimport { Radio, RadioGroup } from 'ui'\n\nexport default function RadioGroupDisabledDemo() {\n  return (\n    <RadioGroup isDisabled label=\"Features\">\n      <Radio value=\"fs\">Font size: Small, Medium, Large</Radio>\n      <Radio value=\"dr\">Display resolution: 1080p, 1440p, 4K</Radio>\n      <Radio value=\"ss\">Sound settings: Mute, Low, Medium, High</Radio>\n      <Radio value=\"bi\">Background image: Default, Custom</Radio>\n      <Radio value=\"ks\">Keyboard shortcuts: Enabled, Disabled</Radio>\n    </RadioGroup>\n  )\n}\n",
    "type": "docs"
  },
  "forms/number-field-demo": {
    "component": "@/components/docs/forms/number-field-demo",
    "raw": "'use client'\n\nimport { NumberField } from 'ui'\n\nexport default function NumberFieldDemo() {\n  return <NumberField label=\"Cookies\" />\n}\n",
    "type": "docs"
  },
  "forms/checkbox-disabled-demo": {
    "component": "@/components/docs/forms/checkbox-disabled-demo",
    "raw": "'use client'\n\nimport { Checkbox } from 'ui'\n\nexport default function CheckboxDisabledDemo() {\n  return <Checkbox isDisabled>Enable notifications</Checkbox>\n}\n",
    "type": "docs"
  },
  "forms/switch-controlled-demo": {
    "component": "@/components/docs/forms/switch-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Description, Switch } from 'ui'\n\nexport default function SwitchControlledDemo() {\n  const [darkMode, setDarkMode] = React.useState(false)\n  return (\n    <>\n      <Switch isSelected={darkMode} onChange={setDarkMode} value=\"dark_mode\">\n        Enable Dark Mode\n      </Switch>\n\n      <Description className=\"mt-2 block [&>strong]:text-fg\">\n        Dark Mode is <strong>{darkMode ? 'enabled' : 'disabled'}</strong>\n      </Description>\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "forms/text-field-loading-demo": {
    "component": "@/components/docs/forms/text-field-loading-demo",
    "raw": "'use client'\n\nimport { TextField } from 'ui'\n\nexport default function TextFieldLoadingDemo() {\n  return <TextField isLoading indicatorPlace=\"suffix\" label=\"Name\" />\n}\n",
    "type": "docs"
  },
  "forms/text-field-controlled-demo": {
    "component": "@/components/docs/forms/text-field-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Description, TextField } from 'ui'\n\nexport default function TextFieldControlledDemo() {\n  const [value, setValue] = React.useState('')\n  return (\n    <>\n      <TextField value={value} onChange={setValue} label=\"Name\" className=\"mb-2\" />\n      <Description className=\"mt-2 block [&>strong]:text-fg\">\n        You have typed: <strong>{value ?? '-'}</strong>\n      </Description>\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "forms/search-field-with-label-demo": {
    "component": "@/components/docs/forms/search-field-with-label-demo",
    "raw": "'use client'\n\nimport { SearchField } from 'ui'\n\nexport default function SearchFieldWithLabelDemo() {\n  return <SearchField label=\"Search\" />\n}\n",
    "type": "docs"
  },
  "forms/text-field-suffix-button-demo": {
    "component": "@/components/docs/forms/text-field-suffix-button-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconPlus } from '@irsyadadl/paranoid'\nimport {\n  Button,\n  ModalBody,\n  ModalClose,\n  ModalContent,\n  ModalDescription,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n  ModalTitle,\n  TextField\n} from 'ui'\n\nexport default function TextFieldSuffixButtonDemo() {\n  const [open, setOpen] = React.useState(false)\n  const close = () => setOpen(false)\n  return (\n    <>\n      <ModalOverlay isOpen={open} onOpenChange={close}>\n        <ModalContent>\n          <ModalHeader>\n            <ModalTitle>New User</ModalTitle>\n            <ModalDescription>Create a new user account</ModalDescription>\n          </ModalHeader>\n          <ModalBody className=\"flex flex-col gap-4\">\n            <TextField label=\"Username\" placeholder=\"Username\" />\n            <TextField label=\"Email\" placeholder=\"Email\" type=\"email\" />\n          </ModalBody>\n          <ModalFooter>\n            <ModalClose appearance=\"outline\">Cancel</ModalClose>\n            <Button onPress={close}>Continue</Button>\n          </ModalFooter>\n        </ModalContent>\n      </ModalOverlay>\n      <TextField\n        label=\"Username\"\n        suffix={\n          <Button\n            aria-label=\"New user\"\n            onPress={() => setOpen(true)}\n            appearance=\"outline\"\n          >\n            <IconPlus />\n          </Button>\n        }\n      />\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "forms/switch-disabled-demo": {
    "component": "@/components/docs/forms/switch-disabled-demo",
    "raw": "'use client'\n\nimport { Switch } from 'ui'\n\nexport default function SwitchDemo() {\n  return <Switch isDisabled>Dark Mode</Switch>\n}\n",
    "type": "docs"
  },
  "forms/search-field-validation-demo": {
    "component": "@/components/docs/forms/search-field-validation-demo",
    "raw": "'use client'\n\nimport { Button, Form, SearchField } from 'ui'\n\nexport default function SearchFieldValidationDemo() {\n  return (\n    <Form>\n      <SearchField isRequired label=\"Name\" className=\"mb-2\" />\n      <Button type=\"submit\">Submit</Button>\n    </Form>\n  )\n}\n",
    "type": "docs"
  },
  "buttons/file-trigger-disabled-demo": {
    "component": "@/components/docs/buttons/file-trigger-disabled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Description, FileTrigger } from 'ui'\n\nexport default function FileTriggerDemo() {\n  const [file, setFile] = React.useState<string[] | null>(null)\n  return (\n    <>\n      <FileTrigger\n        isDisabled\n        onSelect={(e) => {\n          const files = Array.from(e ?? [])\n          const filenames = files.map((file) => file.name)\n          setFile(filenames)\n        }}\n      />\n      {file && <Description>{file}</Description>}\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "buttons/button-intent-demo": {
    "component": "@/components/docs/buttons/button-intent-demo",
    "raw": "'use client'\n\nimport { Button, Grid, GridItem } from 'ui'\n\nexport default function ButtonIntentDemo() {\n  return (\n    <Grid columns={{ lg: 3, sm: 2 }} gap={4}>\n      <GridItem>\n        <Button intent=\"light\">Label</Button>\n      </GridItem>\n      <GridItem>\n        <Button intent=\"secondary\">Label</Button>\n      </GridItem>\n      <GridItem>\n        <Button intent=\"danger\">Label</Button>\n      </GridItem>\n      <GridItem>\n        <Button intent=\"info\">Label</Button>\n      </GridItem>\n      <GridItem>\n        <Button intent=\"light/dark\">Label</Button>\n      </GridItem>\n      <GridItem>\n        <Button intent=\"success\">Label</Button>\n      </GridItem>\n      <GridItem>\n        <Button>Label</Button>\n      </GridItem>\n    </Grid>\n  )\n}\n",
    "type": "docs"
  },
  "buttons/file-trigger-folder-demo": {
    "component": "@/components/docs/buttons/file-trigger-folder-demo",
    "raw": "'use client'\n\nimport { FileTrigger } from 'ui'\n\nexport default function FileTriggerFolderDemo() {\n  return <FileTrigger acceptDirectory />\n}\n",
    "type": "docs"
  },
  "buttons/file-trigger-demo": {
    "component": "@/components/docs/buttons/file-trigger-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Description, FileTrigger } from 'ui'\n\nexport default function FileTriggerDemo() {\n  const [file, setFile] = React.useState<string[] | null>(null)\n  return (\n    <>\n      <FileTrigger\n        onSelect={(e) => {\n          const files = Array.from(e ?? [])\n          const filenames = files.map((file) => file.name)\n          setFile(filenames)\n        }}\n      />\n      {file && <Description>{file}</Description>}\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "buttons/button-icon-demo": {
    "component": "@/components/docs/buttons/button-icon-demo",
    "raw": "'use client'\n\nimport { IconBrandLaravel } from '@irsyadadl/paranoid'\nimport { Button } from 'ui'\n\nexport default function ButtonIconDemo() {\n  return (\n    <Button intent=\"danger\">\n      <IconBrandLaravel />\n      Laravel\n    </Button>\n  )\n}\n",
    "type": "docs"
  },
  "buttons/toggle-button-demo": {
    "component": "@/components/docs/buttons/toggle-button-demo",
    "raw": "'use client'\n\nimport { ToggleButton } from 'ui'\n\nexport default function ToggleButtonDemo() {\n  return (\n    <ToggleButton>{({ isSelected }) => <>{isSelected ? 'Unpin' : 'Pin'}</>}</ToggleButton>\n  )\n}\n",
    "type": "docs"
  },
  "buttons/button-disabled-demo": {
    "component": "@/components/docs/buttons/button-disabled-demo",
    "raw": "'use client'\n\nimport { Button } from 'ui'\n\nexport default function ButtonDisabledDemo() {\n  return <Button isDisabled>Label</Button>\n}\n",
    "type": "docs"
  },
  "buttons/button-only-icon-demo": {
    "component": "@/components/docs/buttons/button-only-icon-demo",
    "raw": "'use client'\n\nimport { IconBrandParsinta } from '@irsyadadl/paranoid'\nimport { Button } from 'ui'\n\nexport default function ButtonOnlyIconDemo() {\n  return (\n    <Button size=\"square-petite\" appearance=\"outline\">\n      <IconBrandParsinta />\n    </Button>\n  )\n}\n",
    "type": "docs"
  },
  "buttons/button-size-demo": {
    "component": "@/components/docs/buttons/button-size-demo",
    "raw": "'use client'\n\nimport { Button } from 'ui'\n\nexport default function ButtonSizeDemo() {\n  return (\n    <div className=\"flex gap-2\">\n      <Button size=\"extra-small\">Label</Button>\n      <Button size=\"small\">Label</Button>\n      <Button>Label</Button>\n      <Button size=\"large\">Label</Button>\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "buttons/button-shape-demo": {
    "component": "@/components/docs/buttons/button-shape-demo",
    "raw": "'use client'\n\nimport { Button } from 'ui'\n\nexport default function ButtonShapeDemo() {\n  return <Button shape=\"circle\">Label</Button>\n}\n",
    "type": "docs"
  },
  "buttons/file-trigger-multiple-demo": {
    "component": "@/components/docs/buttons/file-trigger-multiple-demo",
    "raw": "'use client'\n\nimport { FileTrigger } from 'ui'\n\nexport default function FileTriggerMultipleDemo() {\n  return <FileTrigger allowsMultiple />\n}\n",
    "type": "docs"
  },
  "buttons/file-trigger-camera-demo": {
    "component": "@/components/docs/buttons/file-trigger-camera-demo",
    "raw": "'use client'\n\nimport { FileTrigger } from 'ui'\n\nexport default function FileTriggerCameraDemo() {\n  return <FileTrigger defaultCamera=\"environment\">Open a camera</FileTrigger>\n}\n",
    "type": "docs"
  },
  "buttons/button-basic-demo": {
    "component": "@/components/docs/buttons/button-basic-demo",
    "raw": "'use client'\n\nimport { Button } from 'ui'\n\nexport default function ButtonBasicDemo() {\n  return <Button>Label</Button>\n}\n",
    "type": "docs"
  },
  "buttons/button-appearance-demo": {
    "component": "@/components/docs/buttons/button-appearance-demo",
    "raw": "'use client'\n\nimport title from 'title'\nimport { Button, buttonStyles } from 'ui'\n\ntype Appearance = keyof typeof buttonStyles.variants.appearance\n\nexport default function ButtonAppearanceDemo() {\n  return (\n    <div className=\"flex flex-col gap-2 md:flex-row md:flex-wrap\">\n      {Object.keys(buttonStyles.variants.appearance).map((appearance) => (\n        <div key={appearance}>\n          <Button appearance={appearance as Appearance}>{title(appearance)}</Button>\n        </div>\n      ))}\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "overlays/modal-triggered-by-menu-demo": {
    "component": "@/components/docs/overlays/modal-triggered-by-menu-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { wait } from '@/lib/utils'\nimport { IconDotsVertical } from '@irsyadadl/paranoid'\nimport {\n  Button,\n  buttonStyles,\n  LoadingDots,\n  Menu,\n  MenuContent,\n  MenuItem,\n  MenuTrigger,\n  ModalClose,\n  ModalContent,\n  ModalDescription,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n  ModalTitle\n} from 'ui'\n\nexport default function ModalTriggeredByMenuDemo() {\n  const [state, setState] = React.useState<string | null>(null)\n  const [loading, setLoading] = React.useState<boolean>(false)\n  const closeModal = () => setState(null)\n  const executeAction = (action: string) => {\n    console.log(`${action} is executing`)\n    setLoading(true)\n    wait(2000).then(() => {\n      setLoading(false)\n      closeModal()\n    })\n  }\n\n  const actionType = (t: string | null) => {\n    switch (t) {\n      case 'delete':\n        return {\n          title: 'Delete User',\n          description: 'Are you sure you want to delete this item?',\n          confirmText: 'Delete',\n          action: () => executeAction(t)\n        }\n\n      case 'ban':\n        return {\n          title: 'Ban User',\n          description: 'Are you sure you want to ban this user?',\n          confirmText: 'Ban',\n          action: () => executeAction(t)\n        }\n\n      case 'restore':\n        return {\n          title: 'Restore User',\n          description: 'Are you sure you want to restore this user?',\n          confirmText: 'Restore',\n          action: () => executeAction(t)\n        }\n      default:\n        return\n    }\n  }\n  return (\n    <>\n      <Menu>\n        <MenuTrigger className={buttonStyles({ appearance: 'outline' })}>\n          <IconDotsVertical />\n        </MenuTrigger>\n        <MenuContent placement=\"bottom\">\n          <MenuItem onAction={() => setState('delete')}>Delete</MenuItem>\n          <MenuItem onAction={() => setState('ban')}>Ban</MenuItem>\n          <MenuItem onAction={() => setState('restore')}>Restore</MenuItem>\n        </MenuContent>\n      </Menu>\n\n      <ModalOverlay isOpen={state !== null} onOpenChange={closeModal}>\n        <ModalContent>\n          <ModalHeader>\n            <ModalTitle>{actionType(state)?.title}</ModalTitle>\n            <ModalDescription>{actionType(state)?.description}</ModalDescription>\n          </ModalHeader>\n          <ModalFooter>\n            <ModalClose>Cancel</ModalClose>\n            <Button\n              className=\"min-w-24\"\n              isDisabled={loading}\n              onPress={actionType(state)?.action}\n            >\n              {loading ? (\n                <LoadingDots className={'bg-fg'} />\n              ) : (\n                actionType(state)?.confirmText\n              )}\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </ModalOverlay>\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "overlays/sheet-basic-demo": {
    "component": "@/components/docs/overlays/sheet-basic-demo",
    "raw": "'use client'\n\nimport {\n  Button,\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetFooter,\n  SheetHeader,\n  SheetOverlay,\n  SheetTitle\n} from 'ui'\n\nexport default function SheetBasicDemo() {\n  return (\n    <Sheet>\n      <Button appearance=\"outline\">Open sheet</Button>\n      <SheetOverlay>\n        <SheetContent>\n          <SheetHeader>\n            <SheetTitle>Sheet Title</SheetTitle>\n            <SheetDescription>Sheet Description</SheetDescription>\n          </SheetHeader>\n          Sheet Body\n          <SheetFooter>Sheet Footer</SheetFooter>\n        </SheetContent>\n      </SheetOverlay>\n    </Sheet>\n  )\n}\n",
    "type": "docs"
  },
  "overlays/tooltip-demo": {
    "component": "@/components/docs/overlays/tooltip-demo",
    "raw": "'use client'\n\nimport { IconBrandGithub, IconBrandLayers, IconBrandTwitter } from '@irsyadadl/paranoid'\nimport { buttonStyles, Tooltip, TooltipContent, TooltipTrigger } from 'ui'\n\nexport default function TooltipDemo() {\n  return (\n    <div className=\"flex gap-2\">\n      <Tooltip>\n        <TooltipTrigger\n          aria-label=\"Follow My Twitter\"\n          className={buttonStyles({\n            appearance: 'outline',\n            size: 'square-petite'\n          })}\n        >\n          <IconBrandTwitter />\n        </TooltipTrigger>\n        <TooltipContent>Tollow me on Twitter @irsyadadl</TooltipContent>\n      </Tooltip>\n      <Tooltip>\n        <TooltipTrigger\n          aria-label=\"Follow My Github\"\n          className={buttonStyles({\n            appearance: 'outline',\n            size: 'square-petite'\n          })}\n        >\n          <IconBrandGithub />\n        </TooltipTrigger>\n        <TooltipContent>Follow me on Github @irsyadadl</TooltipContent>\n      </Tooltip>\n      <Tooltip>\n        <TooltipTrigger\n          aria-label=\"Follow My Layers\"\n          className={buttonStyles({\n            appearance: 'outline',\n            size: 'square-petite'\n          })}\n        >\n          <IconBrandLayers />\n        </TooltipTrigger>\n        <TooltipContent>Follow me on Github irsyad</TooltipContent>\n      </Tooltip>\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "overlays/sheet-menu-demo": {
    "component": "@/components/docs/overlays/sheet-menu-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport {\n  IconBook,\n  IconBookOpen,\n  IconBrandCopilot,\n  IconBrandGithub,\n  IconBuilding,\n  IconChart,\n  IconCodeBrackets,\n  IconFilter,\n  IconGear,\n  IconGlobe,\n  IconHeart,\n  IconLogout,\n  IconMessages,\n  IconPeople,\n  IconPerson,\n  IconStar\n} from '@irsyadadl/paranoid'\nimport { Group, Menu } from 'react-aria-components'\nimport {\n  Avatar,\n  Button,\n  Checkbox,\n  Description,\n  MenuItem,\n  MenuSection,\n  MenuSeparator,\n  ModalBody,\n  ModalClose,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n  ModalTitle,\n  Select,\n  SelectItem,\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetOverlay,\n  SheetTitle,\n  SheetTrigger,\n  TextField\n} from 'ui'\n\nexport default function SheetMenuDemo() {\n  const [isOpen, setIsOpen] = React.useState(false)\n\n  const openModal = () => setIsOpen(true)\n  const closeModal = () => setIsOpen(false)\n  return (\n    <>\n      <ModalOverlay isOpen={isOpen} onOpenChange={setIsOpen}>\n        <ModalContent>\n          <ModalHeader>\n            <ModalTitle>Edit status</ModalTitle>\n          </ModalHeader>\n          <ModalBody>\n            <div className=\"space-y-4\">\n              <TextField\n                prefix={<IconBrandGithub />}\n                label=\"Status\"\n                placeholder=\"What's your status?\"\n              />\n              <Group>\n                <Checkbox>Busy</Checkbox>\n                <Description>\n                  When others mention you, assign you, or request your review, GitHub will\n                  let them know that you have limited availability.\n                </Description>\n              </Group>\n              <Select label=\"Clear Status\">\n                <SelectItem>Never</SelectItem>\n                <SelectItem>in 30 Minutes</SelectItem>\n                <SelectItem>in 1 Hour</SelectItem>\n                <SelectItem>in 8 Hours</SelectItem>\n                <SelectItem>after Today</SelectItem>\n                <SelectItem>after a Week</SelectItem>\n                <SelectItem>after a Month</SelectItem>\n              </Select>\n              <Select label=\"Visible to\">\n                <SelectItem>Everyone</SelectItem>\n                <SelectItem>Organization</SelectItem>\n                <SelectItem>Public</SelectItem>\n              </Select>\n            </div>\n          </ModalBody>\n          <ModalFooter>\n            <ModalClose>Clear Status</ModalClose>\n            <Button onPress={closeModal}>Set Status</Button>\n          </ModalFooter>\n        </ModalContent>\n      </ModalOverlay>\n      <Sheet>\n        <SheetTrigger aria-label=\"Open menu\">\n          <Avatar src=\"https://github.com/irsyadadl.png\" alt=\"irsyadadl\" />\n        </SheetTrigger>\n        <SheetOverlay>\n          <SheetContent closeButton={false}>\n            <SheetHeader className=\"flex flex-row items-center gap-x-3 mb-2\">\n              <Avatar src=\"https://github.com/irsyadadl.png\" alt=\"irsyadadl\" />\n              <div>\n                <SheetTitle>irsyadadl</SheetTitle>\n                <SheetDescription>Irsyad A. Panjaitan</SheetDescription>\n              </div>\n            </SheetHeader>\n            <Menu>\n              <MenuItem onAction={openModal}>\n                <IconBrandGithub />\n                Edit Status\n              </MenuItem>\n              <MenuSeparator />\n              <MenuSection>\n                <MenuItem>\n                  <IconPerson />\n                  Your profile\n                </MenuItem>\n                <MenuItem>\n                  <IconBook /> Your repositories\n                </MenuItem>\n                <MenuItem>\n                  <IconBrandCopilot /> Your Copilot\n                </MenuItem>\n                <MenuItem>\n                  <IconChart /> Your projects\n                </MenuItem>\n                <MenuItem>\n                  <IconStar /> Your stars\n                </MenuItem>\n                <MenuItem>\n                  <IconCodeBrackets /> Your gists\n                </MenuItem>\n                <MenuItem>\n                  <IconBuilding /> Your organizations\n                </MenuItem>\n                <MenuItem>\n                  <IconGlobe /> Your enterprises\n                </MenuItem>\n                <MenuItem>\n                  <IconHeart />\n                  Your sponsors\n                </MenuItem>\n              </MenuSection>\n              <MenuSeparator />\n              <MenuSection>\n                <MenuItem>\n                  <IconFilter /> Feature preview\n                </MenuItem>\n                <MenuItem>\n                  <IconGear />\n                  Settings\n                </MenuItem>\n              </MenuSection>\n              <MenuSeparator />\n              <MenuSection>\n                <MenuItem>\n                  <IconBookOpen /> GitHub Docs\n                </MenuItem>\n                <MenuItem>\n                  <IconPeople /> GitHub Support\n                </MenuItem>\n                <MenuItem>\n                  <IconMessages /> GitHub Community\n                </MenuItem>\n              </MenuSection>\n              <MenuSeparator />\n              <MenuItem>\n                <IconLogout /> Sign out\n              </MenuItem>\n            </Menu>\n          </SheetContent>\n        </SheetOverlay>\n      </Sheet>\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "overlays/drawer-with-footer-demo": {
    "component": "@/components/docs/overlays/drawer-with-footer-demo",
    "raw": "'use client'\n\nimport {\n  buttonStyles,\n  Drawer,\n  DrawerBody,\n  DrawerClose,\n  DrawerContent,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerTitle,\n  DrawerTrigger\n} from 'ui'\n\nexport default function DrawerBasicDemo() {\n  return (\n    <Drawer>\n      <DrawerTrigger className={buttonStyles({ appearance: 'outline' })}>\n        Open Drawer\n      </DrawerTrigger>\n      <DrawerContent>\n        <DrawerHeader>\n          <DrawerTitle>The Beatles</DrawerTitle>\n        </DrawerHeader>\n        <DrawerBody>\n          The Beatles were an English rock band formed in Liverpool in 1960, comprising\n          John Lennon, Paul McCartney, George Harrison and Ringo Starr.\n        </DrawerBody>\n        <DrawerFooter>\n          <DrawerClose>Close</DrawerClose>\n        </DrawerFooter>\n      </DrawerContent>\n    </Drawer>\n  )\n}\n",
    "type": "docs"
  },
  "overlays/drawer-basic-demo": {
    "component": "@/components/docs/overlays/drawer-basic-demo",
    "raw": "'use client'\n\nimport {\n  buttonStyles,\n  Drawer,\n  DrawerContent,\n  DrawerDescription,\n  DrawerHeader,\n  DrawerTitle,\n  DrawerTrigger\n} from 'ui'\n\nexport default function DrawerBasicDemo() {\n  return (\n    <Drawer>\n      <DrawerTrigger className={buttonStyles({ appearance: 'outline' })}>\n        Open Drawer\n      </DrawerTrigger>\n      <DrawerContent>\n        <DrawerHeader>\n          <DrawerTitle>The Beatles</DrawerTitle>\n          <DrawerDescription>\n            The Beatles were an English rock band formed in Liverpool in 1960, comprising\n            John Lennon, Paul McCartney, George Harrison and Ringo Starr.\n          </DrawerDescription>\n        </DrawerHeader>\n      </DrawerContent>\n    </Drawer>\n  )\n}\n",
    "type": "docs"
  },
  "overlays/sheet-demo": {
    "component": "@/components/docs/overlays/sheet-demo",
    "raw": "'use client'\n\nimport React, { useState } from 'react'\n\nimport { OptionPreview } from '@/components/docs/outside/option-preview'\nimport {\n  Button,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetOverlay,\n  SheetTitle,\n  Switch\n} from 'ui'\nimport { titleCase } from 'usemods'\n\ntype Side = 'left' | 'right' | 'top' | 'bottom'\nexport default function SheetDemo() {\n  const [sheetSide, setSheetSide] = React.useState<Side>('left')\n  const [isOpen, setIsOpen] = React.useState(false)\n\n  const [settings, setSettings] = useState({\n    closeButton: true,\n    isStack: true\n  })\n\n  const sides: Side[] = ['left', 'right', 'top', 'bottom']\n\n  const pressHandler = (side: Side, open: boolean) => {\n    setSheetSide(side)\n    setIsOpen(open)\n  }\n\n  return (\n    <>\n      <OptionPreview>\n        <Switch\n          defaultSelected={settings.isStack}\n          onChange={() => setSettings({ ...settings, isStack: !settings.isStack })}\n        >\n          Toggle stack\n        </Switch>\n        <Switch\n          defaultSelected={settings.closeButton}\n          onChange={() =>\n            setSettings({ ...settings, closeButton: !settings.closeButton })\n          }\n        >\n          With x button\n        </Switch>\n      </OptionPreview>\n      <div className=\"grid grid-cols-2 gap-2\">\n        {sides.map((side, idx) => (\n          <Button appearance=\"outline\" onPress={() => pressHandler(side, true)} key={idx}>\n            {titleCase(side)}\n          </Button>\n        ))}\n      </div>\n      <SheetOverlay isOpen={isOpen} onOpenChange={setIsOpen}>\n        <SheetContent\n          closeButton={settings.closeButton}\n          isStack={settings.isStack}\n          side={sheetSide}\n        >\n          <SheetHeader>\n            <SheetTitle>{titleCase(sheetSide)}</SheetTitle>\n            <SheetDescription>The sheet will go from {sheetSide} side.</SheetDescription>\n          </SheetHeader>\n        </SheetContent>\n      </SheetOverlay>\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "overlays/alert-dialog-demo": {
    "component": "@/components/docs/overlays/alert-dialog-demo",
    "raw": "'use client'\n\nimport {\n  Button,\n  buttonStyles,\n  Modal,\n  ModalContent,\n  ModalDescription,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n  ModalTitle,\n  ModalTrigger\n} from 'ui'\n\nexport default function AlertDialogDemo() {\n  return (\n    <Modal>\n      <ModalTrigger className={buttonStyles({ intent: 'danger' })}>Delete</ModalTrigger>\n      <ModalOverlay isDismissable={false}>\n        <ModalContent>\n          {({ close }) => (\n            <>\n              <ModalHeader>\n                <ModalTitle>Delete file</ModalTitle>\n                <ModalDescription>\n                  This will permanently delete the selected file. Continue?\n                </ModalDescription>\n              </ModalHeader>\n              <ModalFooter>\n                <Button appearance=\"outline\" onPress={close}>\n                  Cancel\n                </Button>\n                <Button intent=\"danger\" onPress={close}>\n                  Continue\n                </Button>\n              </ModalFooter>\n            </>\n          )}\n        </ModalContent>\n      </ModalOverlay>\n    </Modal>\n  )\n}\n",
    "type": "docs"
  },
  "overlays/drawer-controlled-demo": {
    "component": "@/components/docs/overlays/drawer-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport {\n  Button,\n  Drawer,\n  DrawerBody,\n  DrawerClose,\n  DrawerContent,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerTitle\n} from 'ui'\n\nexport default function DrawerBasicDemo() {\n  const [isOpen, setIsOpen] = React.useState(false)\n  return (\n    <>\n      <Button onPress={() => setIsOpen(!isOpen)} appearance=\"outline\">\n        Open Drawer\n      </Button>\n      <Drawer isOpen={isOpen} onOpenChange={setIsOpen}>\n        <DrawerContent>\n          <DrawerHeader>\n            <DrawerTitle>The Beatles</DrawerTitle>\n          </DrawerHeader>\n          <DrawerBody>\n            The Beatles were an English rock band formed in Liverpool in 1960, comprising\n            John Lennon, Paul McCartney, George Harrison and Ringo Starr.\n          </DrawerBody>\n          <DrawerFooter>\n            <DrawerClose>Close</DrawerClose>\n          </DrawerFooter>\n        </DrawerContent>\n      </Drawer>\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "overlays/modal-controlled-demo": {
    "component": "@/components/docs/overlays/modal-controlled-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\n\nimport {\n  Button,\n  ModalClose,\n  ModalContent,\n  ModalDescription,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n  ModalTitle\n} from 'ui'\n\nexport default function ModalControlledDemo() {\n  const [open, setOpen] = useState(false)\n  return (\n    <>\n      <Button onPress={() => setOpen(true)} intent=\"secondary\">\n        Controlled\n      </Button>\n      <ModalOverlay isOpen={open} onOpenChange={setOpen}>\n        <ModalContent>\n          <ModalHeader>\n            <ModalTitle>Delete file</ModalTitle>\n            <ModalDescription>\n              This will permanently delete the selected file. Continue?\n            </ModalDescription>\n          </ModalHeader>\n          <ModalFooter>\n            <ModalClose>Cancel</ModalClose>\n            <Button onPress={() => setOpen(false)}>Continue</Button>\n          </ModalFooter>\n        </ModalContent>\n      </ModalOverlay>\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "overlays/popover-demo": {
    "component": "@/components/docs/overlays/popover-demo",
    "raw": "'use client'\n\nimport {\n  Button,\n  Popover,\n  PopoverContent,\n  PopoverDescription,\n  PopoverFooter,\n  PopoverHeader,\n  PopoverTitle\n} from 'ui'\n\nexport default function PopoverDemo() {\n  return (\n    <Popover>\n      <Button intent=\"secondary\">Forgot Password</Button>\n      <PopoverContent className=\"w-[28rem]\">\n        <PopoverHeader>\n          <PopoverTitle>Email</PopoverTitle>\n          <PopoverDescription>We'll send you an email to log in.</PopoverDescription>\n        </PopoverHeader>\n        <PopoverFooter>\n          <Button>Send Login Link</Button>\n        </PopoverFooter>\n      </PopoverContent>\n    </Popover>\n  )\n}\n",
    "type": "docs"
  },
  "overlays/modal-demo": {
    "component": "@/components/docs/overlays/modal-demo",
    "raw": "'use client'\n\nimport {\n  Button,\n  Form,\n  Modal,\n  ModalClose,\n  ModalContent,\n  ModalDescription,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n  ModalTitle,\n  TextField\n} from 'ui'\n\nexport default function ModalDemo() {\n  return (\n    <Modal>\n      <Button>Turn on 2FA</Button>\n      <ModalOverlay>\n        <ModalContent>\n          <ModalHeader>\n            <ModalTitle>Nice! Let's beef up your account.</ModalTitle>\n            <ModalDescription>\n              2FA beefs up your account's defense. Pop in your password to keep going.\n            </ModalDescription>\n          </ModalHeader>\n          <Form onSubmit={() => {}}>\n            <TextField\n              isRequired\n              autoFocus\n              label=\"Password\"\n              type=\"password\"\n              placeholder=\"Enter your password\"\n            />\n            <ModalFooter className=\"pt-4\">\n              <ModalClose>Cancel</ModalClose>\n              <Button type=\"submit\">Turn on 2FA</Button>\n            </ModalFooter>\n          </Form>\n        </ModalContent>\n      </ModalOverlay>\n    </Modal>\n  )\n}\n",
    "type": "docs"
  },
  "navigation/tabs-demo": {
    "component": "@/components/docs/navigation/tabs-demo",
    "raw": "'use client'\n\nimport { Tab, TabList, TabPanel, Tabs } from 'ui'\n\nexport default function TabsDemo() {\n  return (\n    <Tabs aria-label=\"Packages\">\n      <TabList>\n        <Tab id=\"t1\">Tab 1</Tab>\n        <Tab id=\"t2\">Tab 2</Tab>\n        <Tab id=\"t3\">Tab 3</Tab>\n      </TabList>\n      <TabPanel id=\"t1\">Tab 1 content</TabPanel>\n      <TabPanel id=\"t2\">Tab 2 content</TabPanel>\n      <TabPanel id=\"t3\">Tab 3 content</TabPanel>\n    </Tabs>\n  )\n}\n",
    "type": "docs"
  },
  "navigation/pagination-dynamic-demo": {
    "component": "@/components/docs/navigation/pagination-dynamic-demo",
    "raw": "'use client'\n\nimport {\n  Pagination,\n  PaginationFirst,\n  PaginationItem,\n  PaginationLabel,\n  PaginationLast,\n  PaginationLink,\n  PaginationList,\n  PaginationNext,\n  PaginationPrevious,\n  PaginationSeparator\n} from 'ui'\n\nconst pages = Array.from({ length: 6 }, (_, i) => ({ value: i + 1 }))\nexport default function PaginationDynamicDemo() {\n  return (\n    <Pagination>\n      <PaginationList>\n        <PaginationItem>\n          <PaginationFirst href=\"#\" />\n        </PaginationItem>\n        <PaginationItem>\n          <PaginationPrevious href=\"#\" />\n        </PaginationItem>\n        <PaginationItem className=\"lg:hidden\">\n          <PaginationList className=\"rounded-lg border\">\n            <PaginationLabel className=\"font-semibold\">1</PaginationLabel>\n            <PaginationSeparator />\n            <PaginationLabel className=\"text-muted-fg\">6</PaginationLabel>\n          </PaginationList>\n        </PaginationItem>\n        <PaginationItem className=\"hidden lg:inline\">\n          <PaginationList items={pages}>\n            {(item) => (\n              <PaginationItem id={item.value.toString()}>\n                <PaginationLink isActive={item.value === 4} href=\"#\">\n                  {item.value}\n                </PaginationLink>\n              </PaginationItem>\n            )}\n          </PaginationList>\n        </PaginationItem>\n        <PaginationItem>\n          <PaginationNext href=\"#\" />\n        </PaginationItem>\n        <PaginationItem>\n          <PaginationLast href=\"#\" />\n        </PaginationItem>\n      </PaginationList>\n    </Pagination>\n  )\n}\n",
    "type": "docs"
  },
  "navigation/pagination-demo": {
    "component": "@/components/docs/navigation/pagination-demo",
    "raw": "'use client'\n\nimport {\n  Pagination,\n  PaginationEllipsis,\n  PaginationFirst,\n  PaginationItem,\n  PaginationLast,\n  PaginationLink,\n  PaginationList,\n  PaginationNext,\n  PaginationPrevious\n} from 'ui'\n\nexport default function PaginationDemo() {\n  return (\n    <Pagination>\n      <PaginationList>\n        <PaginationItem>\n          <PaginationFirst href=\"#\" />\n        </PaginationItem>\n        <PaginationItem>\n          <PaginationPrevious href=\"#\" />\n        </PaginationItem>\n        <PaginationItem>\n          <PaginationLink href=\"#\">1</PaginationLink>\n        </PaginationItem>\n        <PaginationItem>\n          <PaginationLink href=\"#\" isActive>\n            2\n          </PaginationLink>\n        </PaginationItem>\n        <PaginationItem>\n          <PaginationEllipsis />\n        </PaginationItem>\n        <PaginationItem>\n          <PaginationNext href=\"#\" />\n        </PaginationItem>\n        <PaginationItem>\n          <PaginationLast href=\"#\" />\n        </PaginationItem>\n      </PaginationList>\n    </Pagination>\n  )\n}\n",
    "type": "docs"
  },
  "navigation/simple-pagination-demo": {
    "component": "@/components/docs/navigation/simple-pagination-demo",
    "raw": "'use client'\n\nimport {\n  Pagination,\n  PaginationFirst,\n  PaginationItem,\n  PaginationLabel,\n  PaginationLast,\n  PaginationList,\n  PaginationNext,\n  PaginationPrevious,\n  PaginationSeparator\n} from 'ui'\n\nexport default function SimplePaginationDemo() {\n  return (\n    <Pagination>\n      <PaginationList>\n        <PaginationItem>\n          <PaginationFirst href=\"#\" />\n        </PaginationItem>\n\n        <PaginationItem>\n          <PaginationPrevious href=\"#\" />\n        </PaginationItem>\n        <PaginationItem>\n          <PaginationList className=\"rounded-lg border\">\n            <PaginationItem>\n              <PaginationLabel className=\"font-semibold\">1</PaginationLabel>\n            </PaginationItem>\n            <PaginationItem>\n              <PaginationSeparator />\n            </PaginationItem>\n            <PaginationItem>\n              <PaginationLabel className=\"text-muted-fg\">10</PaginationLabel>\n            </PaginationItem>\n          </PaginationList>\n        </PaginationItem>\n        <PaginationItem>\n          <PaginationNext href=\"#\" />\n        </PaginationItem>\n        <PaginationItem>\n          <PaginationLast href=\"#\" />\n        </PaginationItem>\n      </PaginationList>\n    </Pagination>\n  )\n}\n",
    "type": "docs"
  },
  "navigation/tabs-orientation-demo": {
    "component": "@/components/docs/navigation/tabs-orientation-demo",
    "raw": "'use client'\n\nimport { Tab, TabList, TabPanel, Tabs } from 'ui'\n\nexport default function TabsOrientationDemo() {\n  return (\n    <Tabs orientation=\"vertical\" aria-label=\"Packages\">\n      <TabList>\n        <Tab id=\"t1\">Tab 1</Tab>\n        <Tab id=\"t2\">Tab 2</Tab>\n        <Tab id=\"t3\">Tab 3</Tab>\n      </TabList>\n      <TabPanel id=\"t1\">Tab 1 content</TabPanel>\n      <TabPanel id=\"t2\">Tab 2 content</TabPanel>\n      <TabPanel id=\"t3\">Tab 3 content</TabPanel>\n    </Tabs>\n  )\n}\n",
    "type": "docs"
  },
  "navigation/link-demo": {
    "component": "@/components/docs/navigation/link-demo",
    "raw": "'use client'\n\nimport { Link } from 'ui'\n\nexport default function LinkDemo() {\n  return <Link href=\"/\">Link</Link>\n}\n",
    "type": "docs"
  },
  "navigation/breadcrumbs-demo": {
    "component": "@/components/docs/navigation/breadcrumbs-demo",
    "raw": "'use client'\n\nimport { Breadcrumb, Breadcrumbs } from 'ui'\n\nexport default function BreadcrumbsDemo() {\n  return (\n    <Breadcrumbs onAction={() => {}}>\n      <Breadcrumb href=\"/\">Home</Breadcrumb>\n      <Breadcrumb href=\"/design-system\">Design System</Breadcrumb>\n      <Breadcrumb>Collections</Breadcrumb>\n    </Breadcrumbs>\n  )\n}\n",
    "type": "docs"
  },
  "drag-and-drop/drop-zone-and-file-trigger-demo": {
    "component": "@/components/docs/drag-and-drop/drop-zone-and-file-trigger-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { type FileDropItem } from 'react-aria'\nimport { DropZone, FileTrigger, Label } from 'ui'\n\nexport default function DropZoneAndFileTriggerDemo() {\n  const [files, setFiles] = React.useState<string[] | null>(null)\n\n  const handleDrop = (e: { items: any[] }) => {\n    const files = e.items.filter((file) => file.kind === 'file') as FileDropItem[]\n    const filenames = files.map((file) => file.name)\n    if (filenames.length > 0) {\n      setFiles(filenames)\n    }\n  }\n\n  const handleSelect = (files: FileList | null) => {\n    const fileArray = Array.from(files ?? [])\n    const filenames = fileArray.map((file) => file.name)\n    setFiles(filenames)\n  }\n  return (\n    <DropZone onDrop={handleDrop}>\n      <FileTrigger allowsMultiple onSelect={(e) => handleSelect(e)}>\n        Select files\n      </FileTrigger>\n      <Label slot=\"label\">{files ? files.join(', ') : 'Toss your stuff here'}</Label>\n    </DropZone>\n  )\n}\n",
    "type": "docs"
  },
  "drag-and-drop/drop-zone-demo": {
    "component": "@/components/docs/drag-and-drop/drop-zone-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { DropZone, Label } from 'ui'\n\nexport default function DropZoneDemo() {\n  const [dropped, setDropped] = React.useState(false)\n\n  return (\n    <DropZone onDrop={() => setDropped(true)}>\n      <Label>{dropped ? 'Drop nailed' : 'Toss your stuff here'}</Label>\n    </DropZone>\n  )\n}\n",
    "type": "docs"
  },
  "colors/color-wheel-controlled-demo": {
    "component": "@/components/docs/colors/color-wheel-controlled-demo",
    "raw": "import React from 'react'\n\nimport { parseColor } from '@react-stately/color'\nimport { ColorThumb, ColorWheel, ColorWheelTrack } from 'ui'\n\nexport default function ColorWheelControlledDemo() {\n  const [color, setColor] = React.useState(parseColor('hsl(0, 100%, 50%)'))\n  return (\n    <ColorWheel value={color} onChange={setColor} outerRadius={105} innerRadius={78}>\n      <ColorWheelTrack />\n      <ColorThumb />\n    </ColorWheel>\n  )\n}\n",
    "type": "docs"
  },
  "colors/color-field-disabled-demo": {
    "component": "@/components/docs/colors/color-field-disabled-demo",
    "raw": "import { ColorField } from 'ui'\n\nexport default function ColorFieldDisabledDemo() {\n  return <ColorField isDisabled label=\"Color\" placeholder=\"#FAFAFA\" />\n}\n",
    "type": "docs"
  },
  "colors/color-swatch-demo": {
    "component": "@/components/docs/colors/color-swatch-demo",
    "raw": "import { ColorSwatch } from 'ui'\n\nexport default function ColorSwatchDemo() {\n  return <ColorSwatch aria-label=\"Current color\" color=\"#0d6efd\" />\n}\n",
    "type": "docs"
  },
  "colors/color-wheel-disabled-demo": {
    "component": "@/components/docs/colors/color-wheel-disabled-demo",
    "raw": "import { ColorThumb, ColorWheel, ColorWheelTrack } from 'ui'\n\nexport default function ColorWheelDisabledDemo() {\n  return (\n    <ColorWheel outerRadius={105} innerRadius={78}>\n      <ColorWheelTrack />\n      <ColorThumb />\n    </ColorWheel>\n  )\n}\n",
    "type": "docs"
  },
  "colors/color-field-with-prefix-demo": {
    "component": "@/components/docs/colors/color-field-with-prefix-demo",
    "raw": "import { IconColors } from '@irsyadadl/paranoid'\nimport { ColorField } from 'ui'\n\nexport default function ColorFieldWithPrefixDemo() {\n  return <ColorField label=\"Color\" prefix={<IconColors />} placeholder=\"#FAFAFA\" />\n}\n",
    "type": "docs"
  },
  "colors/color-slider-disabled-demo": {
    "component": "@/components/docs/colors/color-slider-disabled-demo",
    "raw": "import { ColorSlider } from 'ui'\n\nexport default function ColorSliderDisabledDemo() {\n  return <ColorSlider isDisabled channel=\"hue\" defaultValue=\"hsl(0, 100%, 50%)\" />\n}\n",
    "type": "docs"
  },
  "colors/color-area-channel-demo": {
    "component": "@/components/docs/colors/color-area-channel-demo",
    "raw": "import { ColorArea, ColorThumb } from 'ui'\n\nexport default function ColorAreaChannelDemo() {\n  return (\n    <ColorArea xChannel=\"alpha\" yChannel=\"blue\">\n      <ColorThumb />\n    </ColorArea>\n  )\n}\n",
    "type": "docs"
  },
  "colors/color-picker-custom-colors-demo": {
    "component": "@/components/docs/colors/color-picker-custom-colors-demo",
    "raw": "import React from 'react'\n\nimport { ColorPicker, defaultColor } from 'ui'\n\nexport default function ColorPickerCustomColorsDemo() {\n  const [color, setColor] = React.useState(defaultColor)\n  return (\n    <ColorPicker\n      enableColorFormatSelection\n      enableColorSwatch\n      colors={[\n        '#eef8ff',\n        '#d8eeff',\n        '#b9e0ff',\n        '#89cfff',\n        '#52b4ff',\n        '#2a91ff',\n        '#0d6efd',\n        '#0c5ae9',\n        '#1149bc',\n        '#144194',\n        '#11295a'\n      ]}\n      value={color}\n      onChange={setColor}\n    />\n  )\n}\n",
    "type": "docs"
  },
  "colors/color-picker-with-placeholder-demo": {
    "component": "@/components/docs/colors/color-picker-with-placeholder-demo",
    "raw": "import React from 'react'\n\nimport { ColorPicker, defaultColor } from 'ui'\n\nexport default function ColorPickerWithPlaceholderDemo() {\n  const [color, setColor] = React.useState(defaultColor)\n  return <ColorPicker placeholder=\"Select a color\" value={color} onChange={setColor} />\n}\n",
    "type": "docs"
  },
  "colors/color-area-demo": {
    "component": "@/components/docs/colors/color-area-demo",
    "raw": "import { ColorArea, ColorThumb as Thumb } from 'ui'\n\nexport default function ColorAreaDemo() {\n  return (\n    <ColorArea>\n      <Thumb />\n    </ColorArea>\n  )\n}\n",
    "type": "docs"
  },
  "colors/color-picker-controlled-demo": {
    "component": "@/components/docs/colors/color-picker-controlled-demo",
    "raw": "import React from 'react'\n\nimport { type Color } from 'react-aria-components'\nimport { ColorPicker, defaultColor } from 'ui'\n\nexport default function ColorPickerControlledDemo() {\n  const [color, setColor] = React.useState(defaultColor)\n  const colorChangeHandler = (v: Color) => {\n    // ['hex','rgb','rgba','hsb','hsba','hsl','hsla']\n    // console.log(v.toString('hex'))\n    setColor(v)\n  }\n  return (\n    <ColorPicker\n      label=\"Pick Color\"\n      value={color}\n      onChange={(v) => colorChangeHandler(v)}\n    />\n  )\n}\n",
    "type": "docs"
  },
  "colors/color-swatch-picker-item-disabled-demo": {
    "component": "@/components/docs/colors/color-swatch-picker-item-disabled-demo",
    "raw": "import * as React from 'react'\n\nimport { parseColor } from '@react-stately/color'\nimport { ColorSwatchPicker, ColorSwatchPickerItem } from 'ui'\n\nexport default function ColorSwatchPickerDemo() {\n  const [value, setValue] = React.useState(parseColor('#0d6efd'))\n  return (\n    <ColorSwatchPicker\n      value={value}\n      onChange={setValue}\n      className=\"grid grid-cols-3 lg:grid-cols-6 gap-2\"\n    >\n      <ColorSwatchPickerItem isDisabled color=\"#f59e0b\" />\n      <ColorSwatchPickerItem color=\"#84cc16\" />\n      <ColorSwatchPickerItem color=\"#0d6efd\" />\n      <ColorSwatchPickerItem isDisabled color=\"#ec4899\" />\n      <ColorSwatchPickerItem isDisabled color=\"#f43f5e\" />\n    </ColorSwatchPicker>\n  )\n}\n",
    "type": "docs"
  },
  "colors/color-slider-demo": {
    "component": "@/components/docs/colors/color-slider-demo",
    "raw": "import { ColorSlider } from 'ui'\n\nexport default function ColorSliderDemo() {\n  return <ColorSlider channel=\"hue\" defaultValue=\"hsl(0, 100%, 50%)\" />\n}\n",
    "type": "docs"
  },
  "colors/color-field-with-suffix-demo": {
    "component": "@/components/docs/colors/color-field-with-suffix-demo",
    "raw": "import { IconColors } from '@irsyadadl/paranoid'\nimport { ColorField } from 'ui'\n\nexport default function ColorFieldWithSuffixDemo() {\n  return <ColorField label=\"Color\" suffix={<IconColors />} placeholder=\"#FAFAFA\" />\n}\n",
    "type": "docs"
  },
  "colors/color-swatch-controlled-demo": {
    "component": "@/components/docs/colors/color-swatch-controlled-demo",
    "raw": "import * as React from 'react'\n\nimport { parseColor } from '@react-stately/color'\nimport { ColorSwatchPicker, ColorSwatchPickerItem, Description } from 'ui'\n\nexport default function ColorSwatchPickerDemo() {\n  const [value, setValue] = React.useState(parseColor('#0d6efd'))\n  return (\n    <div>\n      <ColorSwatchPicker\n        value={value}\n        onChange={setValue}\n        className=\"grid grid-cols-3 lg:grid-cols-6 gap-2\"\n      >\n        <ColorSwatchPickerItem color=\"#f59e0b\" />\n        <ColorSwatchPickerItem color=\"#84cc16\" />\n        <ColorSwatchPickerItem color=\"#0d6efd\" />\n        <ColorSwatchPickerItem color=\"#ec4899\" />\n        <ColorSwatchPickerItem color=\"#f43f5e\" />\n      </ColorSwatchPicker>\n      <Description className=\"block mt-2\">\n        Current color value:{' '}\n        <strong style={{ color: value.toString('hex') }}>{value.toString('hex')}</strong>\n      </Description>\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "colors/color-picker-with-description-demo": {
    "component": "@/components/docs/colors/color-picker-with-description-demo",
    "raw": "import React from 'react'\n\nimport { ColorPicker, defaultColor } from 'ui'\n\nexport default function ColorPickerWithDescriptionDemo() {\n  const [color, setColor] = React.useState(defaultColor)\n  return (\n    <ColorPicker\n      label=\"Theme Color\"\n      description=\"Snag a color for the app theme\"\n      value={color}\n      onChange={setColor}\n    />\n  )\n}\n",
    "type": "docs"
  },
  "colors/color-field-demo": {
    "component": "@/components/docs/colors/color-field-demo",
    "raw": "import { ColorField } from 'ui'\n\nexport default function ColorFieldDemo() {\n  return <ColorField label=\"Color\" placeholder=\"#FAFAFA\" />\n}\n",
    "type": "docs"
  },
  "colors/color-slider-with-label-demo": {
    "component": "@/components/docs/colors/color-slider-with-label-demo",
    "raw": "import { ColorSlider } from 'ui'\n\nexport default function ColorSliderWithLabelDemo() {\n  return (\n    <ColorSlider\n      label=\"Color Customizer\"\n      channel=\"hue\"\n      defaultValue=\"hsl(0, 100%, 50%)\"\n    />\n  )\n}\n",
    "type": "docs"
  },
  "colors/color-area-space-demo": {
    "component": "@/components/docs/colors/color-area-space-demo",
    "raw": "import { ColorArea, ColorThumb } from 'ui'\n\nexport default function ColorAreaSpaceDemo() {\n  return (\n    <ColorArea colorSpace=\"rgb\">\n      <ColorThumb />\n    </ColorArea>\n  )\n}\n",
    "type": "docs"
  },
  "colors/color-wheel-demo": {
    "component": "@/components/docs/colors/color-wheel-demo",
    "raw": "import { ColorThumb, ColorWheel, ColorWheelTrack } from 'ui'\n\nexport default function ColorWheelDemo() {\n  return (\n    <ColorWheel outerRadius={105} innerRadius={78}>\n      <ColorWheelTrack />\n      <ColorThumb />\n    </ColorWheel>\n  )\n}\n",
    "type": "docs"
  },
  "colors/color-picker-demo": {
    "component": "@/components/docs/colors/color-picker-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { parseColor } from '@react-stately/color'\nimport { ColorPicker } from 'ui'\n\nexport default function ColorPickerDemo() {\n  const [color, setColor] = React.useState(parseColor('hsl(216, 98%, 52%)'))\n  return <ColorPicker label=\"Color Picker\" value={color} onChange={setColor} />\n}\n",
    "type": "docs"
  },
  "colors/color-area-controlled-demo": {
    "component": "@/components/docs/colors/color-area-controlled-demo",
    "raw": "import React from 'react'\n\nimport { parseColor } from '@react-stately/color'\nimport { ColorArea, ColorThumb, Description } from 'ui'\n\nexport default function ColorAreaControlledDemo() {\n  const [value, setValue] = React.useState(parseColor('hsl(0, 100%, 50%)'))\n\n  return (\n    <>\n      <ColorArea value={value} onChange={setValue}>\n        <ColorThumb />\n      </ColorArea>\n      <Description className=\"block mt-2\">\n        Current color value:{' '}\n        <strong style={{ color: value.toString('hex') }}>{value.toString('hex')}</strong>\n      </Description>\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "colors/color-picker-enable-swatch-demo": {
    "component": "@/components/docs/colors/color-picker-enable-swatch-demo",
    "raw": "import React from 'react'\n\nimport { type Color } from 'react-aria-components'\nimport { ColorPicker, defaultColor } from 'ui'\n\nexport default function ColorPickerEnableSwatchDemo() {\n  const [color, setColor] = React.useState(defaultColor)\n  const colorChangeHandler = (v: Color) => {\n    // ['hex','rgb','rgba','hsb','hsba','hsl','hsla']\n    console.log(v.toString('hex'))\n    setColor(v)\n  }\n  return (\n    <ColorPicker\n      enableColorSwatch\n      value={color}\n      onChange={(v) => colorChangeHandler(v)}\n    />\n  )\n}\n",
    "type": "docs"
  },
  "colors/color-picker-disabled-demo": {
    "component": "@/components/docs/colors/color-picker-disabled-demo",
    "raw": "import React from 'react'\n\nimport { parseColor } from '@react-stately/color'\nimport { ColorPicker } from 'ui'\n\nexport default function ColorPickerDemo() {\n  const [color, setColor] = React.useState(parseColor('hsl(216, 98%, 52%)'))\n  return <ColorPicker isDisabled label=\"Color Picker\" value={color} onChange={setColor} />\n}\n",
    "type": "docs"
  },
  "colors/color-picker-with-label-demo": {
    "component": "@/components/docs/colors/color-picker-with-label-demo",
    "raw": "import React from 'react'\n\nimport { ColorPicker, defaultColor } from 'ui'\n\nexport default function ColorPickerWithLabelDemo() {\n  const [color, setColor] = React.useState(defaultColor)\n  return <ColorPicker label=\"Theme Color\" value={color} onChange={setColor} />\n}\n",
    "type": "docs"
  },
  "colors/color-picker-enable-selection-format-demo": {
    "component": "@/components/docs/colors/color-picker-enable-selection-format-demo",
    "raw": "import React from 'react'\n\nimport { ColorPicker, defaultColor } from 'ui'\n\nexport default function ColorPickerEnableSelectionFormatDemo() {\n  const [color, setColor] = React.useState(defaultColor)\n  return <ColorPicker enableColorFormatSelection value={color} onChange={setColor} />\n}\n",
    "type": "docs"
  },
  "colors/color-picker-combination-demo": {
    "component": "@/components/docs/colors/color-picker-combination-demo",
    "raw": "import React from 'react'\n\nimport { ColorPicker, defaultColor } from 'ui'\n\nexport default function ColorPickerEnableSelectionFormatDemo() {\n  const [color, setColor] = React.useState(defaultColor)\n  return (\n    <ColorPicker\n      enableColorFormatSelection\n      enableColorSwatch\n      value={color}\n      onChange={setColor}\n    />\n  )\n}\n",
    "type": "docs"
  },
  "colors/color-area-disabled-demo": {
    "component": "@/components/docs/colors/color-area-disabled-demo",
    "raw": "import { ColorArea, ColorThumb as Thumb } from 'ui'\n\nexport default function ColorAreaDisabledDemo() {\n  return (\n    <ColorArea isDisabled>\n      <Thumb />\n    </ColorArea>\n  )\n}\n",
    "type": "docs"
  },
  "colors/color-swatch-picker-demo": {
    "component": "@/components/docs/colors/color-swatch-picker-demo",
    "raw": "import * as React from 'react'\n\nimport { parseColor } from '@react-stately/color'\nimport { ColorSwatchPicker, ColorSwatchPickerItem } from 'ui'\n\nexport default function ColorSwatchPickerDemo() {\n  const [value, setValue] = React.useState(parseColor('#0d6efd'))\n  return (\n    <ColorSwatchPicker\n      value={value}\n      onChange={setValue}\n      className=\"grid grid-cols-3 lg:grid-cols-6 gap-2\"\n    >\n      <ColorSwatchPickerItem color=\"#f59e0b\" />\n      <ColorSwatchPickerItem color=\"#84cc16\" />\n      <ColorSwatchPickerItem color=\"#0d6efd\" />\n      <ColorSwatchPickerItem color=\"#ec4899\" />\n      <ColorSwatchPickerItem color=\"#f43f5e\" />\n    </ColorSwatchPicker>\n  )\n}\n",
    "type": "docs"
  },
  "colors/color-slider-without-output-demo": {
    "component": "@/components/docs/colors/color-slider-without-output-demo",
    "raw": "import { ColorSlider } from 'ui'\n\nexport default function ColorSliderWithoutOutputDemo() {\n  return <ColorSlider channel=\"hue\" showOutput={false} defaultValue=\"hsl(0, 100%, 50%)\" />\n}\n",
    "type": "docs"
  },
  "colors/color-field-controlled-demo": {
    "component": "@/components/docs/colors/color-field-controlled-demo",
    "raw": "import React from 'react'\n\nimport { type Color, parseColor } from '@react-stately/color'\nimport { ColorField } from 'ui'\n\nexport default function ColorFieldControlledDemo() {\n  const [color, setColor] = React.useState(parseColor('#FAFAFA'))\n  const handleColorChange = (newColor: Color | null) => {\n    if (newColor) {\n      setColor(newColor)\n    }\n  }\n  return (\n    <ColorField\n      value={color}\n      onChange={handleColorChange}\n      label=\"Color\"\n      placeholder=\"#FAFAFA\"\n      description={`Current color value: ${color.toString('hex')}`}\n    />\n  )\n}\n",
    "type": "docs"
  },
  "pickers/select-disabled-demo": {
    "component": "@/components/docs/pickers/select-disabled-demo",
    "raw": "'use client'\n\nimport { Select, SelectItem } from 'ui'\n\nconst software = [\n  { id: 1, name: 'Adobe Photoshop' }\n  //...\n]\n\nexport default function SelectDisabledDemo() {\n  return (\n    <Select\n      label=\"Design software\"\n      isDisabled\n      placeholder=\"Select a software\"\n      items={software}\n    >\n      {(item) => (\n        <SelectItem id={item.id} textValue={item.name}>\n          {item.name}\n        </SelectItem>\n      )}\n    </Select>\n  )\n}\n",
    "type": "docs"
  },
  "pickers/combo-box-demo": {
    "component": "@/components/docs/pickers/combo-box-demo",
    "raw": "'use client'\n\nimport { ComboBox, ComboBoxItem } from 'ui'\n\nconst users = [\n  { id: 1, name: 'Barbara Kirlin Sr.', image_url: 'https://i.pravatar.cc/150?img=1' },\n  { id: 2, name: 'Rosemarie Koch', image_url: 'https://i.pravatar.cc/150?img=2' },\n  { id: 3, name: 'Mrs. Reva Heaney Jr.', image_url: 'https://i.pravatar.cc/150?img=3' },\n  { id: 4, name: 'Ms. Ettie Abshire DVM', image_url: 'https://i.pravatar.cc/150?img=4' },\n  { id: 5, name: 'Bria Ziemann', image_url: 'https://i.pravatar.cc/150?img=5' },\n  { id: 6, name: 'Heloise Borer Sr.', image_url: 'https://i.pravatar.cc/150?img=6' },\n  {\n    id: 7,\n    name: 'Miss Jacinthe Gerlach DVM',\n    image_url: 'https://i.pravatar.cc/150?img=7'\n  },\n  {\n    id: 8,\n    name: 'Miss Stephania Schaefer Sr.',\n    image_url: 'https://i.pravatar.cc/150?img=8'\n  },\n  { id: 9, name: 'Kevon Hackett MD', image_url: 'https://i.pravatar.cc/150?img=9' },\n  { id: 10, name: 'Tom Ledner', image_url: 'https://i.pravatar.cc/150?img=10' }\n]\n\nexport default function ComboBoxDemo() {\n  return (\n    <ComboBox placeholder=\"Select a user\" label=\"Users\" isRequired items={users}>\n      {(item) => (\n        <ComboBoxItem key={item.id} id={item.id} textValue={item.name}>\n          {item.name}\n        </ComboBoxItem>\n      )}\n    </ComboBox>\n  )\n}\n",
    "type": "docs"
  },
  "pickers/select-demo": {
    "component": "@/components/docs/pickers/select-demo",
    "raw": "'use client'\n\nimport { Select, SelectItem } from 'ui'\n\nexport const software = [\n  { id: 1, name: 'Adobe Photoshop' },\n  { id: 2, name: 'Sketch' },\n  { id: 3, name: 'Figma' },\n  { id: 4, name: 'Adobe XD' },\n  { id: 5, name: 'InVision' }\n]\nexport default function SelectDemo() {\n  return (\n    <Select label=\"Design software\" placeholder=\"Select a software\" items={software}>\n      {(item) => (\n        <SelectItem id={item.id} textValue={item.name}>\n          {item.name}\n        </SelectItem>\n      )}\n    </Select>\n  )\n}\n",
    "type": "docs"
  },
  "pickers/combo-box-avatar-demo": {
    "component": "@/components/docs/pickers/combo-box-avatar-demo",
    "raw": "'use client'\n\nimport { Avatar, ComboBox, ComboBoxItem } from 'ui'\n\nconst users = [\n  { id: 1, name: 'Barbara Kirlin Sr.', image_url: 'https://i.pravatar.cc/150?img=1' },\n  { id: 2, name: 'Rosemarie Koch', image_url: 'https://i.pravatar.cc/150?img=2' },\n  { id: 3, name: 'Mrs. Reva Heaney Jr.', image_url: 'https://i.pravatar.cc/150?img=3' },\n  { id: 4, name: 'Ms. Ettie Abshire DVM', image_url: 'https://i.pravatar.cc/150?img=4' },\n  { id: 5, name: 'Bria Ziemann', image_url: 'https://i.pravatar.cc/150?img=5' },\n  { id: 6, name: 'Heloise Borer Sr.', image_url: 'https://i.pravatar.cc/150?img=6' },\n  {\n    id: 7,\n    name: 'Miss Jacinthe Gerlach DVM',\n    image_url: 'https://i.pravatar.cc/150?img=7'\n  },\n  {\n    id: 8,\n    name: 'Miss Stephania Schaefer Sr.',\n    image_url: 'https://i.pravatar.cc/150?img=8'\n  },\n  { id: 9, name: 'Kevon Hackett MD', image_url: 'https://i.pravatar.cc/150?img=9' },\n  { id: 10, name: 'Tom Ledner', image_url: 'https://i.pravatar.cc/150?img=10' }\n]\n\nexport default function ComboBoxAvatarDemo() {\n  return (\n    <ComboBox placeholder=\"Select a user\" label=\"Users\" isRequired items={users}>\n      {(item) => (\n        <ComboBoxItem key={item.id} id={item.id} textValue={item.name}>\n          <Avatar src={item.image_url} />\n          {item.name}\n        </ComboBoxItem>\n      )}\n    </ComboBox>\n  )\n}\n",
    "type": "docs"
  },
  "pickers/select-invalid-demo": {
    "component": "@/components/docs/pickers/select-invalid-demo",
    "raw": "'use client'\n\nimport { Select, SelectItem } from 'ui'\n\nconst software = [\n  { id: 1, name: 'Adobe Photoshop' }\n  //...\n]\n\nexport default function SelectInvalidDemo() {\n  return (\n    <Select\n      label=\"Design software\"\n      isInvalid\n      placeholder=\"Select a software\"\n      items={software}\n    >\n      {(item) => (\n        <SelectItem id={item.id} textValue={item.name}>\n          {item.name}\n        </SelectItem>\n      )}\n    </Select>\n  )\n}\n",
    "type": "docs"
  },
  "pickers/combo-box-invalid-demo": {
    "component": "@/components/docs/pickers/combo-box-invalid-demo",
    "raw": "'use client'\n\nimport { Avatar, ComboBox, ComboBoxItem } from 'ui'\n\nconst users = [\n  { id: 1, name: 'Barbara Kirlin Sr.', image_url: 'https://i.pravatar.cc/150?img=1' }\n  //...\n]\nexport default function ComboBoxInvalidDemo() {\n  return (\n    <ComboBox placeholder=\"Select a user\" label=\"Users\" isRequired items={users}>\n      {(item) => (\n        <ComboBoxItem key={item.id} id={item.id} textValue={item.name}>\n          <Avatar src={item.image_url} />\n          {item.name}\n        </ComboBoxItem>\n      )}\n    </ComboBox>\n  )\n}\n",
    "type": "docs"
  },
  "pickers/combo-box-disabled-demo": {
    "component": "@/components/docs/pickers/combo-box-disabled-demo",
    "raw": "'use client'\n\nimport { Avatar, ComboBox, ComboBoxItem } from 'ui'\n\nconst users = [\n  { id: 1, name: 'Barbara Kirlin Sr.', image_url: 'https://i.pravatar.cc/150?img=1' }\n  //...\n]\nexport default function ComboBoxDisabledDemo() {\n  return (\n    <ComboBox placeholder=\"Select a user\" label=\"Users\" isRequired items={users}>\n      {(item) => (\n        <ComboBoxItem key={item.id} id={item.id} textValue={item.name}>\n          <Avatar src={item.image_url} />\n          {item.name}\n        </ComboBoxItem>\n      )}\n    </ComboBox>\n  )\n}\n",
    "type": "docs"
  },
  "surfaces/grid-gap-demo": {
    "component": "@/components/docs/surfaces/grid-gap-demo",
    "raw": "import { Grid, GridItem } from 'ui'\n\nexport default function GridGapDemo() {\n  return (\n    <Grid\n      columns={{\n        initial: 4,\n        sm: 5,\n        md: 6\n      }}\n      gap={{\n        initial: 2,\n        sm: 4\n      }}\n    >\n      <GridItem>\n        <div className=\"p-4 border h-24\" />\n      </GridItem>\n      <GridItem>\n        <div className=\"p-4 border h-24\" />\n      </GridItem>\n      <GridItem>\n        <div className=\"p-4 border h-24\" />\n      </GridItem>\n      <GridItem>\n        <div className=\"p-4 border h-24\" />\n      </GridItem>\n      <GridItem>\n        <div className=\"p-4 border h-24\" />\n      </GridItem>\n      <GridItem>\n        <div className=\"p-4 border h-24\" />\n      </GridItem>\n    </Grid>\n  )\n}\n",
    "type": "docs"
  },
  "surfaces/grid-collections-demo": {
    "component": "@/components/docs/surfaces/grid-collections-demo",
    "raw": "import { Card, CardDescription, CardHeader, CardTitle, Grid, GridItem } from 'ui'\n\nexport default function GridCollectionsDemo() {\n  return (\n    <Grid\n      aria-label=\"List articles\"\n      columns={{ initial: 1, sm: 2, '2xl': 3 }}\n      gap={2}\n      items={articles}\n    >\n      {(item) => (\n        <GridItem>\n          <Card>\n            <CardHeader>\n              <CardTitle>{item.title}</CardTitle>\n              <CardDescription>{item.description}</CardDescription>\n            </CardHeader>\n          </Card>\n        </GridItem>\n      )}\n    </Grid>\n  )\n}\n\nconst articles = [\n  {\n    id: 1,\n    title: 'Understanding React Hooks',\n    description:\n      \"Get the lowdown on React Hooks, how to use 'em, and best practices for those sleek functional components.\"\n  },\n  {\n    id: 2,\n    title: 'Mastering TypeScript',\n    description:\n      'Dive deep into TypeScript, from basic stuff to pro features, for building rock-solid apps.'\n  },\n  {\n    id: 3,\n    title: 'Laravel Eloquent Tips',\n    description:\n      'Check out advanced tricks for using Laravel Eloquent ORM to make your database game strong.'\n  },\n  {\n    id: 4,\n    title: 'Building with Next.js',\n    description:\n      'A full-on tutorial on creating server-rendered React apps with the Next.js framework.'\n  },\n  {\n    id: 5,\n    title: 'Inertia.js for Full-Stack Devs',\n    description:\n      'Learn how Inertia.js smooths out the gap between client-side frameworks and server-side apps.'\n  },\n  {\n    id: 6,\n    title: 'Optimizing Web Performance',\n    description: 'Tips and tricks to boost the performance and speed of your web apps.'\n  }\n]\n",
    "type": "docs"
  },
  "surfaces/card-login-form-demo": {
    "component": "@/components/docs/surfaces/card-login-form-demo",
    "raw": "'use client'\n\nimport {\n  Button,\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n  Checkbox,\n  Form,\n  Link,\n  TextField\n} from 'ui'\n\nexport default function CardLoginFormDemo() {\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Login</CardTitle>\n        <CardDescription>Don't loose the level, just keep on going.</CardDescription>\n      </CardHeader>\n      <Form action={() => {}}>\n        <CardContent className=\"space-y-6\">\n          <TextField isRequired label=\"Email\" placeholder=\"Enter your email\" />\n          <TextField\n            isRequired\n            label=\"Password\"\n            type=\"password\"\n            placeholder=\"Enter your password\"\n          />\n          <div className=\"flex justify-between items-center\">\n            <Checkbox>Remember me</Checkbox>\n            <Link intent=\"primary\" href=\"#\">\n              Forgot password?\n            </Link>\n          </div>\n        </CardContent>\n        <CardFooter>\n          <Button type=\"submit\">Login</Button>\n        </CardFooter>\n      </Form>\n    </Card>\n  )\n}\n",
    "type": "docs"
  },
  "surfaces/grid-basic-demo": {
    "component": "@/components/docs/surfaces/grid-basic-demo",
    "raw": "import { Grid, GridItem } from 'ui'\n\nexport default function GridBasicDemo() {\n  return (\n    <div>\n      <Grid columns={6}>\n        <GridItem>\n          <div className=\"p-4 border-l border-y h-32\" />\n        </GridItem>\n        <GridItem>\n          <div className=\"p-4 border-l border-y h-32\" />\n        </GridItem>\n        <GridItem>\n          <div className=\"p-4 border-l border-y h-32\" />\n        </GridItem>\n        <GridItem>\n          <div className=\"p-4 border-l border-y h-32\" />\n        </GridItem>\n        <GridItem>\n          <div className=\"p-4 border-l border-y h-32\" />\n        </GridItem>\n        <GridItem>\n          <div className=\"p-4 border-l border-y h-32 border-r\" />\n        </GridItem>\n      </Grid>\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "surfaces/card-table-demo": {
    "component": "@/components/docs/surfaces/card-table-demo",
    "raw": "'use client'\n\nimport { IconDotsVertical, IconEye, IconHighlight, IconTrash } from '@irsyadadl/paranoid'\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n  Menu,\n  MenuContent,\n  MenuItem,\n  MenuSeparator,\n  MenuTrigger,\n  Pagination,\n  PaginationEllipsis,\n  PaginationFirst,\n  PaginationItem,\n  PaginationLast,\n  PaginationLink,\n  PaginationList,\n  PaginationNext,\n  PaginationPrevious,\n  Table,\n  TableBody,\n  TableCell,\n  TableColumn,\n  TableHeader,\n  TableRow\n} from 'ui'\n\nconst users = [\n  {\n    id: 1,\n    name: 'John Doe',\n    gender: 'Male',\n    age: 30,\n    occupation: 'Software Engineer'\n  },\n  {\n    id: 2,\n    name: 'Jane Smith',\n    gender: 'Female',\n    age: 25,\n    occupation: 'Marketing Manager'\n  },\n  {\n    id: 3,\n    name: 'Bob Johnson',\n    gender: 'Male',\n    age: 40,\n    occupation: 'Doctor'\n  },\n  {\n    id: 4,\n    name: 'Emily Chen',\n    gender: 'Female',\n    age: 28,\n    occupation: 'Teacher'\n  },\n  {\n    id: 5,\n    name: 'Michael Brown',\n    gender: 'Male',\n    age: 35,\n    occupation: 'Lawyer'\n  },\n  {\n    id: 6,\n    name: 'Sarah Lee',\n    gender: 'Female',\n    age: 32,\n    occupation: 'Designer'\n  },\n  {\n    id: 7,\n    name: 'Kevin White',\n    gender: 'Male',\n    age: 45,\n    occupation: 'CEO'\n  },\n  {\n    id: 8,\n    name: 'Lisa Nguyen',\n    gender: 'Female',\n    age: 29,\n    occupation: 'Engineer'\n  },\n  {\n    id: 9,\n    name: 'David Kim',\n    gender: 'Male',\n    age: 38,\n    occupation: 'Consultant'\n  },\n  {\n    id: 10,\n    name: 'Hannah Patel',\n    gender: 'Female',\n    age: 26,\n    occupation: 'Writer'\n  }\n]\n\nexport default function CardTableDemo() {\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Users</CardTitle>\n        <CardDescription>Manage users, groups, and roles.</CardDescription>\n      </CardHeader>\n      <CardContent>\n        <Table aria-label=\"Bands\">\n          <TableHeader>\n            <TableColumn>#</TableColumn>\n            <TableColumn>Name</TableColumn>\n            <TableColumn>Genre</TableColumn>\n            <TableColumn>Age</TableColumn>\n            <TableColumn>Occupation</TableColumn>\n            <TableColumn />\n          </TableHeader>\n          <TableBody items={users}>\n            {(item) => (\n              <TableRow key={item.id}>\n                <TableCell>{item.id}</TableCell>\n                <TableCell>{item.name}</TableCell>\n                <TableCell>{item.gender}</TableCell>\n                <TableCell>{item.age}</TableCell>\n                <TableCell>{item.occupation}</TableCell>\n                <TableCell className=\"flex justify-end\">\n                  <Menu>\n                    <MenuTrigger>\n                      <IconDotsVertical />\n                    </MenuTrigger>\n                    <MenuContent showArrow placement=\"left\">\n                      <MenuItem>\n                        <IconEye /> View\n                      </MenuItem>\n                      <MenuItem>\n                        <IconHighlight /> Edit\n                      </MenuItem>\n                      <MenuSeparator />\n                      <MenuItem isDanger>\n                        <IconTrash /> Delete\n                      </MenuItem>\n                    </MenuContent>\n                  </Menu>\n                </TableCell>\n              </TableRow>\n            )}\n          </TableBody>\n        </Table>\n      </CardContent>\n      <CardFooter>\n        <Pagination>\n          <PaginationList>\n            <PaginationItem>\n              <PaginationFirst href=\"#\" />\n            </PaginationItem>\n            <PaginationItem>\n              <PaginationPrevious href=\"#\" />\n            </PaginationItem>\n            <PaginationItem>\n              <PaginationLink href=\"#\">1</PaginationLink>\n            </PaginationItem>\n            <PaginationItem>\n              <PaginationLink href=\"#\" isActive>\n                2\n              </PaginationLink>\n            </PaginationItem>\n            <PaginationItem>\n              <PaginationEllipsis />\n            </PaginationItem>\n            <PaginationItem>\n              <PaginationNext href=\"#\" />\n            </PaginationItem>\n            <PaginationItem>\n              <PaginationLast href=\"#\" />\n            </PaginationItem>\n          </PaginationList>\n        </Pagination>\n      </CardFooter>\n    </Card>\n  )\n}\n",
    "type": "docs"
  },
  "surfaces/grid-responsive-demo": {
    "component": "@/components/docs/surfaces/grid-responsive-demo",
    "raw": "import { Grid, GridItem } from 'ui'\n\nexport default function GridResponsiveDemo() {\n  return (\n    <Grid\n      columns={{\n        initial: 3,\n        sm: 4,\n        md: 5,\n        xl: 6\n      }}\n      gap={{\n        initial: 2,\n        sm: 3,\n        lg: 4\n      }}\n    >\n      <GridItem>\n        <div className=\"p-4 border h-32\" />\n      </GridItem>\n      <GridItem>\n        <div className=\"p-4 border h-32\" />\n      </GridItem>\n      <GridItem>\n        <div className=\"p-4 border h-32\" />\n      </GridItem>\n      <GridItem>\n        <div className=\"p-4 border h-32\" />\n      </GridItem>\n      <GridItem>\n        <div className=\"p-4 border h-32\" />\n      </GridItem>\n      <GridItem>\n        <div className=\"p-4 border h-32\" />\n      </GridItem>\n    </Grid>\n  )\n}\n",
    "type": "docs"
  },
  "surfaces/grid-item-demo": {
    "component": "@/components/docs/surfaces/grid-item-demo",
    "raw": "import { Grid, GridItem } from 'ui'\n\nexport default function GridItemDemo() {\n  return (\n    <Grid debug columns={3} gap={4}>\n      <GridItem\n        colSpan={{\n          initial: 1,\n          sm: 2\n        }}\n        className=\"w-full h-24 grid place-content-center\"\n      >\n        1\n      </GridItem>\n      <GridItem className=\"w-full h-24 grid place-content-center\">2</GridItem>\n      <GridItem\n        colSpan={{\n          initial: 1,\n          sm: 3\n        }}\n        className=\"w-full h-24 grid place-content-center\"\n      >\n        3\n      </GridItem>\n    </Grid>\n  )\n}\n",
    "type": "docs"
  },
  "surfaces/grid-debug-demo": {
    "component": "@/components/docs/surfaces/grid-debug-demo",
    "raw": "import { Grid, GridItem } from 'ui'\n\nexport default function GridDebugDemo() {\n  return (\n    <Grid debug columns={3} gap={4}>\n      <GridItem className=\"w-full h-24\" />\n      <GridItem className=\"w-full h-24\" />\n      <GridItem className=\"w-full h-24\" />\n      <GridItem className=\"w-full h-24\" />\n      <GridItem className=\"w-full h-24\" />\n      <GridItem className=\"w-full h-24\" />\n      <GridItem className=\"w-full h-24\" />\n      <GridItem className=\"w-full h-24\" />\n      <GridItem className=\"w-full h-24\" />\n    </Grid>\n  )\n}\n",
    "type": "docs"
  },
  "surfaces/card-demo": {
    "component": "@/components/docs/surfaces/card-demo",
    "raw": "'use client'\n\nimport {\n  Button,\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle\n} from 'ui'\n\nexport default function CardDemo() {\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Monthly Report</CardTitle>\n        <CardDescription>Financial summary for June</CardDescription>\n      </CardHeader>\n      <CardContent>\n        The monthly financial report shows a 15% increase in revenue compared to last\n        month.\n      </CardContent>\n      <CardFooter>\n        <Button>View Details</Button>\n      </CardFooter>\n    </Card>\n  )\n}\n",
    "type": "docs"
  },
  "surfaces/grid-gap-x-y-demo": {
    "component": "@/components/docs/surfaces/grid-gap-x-y-demo",
    "raw": "import { Grid, GridItem } from 'ui'\n\nexport default function GridGapXYDemo() {\n  return (\n    <Grid\n      columns={{\n        initial: 3,\n        sm: 4,\n        md: 6\n      }}\n      gapX={{\n        initial: 2,\n        sm: 4\n      }}\n      gapY={{\n        initial: 4,\n        sm: 6\n      }}\n    >\n      <GridItem>\n        <div className=\"p-4 border h-24\" />\n      </GridItem>\n      <GridItem>\n        <div className=\"p-4 border h-24\" />\n      </GridItem>\n      <GridItem>\n        <div className=\"p-4 border h-24\" />\n      </GridItem>\n      <GridItem>\n        <div className=\"p-4 border h-24\" />\n      </GridItem>\n      <GridItem>\n        <div className=\"p-4 border h-24\" />\n      </GridItem>\n      <GridItem>\n        <div className=\"p-4 border h-24\" />\n      </GridItem>\n    </Grid>\n  )\n}\n",
    "type": "docs"
  },
  "statuses/table-of-badges": {
    "component": "@/components/docs/statuses/table-of-badges",
    "raw": "'use client'\n\nimport {\n  Badge,\n  badgeIntents,\n  Table,\n  TableBody,\n  TableCell,\n  TableColumn,\n  TableHeader,\n  TableRow\n} from 'ui'\n\nexport default function TableOfBadges() {\n  const colors = Object.keys(badgeIntents).map((i) => {\n    return {\n      color: i\n    }\n  })\n  return (\n    <div className=\"not-prose rounded-xl border\">\n      <Table aria-label=\"Available Badge Colors\">\n        <TableHeader>\n          <TableColumn id=\"props\">Props</TableColumn>\n          <TableColumn id=\"name\">Name</TableColumn>\n          <TableColumn />\n        </TableHeader>\n        <TableBody items={colors}>\n          {(item) => (\n            <TableRow id={item.color}>\n              <TableCell>\n                <code>color</code>\n              </TableCell>\n              <TableCell>\n                <code>{item.color}</code>\n              </TableCell>\n              <TableCell>\n                <Badge intent={item.color as any}>Label</Badge>\n              </TableCell>\n            </TableRow>\n          )}\n        </TableBody>\n      </Table>\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "statuses/badge-demo": {
    "component": "@/components/docs/statuses/badge-demo",
    "raw": "'use client'\n\nimport { Badge } from 'ui'\n\nexport default function BadgeDemo() {\n  return <Badge>Label</Badge>\n}\n",
    "type": "docs"
  },
  "statuses/toaster-demo": {
    "component": "@/components/docs/statuses/toaster-demo",
    "raw": "import { toast } from 'sonner'\nimport { Button } from 'ui'\n\nexport default function ToasterDemo() {\n  return (\n    <Button\n      onPress={() => toast('The registration is successful, click here to continue.')}\n    >\n      Show Toast\n    </Button>\n  )\n}\n",
    "type": "docs"
  },
  "statuses/progress-bar-demo": {
    "component": "@/components/docs/statuses/progress-bar-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { ProgressBar } from 'ui'\n\nexport default function ProgressBarDemo() {\n  const [value, setValue] = React.useState(1)\n\n  React.useEffect(() => {\n    const interval = setInterval(() => {\n      setValue((prev) => (prev < 100 ? prev + 1 : 100))\n    }, 50)\n\n    return () => clearInterval(interval)\n  }, [])\n\n  return <ProgressBar label=\"Loading…\" value={60} />\n}\n",
    "type": "docs"
  },
  "statuses/toaster-action-demo": {
    "component": "@/components/docs/statuses/toaster-action-demo",
    "raw": "import { toast } from 'sonner'\nimport { Button } from 'ui'\n\nexport default function ToasterActionDemo() {\n  return (\n    <div className=\"flex gap-3\">\n      <Button\n        appearance=\"outline\"\n        size=\"small\"\n        onPress={() =>\n          toast('New comment on your post!', {\n            action: {\n              label: 'View',\n              onClick: () => alert('Viewed')\n            }\n          })\n        }\n      >\n        Action\n      </Button>\n      <Button\n        appearance=\"outline\"\n        size=\"small\"\n        onPress={() =>\n          toast('New comment on your post!', {\n            action: {\n              label: 'View',\n              onClick: () => alert('Viewed')\n            },\n            cancel: {\n              label: 'Cancel',\n              onClick: () => alert('Cancelled')\n            }\n          })\n        }\n      >\n        Do or Not\n      </Button>\n      <Button\n        appearance=\"outline\"\n        size=\"small\"\n        onPress={() =>\n          toast('New comment on your post!', {\n            cancel: {\n              label: 'Cancel',\n              onClick: () => alert('Cancelled')\n            }\n          })\n        }\n      >\n        Cancel\n      </Button>\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "statuses/toaster-status-demo": {
    "component": "@/components/docs/statuses/toaster-status-demo",
    "raw": "import { toast } from 'sonner'\nimport { Button } from 'ui'\n\nexport default function ToasterStatusDemo() {\n  return (\n    <div className=\"grid grid-cols-2 gap-3\">\n      <Button\n        appearance=\"outline\"\n        size=\"small\"\n        onPress={() => toast.error('The registration failed')}\n      >\n        Error\n      </Button>\n      <Button\n        appearance=\"outline\"\n        size=\"small\"\n        onPress={() => toast.success('The registration was successful.')}\n      >\n        Success\n      </Button>\n      <Button\n        appearance=\"outline\"\n        size=\"small\"\n        onPress={() => toast.warning('There was an issue during registration')}\n      >\n        Warning\n      </Button>\n      <Button\n        appearance=\"outline\"\n        size=\"small\"\n        onPress={() => toast.info('Here is some information about your registration.')}\n      >\n        Info\n      </Button>\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "statuses/indeterminate-progress-bar-demo": {
    "component": "@/components/docs/statuses/indeterminate-progress-bar-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { ProgressBar } from 'ui'\n\nexport default function ProgressBarDemo() {\n  const [value, setValue] = React.useState(1)\n\n  React.useEffect(() => {\n    const interval = setInterval(() => {\n      setValue((prev) => (prev < 100 ? prev + 1 : 100))\n    }, 50)\n\n    return () => clearInterval(interval)\n  }, [])\n\n  return <ProgressBar label=\"Loading…\" isIndeterminate value={60} />\n}\n",
    "type": "docs"
  },
  "statuses/toaster-positions-demo": {
    "component": "@/components/docs/statuses/toaster-positions-demo",
    "raw": "import { toast, type ToastT } from 'sonner'\nimport { Button } from 'ui'\n\nconst positions: ToastT['position'][] = [\n  'top-left',\n  'top-right',\n  'bottom-left',\n  'bottom-right',\n  'top-center',\n  'bottom-center'\n]\n\nexport default function ToasterPositionsDemo() {\n  return (\n    <div className=\"grid grid-cols-2 sm:grid-cols-3 gap-4\">\n      {positions.map((position) => (\n        <Button\n          appearance=\"outline\"\n          size=\"small\"\n          key={position}\n          onPress={() =>\n            toast('The registration is successful, click here to continue.', { position })\n          }\n        >\n          {position}\n        </Button>\n      ))}\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "statuses/badge-shape-demo": {
    "component": "@/components/docs/statuses/badge-shape-demo",
    "raw": "'use client'\n\nimport { Badge } from 'ui'\n\nexport default function BadgeShapeDemo() {\n  return <Badge shape=\"circle\">Label</Badge>\n}\n",
    "type": "docs"
  },
  "statuses/note-demo": {
    "component": "@/components/docs/statuses/note-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { OptionPreview } from '@/components/docs/outside/option-preview'\nimport { Note, Select, SelectItem } from 'ui'\n\nconst notes = ['info', 'primary', 'secondary', 'warning', 'danger', 'success'].map(\n  (n) => ({\n    name: n\n  })\n)\nexport default function NoteDemo() {\n  const [selected, setSelected] = React.useState<any>('primary')\n  return (\n    <>\n      <OptionPreview>\n        <Select\n          className=\"[&_button]:h-9\"\n          selectedKey={selected}\n          onSelectionChange={setSelected}\n          placeholder=\"Choose an intent\"\n          items={notes}\n        >\n          {(item) => (\n            <SelectItem id={item.name} textValue={item.name}>\n              {item.name}\n            </SelectItem>\n          )}\n        </Select>\n      </OptionPreview>\n      <div className=\"max-w-md\">\n        <Note intent={selected as any}>\n          We hook you up with top-tier migration services in our startup plan. Wanna roll\n          with it? Hit us up here.\n        </Note>\n      </div>\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "statuses/meter-demo": {
    "component": "@/components/docs/statuses/meter-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Meter } from 'ui'\n\nexport default function MeterDemo() {\n  const [value, setValue] = React.useState(1)\n\n  React.useEffect(() => {\n    const interval = setInterval(() => {\n      setValue((prev) => (prev < 100 ? prev + 1 : 100))\n    }, 50)\n\n    return () => clearInterval(interval)\n  }, [])\n  return <Meter label=\"Storage space\" value={value} />\n}\n",
    "type": "docs"
  },
  "collections/tag-group-disabled-demo": {
    "component": "@/components/docs/collections/tag-group-disabled-demo",
    "raw": "import { androidBrands } from '@/components/docs/collections/tag-group-demo'\nimport { Tag, TagGroup } from 'ui'\n\nexport default function TagGroupDisabledDemo() {\n  return (\n    <div className=\"space-y-6\">\n      <TagGroup\n        disabledKeys={androidBrands\n          .filter((brand) => !brand.available)\n          .map((brand) => brand.id)}\n        label=\"Disabled Key\"\n        selectionMode=\"multiple\"\n        items={androidBrands}\n      >\n        {(item) => <Tag>{item.name}</Tag>}\n      </TagGroup>\n\n      <TagGroup label=\"Disabled by Tag\" selectionMode=\"multiple\" items={androidBrands}>\n        {(item) => <Tag isDisabled={!item.available}>{item.name}</Tag>}\n      </TagGroup>\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "collections/single-menu-demo": {
    "component": "@/components/docs/collections/single-menu-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport type { Placement } from '@react-types/overlays'\nimport type { Selection } from '@react-types/shared'\nimport { Button, Menu, MenuContent, MenuRadioItem } from 'ui'\n\nexport const placements = [\n  'bottom',\n  'bottom left',\n  'bottom right',\n  'bottom start',\n  'bottom end',\n  'top',\n  'top left',\n  'top right',\n  'top start',\n  'top end',\n  'left',\n  'left top',\n  'left bottom',\n  'start',\n  'start top',\n  'start bottom',\n  'right',\n  'right top',\n  'right bottom',\n  'end',\n  'end top',\n  'end bottom'\n].map((item, i) => ({ id: i, name: item }))\n\nexport default function SingleMenuDemo() {\n  const [selected, setSelected] = React.useState<Selection>(new Set(['bottom']))\n  return (\n    <Menu>\n      <Button appearance=\"outline\">Placement</Button>\n      <MenuContent\n        placement={Array.from(selected)[0] as Placement}\n        selectionMode=\"single\"\n        selectedKeys={selected}\n        onSelectionChange={setSelected}\n        items={placements}\n        className=\"max-h-72 min-w-52\"\n      >\n        {(item) => <MenuRadioItem id={item.name}>{item.name}</MenuRadioItem>}\n      </MenuContent>\n    </Menu>\n  )\n}\n",
    "type": "docs"
  },
  "collections/multiple-menu-demo": {
    "component": "@/components/docs/collections/multiple-menu-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { type Selection } from '@react-types/shared'\nimport { Button, Menu, MenuCheckboxItem, MenuContent, MenuHeader, MenuSection } from 'ui'\n\nexport default function MultipleMenuDemo() {\n  const [selected, setSelected] = React.useState<Selection>(new Set(['status']))\n  return (\n    <Menu>\n      <Button appearance=\"outline\">Open</Button>\n      <MenuContent\n        placement=\"bottom\"\n        selectionMode=\"multiple\"\n        selectedKeys={selected}\n        onSelectionChange={setSelected}\n        className=\"w-56\"\n        disabledKeys={['activity']}\n      >\n        <MenuSection>\n          <MenuHeader separator>Appearance</MenuHeader>\n          <MenuCheckboxItem id=\"status\">Status Bar</MenuCheckboxItem>\n          <MenuCheckboxItem id=\"activity\">Activity Bar</MenuCheckboxItem>\n          <MenuCheckboxItem id=\"panel\">Panel</MenuCheckboxItem>\n        </MenuSection>\n      </MenuContent>\n    </Menu>\n  )\n}\n",
    "type": "docs"
  },
  "collections/grid-list-drag-between-item-demo": {
    "component": "@/components/docs/collections/grid-list-drag-between-item-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport GridListDragDemo from '@/components/docs/collections/grid-list-drag-demo'\nimport { useDragAndDrop } from 'react-aria-components'\nimport { useListData } from 'react-stately'\nimport { Grid, GridEmptyState, GridItem, GridList, GridListItem } from 'ui'\n\nexport default function GridListDragBetweenItemDemo() {\n  const list = useListData({\n    initialItems: [\n      { id: 6, name: 'The Byrds' },\n      { id: 7, name: 'The Yardbirds' }\n    ]\n  })\n\n  const { dragAndDropHooks } = useDragAndDrop({\n    async onInsert(e) {\n      const items = await Promise.all(\n        e.items.map(async (item) => {\n          const name = item.kind === 'text' ? await item.getText('text/plain') : item.name\n          return { id: Math.random(), name }\n        })\n      )\n\n      if (e.target.dropPosition === 'before') {\n        list.insertBefore(e.target.key, ...items)\n      } else if (e.target.dropPosition === 'after') {\n        list.insertAfter(e.target.key, ...items)\n      }\n    }\n  })\n\n  return (\n    <Grid gap={4} columns={3}>\n      <GridItem>\n        <GridListDragDemo />\n      </GridItem>\n      <GridItem>\n        <GridList\n          aria-label=\"Droppable list\"\n          items={list.items}\n          dragAndDropHooks={dragAndDropHooks}\n        >\n          {(item) => <GridListItem>{item.name}</GridListItem>}\n        </GridList>\n      </GridItem>\n      <GridItem>\n        <OtherEmptyList />\n      </GridItem>\n    </Grid>\n  )\n}\n\nfunction OtherEmptyList() {\n  const list = useListData({\n    initialItems: [{ id: 7, name: 'The Who' }]\n  })\n\n  const { dragAndDropHooks } = useDragAndDrop({\n    async onInsert(e) {\n      const items = await Promise.all(\n        e.items.map(async (item) => {\n          const name = item.kind === 'text' ? await item.getText('text/plain') : item.name\n          return { id: Math.random(), name }\n        })\n      )\n\n      if (e.target.dropPosition === 'before') {\n        list.insertBefore(e.target.key, ...items)\n      } else if (e.target.dropPosition === 'after') {\n        list.insertAfter(e.target.key, ...items)\n      }\n    }\n  })\n\n  return (\n    <GridList\n      aria-label=\"Droppable list\"\n      items={list.items}\n      dragAndDropHooks={dragAndDropHooks}\n      renderEmptyState={() => <GridEmptyState>No bands selected</GridEmptyState>}\n    >\n      {(item) => <GridListItem>{item.name}</GridListItem>}\n    </GridList>\n  )\n}\n",
    "type": "docs"
  },
  "collections/list-box-demo": {
    "component": "@/components/docs/collections/list-box-demo",
    "raw": "'use client'\n\nimport { ListBox, ListBoxItem } from 'ui'\n\nconst rockPopBands = [\n  { id: '1', name: 'Nirvana' },\n  { id: '2', name: 'Radiohead' },\n  { id: '3', name: 'Foo Fighters' },\n  { id: '4', name: 'Arctic Monkeys' },\n  { id: '5', name: 'The Strokes' }\n]\n\nexport default function ListBoxDemo() {\n  return (\n    <ListBox items={rockPopBands} aria-label=\"Bands\" selectionMode=\"multiple\">\n      {(item) => <ListBoxItem key={item.id}>{item.name}</ListBoxItem>}\n    </ListBox>\n  )\n}\n",
    "type": "docs"
  },
  "collections/grid-list-multiple-demo": {
    "component": "@/components/docs/collections/grid-list-multiple-demo",
    "raw": "'use client'\n\nimport { GridList, GridListItem } from 'ui'\n\nexport default function GridListMultipleDemo() {\n  return (\n    <div>\n      <GridList\n        items={items}\n        aria-label=\"Select items\"\n        selectionMode=\"multiple\"\n        className=\"min-w-64\"\n      >\n        {(item) => <GridListItem id={item.id}>{item.name}</GridListItem>}\n      </GridList>\n    </div>\n  )\n}\n\nconst items = [\n  { id: '1', name: 'The Beatles' },\n  { id: '2', name: 'Led Zeppelin' },\n  { id: '3', name: 'Pink Floyd' },\n  { id: '4', name: 'Queen' },\n  { id: '5', name: 'The Rolling Stones' }\n]\n",
    "type": "docs"
  },
  "collections/table-demo": {
    "component": "@/components/docs/collections/table-demo",
    "raw": "'use client'\n\nimport { Table, TableBody, TableCell, TableColumn, TableHeader, TableRow } from 'ui'\n\nexport const bands = [\n  { id: '1', name: 'Nirvana', genre: 'Grunge', latestAlbum: 'In Utero' },\n  {\n    id: '2',\n    name: 'Radiohead',\n    genre: 'Alternative Rock',\n    latestAlbum: 'A Moon Shaped Pool'\n  },\n  { id: '3', name: 'Foo Fighters', genre: 'Rock', latestAlbum: 'Medicine at Midnight' },\n  {\n    id: '4',\n    name: 'Arctic Monkeys',\n    genre: 'Indie Rock',\n    latestAlbum: 'Tranquility Base Hotel & Casino'\n  },\n  { id: '5', name: 'The Strokes', genre: 'Indie Rock', latestAlbum: 'The New Abnormal' },\n  {\n    id: '6',\n    name: 'Red Hot Chili Peppers',\n    genre: 'Funk Rock',\n    latestAlbum: 'Unlimited Love'\n  },\n  { id: '7', name: 'Green Day', genre: 'Punk Rock', latestAlbum: 'Father of All...' }\n]\n\nexport default function TableDemo() {\n  return (\n    <Table aria-label=\"Bands\" selectionMode=\"multiple\">\n      <TableHeader>\n        <TableColumn>#</TableColumn>\n        <TableColumn>Name</TableColumn>\n        <TableColumn>Genre</TableColumn>\n        <TableColumn>Latest Album</TableColumn>\n      </TableHeader>\n      <TableBody items={bands}>\n        {(item) => (\n          <TableRow key={item.id}>\n            <TableCell>{item.id}</TableCell>\n            <TableCell>{item.name}</TableCell>\n            <TableCell>{item.genre}</TableCell>\n            <TableCell>{item.latestAlbum}</TableCell>\n          </TableRow>\n        )}\n      </TableBody>\n    </Table>\n  )\n}\n",
    "type": "docs"
  },
  "collections/tag-group-demo": {
    "component": "@/components/docs/collections/tag-group-demo",
    "raw": "'use client'\n\nimport { Tag, TagGroup } from 'ui'\n\nexport const androidBrands = [\n  { id: '1', name: 'Samsung', available: false },\n  { id: '2', name: 'OnePlus', available: true },\n  { id: '3', name: 'Google', available: true },\n  { id: '4', name: 'Xiaomi', available: false }\n]\n\nexport default function TagGroupDemo() {\n  return (\n    <TagGroup label=\"Android Brands\" selectionMode=\"multiple\" items={androidBrands}>\n      {(item) => <Tag isDisabled={!item.available}>{item.name}</Tag>}\n    </TagGroup>\n  )\n}\n",
    "type": "docs"
  },
  "collections/menu-with-icon-demo": {
    "component": "@/components/docs/collections/menu-with-icon-demo",
    "raw": "'use client'\n\nimport React, { useState } from 'react'\n\nimport { OptionPreview } from '@/components/docs/outside/option-preview'\nimport {\n  IconBrandBluesky,\n  IconBrandTelegram,\n  IconBrandTwitter,\n  IconChevronsY,\n  IconHashtag,\n  IconHeadphones,\n  IconLogout,\n  IconMail,\n  IconMessage,\n  IconPersonAdd,\n  IconPlus,\n  IconSettings\n} from '@irsyadadl/paranoid'\nimport type { Placement } from '@react-types/overlays'\nimport {\n  Avatar,\n  Menu,\n  MenuContent,\n  MenuHeader,\n  MenuItem,\n  MenuKeyboard,\n  MenuSection,\n  MenuSeparator,\n  MenuTrigger,\n  Select,\n  SelectItem,\n  SubmenuTrigger,\n  Switch\n} from 'ui'\n\nimport { placements } from './single-menu-demo'\n\nexport default function MenuWithIconDemo() {\n  const [showArrow, setShowArrow] = useState(false)\n  const [selected, setSelected] = React.useState<Placement>('bottom')\n  return (\n    <>\n      <OptionPreview className=\"space-y-2\">\n        <Switch isSelected={showArrow} onChange={() => setShowArrow(!showArrow)}>\n          Show arrow\n        </Switch>\n        <Select\n          className=\"[&>.btr]:h-8\"\n          selectedKey={selected}\n          onSelectionChange={(v) => setSelected(v as Placement)}\n          items={placements}\n        >\n          {(item) => <SelectItem id={item.name}>{item.name}</SelectItem>}\n        </Select>\n      </OptionPreview>\n      <Menu>\n        <MenuTrigger>\n          <Avatar className=\"size-10\" src=\"https://github.com/irsyadadl.png\" />\n        </MenuTrigger>\n        <MenuContent showArrow={showArrow} placement={selected} className=\"min-w-64\">\n          <MenuSection>\n            <MenuHeader separator>\n              <span className=\"block\">Irsyad A. Panjaitan</span>\n              <span className=\"font-normal text-muted-fg\">@irsyadadl</span>\n            </MenuHeader>\n          </MenuSection>\n          <MenuItem onAction={() => setShowArrow(!showArrow)}>\n            <IconChevronsY />\n            {showArrow ? 'Hide' : 'Show'} Arrow\n          </MenuItem>\n          <MenuItem>\n            <IconSettings />\n            Settings\n          </MenuItem>\n          <MenuItem href=\"#\">\n            <IconPlus />\n            Create Team\n          </MenuItem>\n          <MenuItem href=\"#\">\n            <IconHashtag />\n            Command Menu\n            <MenuKeyboard keys=\"⌘K\" />\n          </MenuItem>\n          <SubmenuTrigger>\n            <MenuItem>\n              <IconPersonAdd />\n              <span>Invite users</span>\n            </MenuItem>\n            <MenuContent offset={8}>\n              <MenuItem>\n                <IconMail />\n                <span>Email</span>\n              </MenuItem>\n              <MenuItem>\n                <IconMessage />\n                <span>Message</span>\n              </MenuItem>\n              <MenuSeparator />\n              <SubmenuTrigger>\n                <MenuItem>\n                  <IconPersonAdd />\n                  <span>Others</span>\n                </MenuItem>\n                <MenuContent offset={8}>\n                  <MenuItem>\n                    <IconBrandTelegram />\n                    <span>Telegram</span>\n                  </MenuItem>\n                  <MenuItem>\n                    <IconBrandBluesky />\n                    <span>Bluesky</span>\n                  </MenuItem>\n                  <MenuItem>\n                    <IconBrandTwitter />\n                    <span>Twitter</span>\n                  </MenuItem>\n                </MenuContent>\n              </SubmenuTrigger>\n            </MenuContent>\n          </SubmenuTrigger>\n          <MenuSeparator />\n          <MenuItem href=\"#\">\n            <IconHeadphones />\n            Contact Support\n          </MenuItem>\n          <MenuSeparator />\n          <MenuItem>\n            <IconLogout />\n            Log out\n          </MenuItem>\n        </MenuContent>\n      </Menu>\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "collections/list-box-rearrange-demo": {
    "component": "@/components/docs/collections/list-box-rearrange-demo",
    "raw": "'use client'\n\nimport { useDragAndDrop } from 'react-aria-components'\nimport { useListData } from 'react-stately'\nimport { ListBox, ListBoxItem } from 'ui'\n\nexport default function ListBoxRearrangeDemo() {\n  const list = useListData({\n    initialItems: [\n      { id: '1', name: 'Nirvana' },\n      { id: '2', name: 'Radiohead' },\n      { id: '3', name: 'Foo Fighters' },\n      { id: '4', name: 'Arctic Monkeys' },\n      { id: '5', name: 'The Strokes' }\n    ]\n  })\n\n  const { dragAndDropHooks } = useDragAndDrop({\n    getItems: (keys) =>\n      [...keys].map((key) => ({ 'text/plain': list.getItem(key).name })),\n    onReorder(e) {\n      if (e.target.dropPosition === 'before') {\n        list.moveBefore(e.target.key, e.keys)\n      } else if (e.target.dropPosition === 'after') {\n        list.moveAfter(e.target.key, e.keys)\n      }\n    }\n  })\n\n  return (\n    <ListBox\n      items={list.items}\n      aria-label=\"Bands\"\n      selectionMode=\"multiple\"\n      dragAndDropHooks={dragAndDropHooks}\n    >\n      {(item) => <ListBoxItem key={item.id}>{item.name}</ListBoxItem>}\n    </ListBox>\n  )\n}\n",
    "type": "docs"
  },
  "collections/command-basic-demo": {
    "component": "@/components/docs/collections/command-basic-demo",
    "raw": "'use client'\n\nimport React, { useState } from 'react'\n\nexport default function CommandBasicDemo() {\n  const [open, setOpen] = useState(false)\n  React.useEffect(() => {\n    const down = (e: KeyboardEvent) => {\n      if (e.key === 'e') {\n        e.preventDefault()\n        setOpen((open: boolean) => !open)\n      }\n    }\n\n    document.addEventListener('keydown', down)\n\n    return () => document.removeEventListener('keydown', down)\n  }, [])\n  return <>{/*  */}</>\n}\n",
    "type": "docs"
  },
  "collections/grid-list-render-empty-state-demo": {
    "component": "@/components/docs/collections/grid-list-render-empty-state-demo",
    "raw": "'use client'\n\nimport { GridEmptyState, GridList } from 'ui'\n\nexport default function GridListRenderEmptyStateDemo() {\n  return (\n    <GridList\n      items={items}\n      aria-label=\"Select items\"\n      selectionMode=\"multiple\"\n      className=\"min-w-64\"\n      renderEmptyState={() => <GridEmptyState>No bands selected</GridEmptyState>}\n    />\n  )\n}\n\nconst items: Iterable<any> | undefined = []\n",
    "type": "docs"
  },
  "collections/tag-group-controlled-demo": {
    "component": "@/components/docs/collections/tag-group-controlled-demo",
    "raw": "import React from 'react'\n\nimport type { Selection } from 'react-aria-components'\nimport { Description, Tag, TagGroup } from 'ui'\n\nconst fruitList = [\n  { id: '1', name: 'Apple', available: false },\n  { id: '2', name: 'Banana', available: true },\n  { id: '3', name: 'Cherry', available: true },\n  { id: '4', name: 'Date', available: false }\n]\n\nexport default function TagGroupControlledDemo() {\n  const [selected, setSelected] = React.useState<Selection>(new Set([]))\n  return (\n    <div>\n      <TagGroup\n        selectionMode=\"multiple\"\n        items={fruitList}\n        selectedKeys={selected}\n        onSelectionChange={setSelected}\n      >\n        {(item) => <Tag>{item.name}</Tag>}\n      </TagGroup>\n\n      <Description className=\"mt-2 block [&>strong]:text-fg text-muted-fg\">\n        You have selected: <strong>{Array.from(selected).join(', ')}</strong>\n      </Description>\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "collections/tag-group-with-remove-demo": {
    "component": "@/components/docs/collections/tag-group-with-remove-demo",
    "raw": "'use client'\n\nimport { useListData } from 'react-stately'\nimport { Tag, TagGroup } from 'ui'\n\nexport default function TagGroupWithRemoveDemo() {\n  const list = useListData({\n    initialItems: [\n      { id: '1', name: 'Samsung', available: false },\n      { id: '2', name: 'OnePlus', available: true },\n      { id: '3', name: 'Google', available: true },\n      { id: '4', name: 'Xiaomi', available: false }\n    ]\n  })\n\n  return (\n    <TagGroup\n      label=\"Android Brands\"\n      selectionMode=\"multiple\"\n      items={list.items}\n      onRemove={(keys) => list.remove(...keys)}\n    >\n      {(item) => <Tag>{item.name}</Tag>}\n    </TagGroup>\n  )\n}\n",
    "type": "docs"
  },
  "collections/grid-list-controlled-demo": {
    "component": "@/components/docs/collections/grid-list-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport type { Selection } from 'react-aria-components'\nimport { Description, GridList, GridListItem } from 'ui'\n\nexport default function GridListControlledDemo() {\n  const [selectedKeys, setSelectedKeys] = React.useState<Selection>(new Set([]))\n  return (\n    <div>\n      <GridList\n        selectedKeys={selectedKeys}\n        onSelectionChange={setSelectedKeys}\n        items={items}\n        aria-label=\"Select items\"\n        selectionMode=\"multiple\"\n        className=\"min-w-64\"\n      >\n        {(item) => <GridListItem id={item.id}>{item.name}</GridListItem>}\n      </GridList>\n      <Description className=\"mt-2 block [&>strong]:text-fg text-muted-fg\">\n        You have selected: <strong>{Array.from(selectedKeys).join(', ')}</strong>\n      </Description>\n    </div>\n  )\n}\n\nconst items = [\n  { id: '1', name: 'The Beatles' },\n  { id: '2', name: 'Led Zeppelin' },\n  { id: '3', name: 'Pink Floyd' },\n  { id: '4', name: 'Queen' },\n  { id: '5', name: 'The Rolling Stones' }\n]\n",
    "type": "docs"
  },
  "collections/menu-basic-demo": {
    "component": "@/components/docs/collections/menu-basic-demo",
    "raw": "'use client'\n\nimport { Menu, MenuContent, MenuItem, MenuTrigger } from 'ui'\n\nexport default function MenuBasicDemo() {\n  return (\n    <Menu>\n      <MenuTrigger>Open</MenuTrigger>\n      <MenuContent placement=\"bottom\">\n        <MenuItem>Inbox</MenuItem>\n        <MenuItem>Sent</MenuItem>\n        <MenuItem>New Message</MenuItem>\n        <MenuItem isDanger>Spam</MenuItem>\n        <MenuItem isDisabled>Dang</MenuItem>\n      </MenuContent>\n    </Menu>\n  )\n}\n",
    "type": "docs"
  },
  "collections/grid-list-disabled-demo": {
    "component": "@/components/docs/collections/grid-list-disabled-demo",
    "raw": "'use client'\n\nimport { GridList, GridListItem } from 'ui'\n\nexport default function GridListDisabledDemo() {\n  return (\n    <GridList\n      items={items}\n      aria-label=\"Select your favorite bands\"\n      selectionMode=\"multiple\"\n      className=\"min-w-64\"\n    >\n      {(item) => (\n        <GridListItem isDisabled={[2, 5].includes(Number(item.id))} id={item.id}>\n          {item.name}\n        </GridListItem>\n      )}\n    </GridList>\n  )\n}\n\nconst items = [\n  { id: '1', name: 'The Beatles' },\n  { id: '2', name: 'Led Zeppelin' },\n  { id: '3', name: 'Pink Floyd' },\n  { id: '4', name: 'Queen' },\n  { id: '5', name: 'The Rolling Stones' }\n]\n",
    "type": "docs"
  },
  "collections/tag-group-href-demo": {
    "component": "@/components/docs/collections/tag-group-href-demo",
    "raw": "import React from 'react'\n\nimport { Tag, TagGroup } from 'ui'\n\nconst articles = [\n  { name: 'React Tutorial', url: '#' },\n  { name: 'TypeScript Handbook', url: '#' },\n  { name: 'JavaScript Guide', url: '#' }\n]\n\nexport default function TagGroupControlledDemo() {\n  return (\n    <TagGroup items={articles}>\n      {(item) => (\n        <Tag id={item.name} href={item.url}>\n          {item.name}\n        </Tag>\n      )}\n    </TagGroup>\n  )\n}\n",
    "type": "docs"
  },
  "collections/grid-list-drag-demo": {
    "component": "@/components/docs/collections/grid-list-drag-demo",
    "raw": "'use client'\n\nimport { useDragAndDrop } from 'react-aria-components'\nimport { useListData } from 'react-stately'\nimport { GridList, GridListItem } from 'ui'\n\nexport default function GridListDragDemo() {\n  const list = useListData({\n    initialItems: items\n  })\n  const { dragAndDropHooks } = useDragAndDrop({\n    getItems: (keys) =>\n      [...keys].map((key) => ({ 'text/plain': list.getItem(key).name })),\n    onReorder(e) {\n      if (e.target.dropPosition === 'before') {\n        list.moveBefore(e.target.key, e.keys)\n      } else if (e.target.dropPosition === 'after') {\n        list.moveAfter(e.target.key, e.keys)\n      }\n    }\n  })\n\n  return (\n    <div>\n      <GridList\n        items={list.items}\n        aria-label=\"Droppable list\"\n        selectionMode=\"multiple\"\n        dragAndDropHooks={dragAndDropHooks}\n      >\n        {(item) => <GridListItem id={item.id}>{item.name}</GridListItem>}\n      </GridList>\n    </div>\n  )\n}\n\nconst items = [\n  { id: 1, name: 'The Beatles' },\n  { id: 2, name: 'Led Zeppelin' },\n  { id: 3, name: 'Pink Floyd' },\n  { id: 4, name: 'Queen' },\n  { id: 5, name: 'The Rolling Stones' },\n  { id: 6, name: 'The Beach Boys' },\n  { id: 7, name: 'The Kinks' },\n  { id: 8, name: 'The Who' }\n]\n",
    "type": "docs"
  },
  "collections/grid-list-demo": {
    "component": "@/components/docs/collections/grid-list-demo",
    "raw": "'use client'\n\nimport { GridList, GridListItem } from 'ui'\n\nexport default function GridListDemo() {\n  return (\n    <GridList items={items} aria-label=\"Select your favorite bands\" className=\"min-w-64\">\n      {(item) => <GridListItem id={item.id}>{item.name}</GridListItem>}\n    </GridList>\n  )\n}\n\nconst items = [\n  { id: '1', name: 'The Beatles' },\n  { id: '2', name: 'Led Zeppelin' },\n  { id: '3', name: 'Pink Floyd' },\n  { id: '4', name: 'Queen' },\n  { id: '5', name: 'The Rolling Stones' }\n]\n",
    "type": "docs"
  },
  "media/avatar-size-demo": {
    "component": "@/components/docs/media/avatar-size-demo",
    "raw": "import { Avatar } from 'ui'\n\nexport default function AvatarSizeDemo() {\n  return (\n    <div className=\"flex gap-4\">\n      <Avatar size=\"small\" src=\"https://github.com/irsyadadl.png\" />\n      <Avatar size=\"medium\" src=\"https://github.com/irsyadadl.png\" />\n      <Avatar size=\"large\" src=\"https://github.com/irsyadadl.png\" />\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "media/avatar-initials-demo": {
    "component": "@/components/docs/media/avatar-initials-demo",
    "raw": "import { Avatar } from 'ui'\n\nexport default function AvatarInitialsDemo() {\n  return <Avatar initials=\"IR\" />\n}\n",
    "type": "docs"
  },
  "media/avatar-demo": {
    "component": "@/components/docs/media/avatar-demo",
    "raw": "import { Avatar } from 'ui'\n\nexport default function AvatarDemo() {\n  return (\n    <div className=\"flex gap-4\">\n      <Avatar size=\"small\" src=\"https://github.com/irsyadadl.png\" />\n      <Avatar size=\"medium\" src=\"https://github.com/irsyadadl.png\" />\n      <Avatar size=\"large\" src=\"https://github.com/irsyadadl.png\" />\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "media/avatar-shape-demo": {
    "component": "@/components/docs/media/avatar-shape-demo",
    "raw": "import { Avatar } from 'ui'\n\nexport default function AvatarShapeDemo() {\n  return (\n    <Avatar\n      shape=\"square\"\n      initials=\"IR\"\n      alt=\"irsyadadl\"\n      src=\"https://github.com/irsyadadl.png\"\n    />\n  )\n}\n",
    "type": "docs"
  },
  "media/avatar-group-demo": {
    "component": "@/components/docs/media/avatar-group-demo",
    "raw": "import { Avatar, AvatarGroup } from 'ui'\n\nexport default function AvatarGroupDemo() {\n  return (\n    <AvatarGroup>\n      <Avatar initials=\"IR\" src=\"https://i.pravatar.cc/150?img=61\" />\n      <Avatar initials=\"IR\" src=\"https://i.pravatar.cc/150?img=62\" />\n      <Avatar initials=\"IR\" src=\"https://i.pravatar.cc/150?img=63\" />\n      <Avatar initials=\"IR\" src=\"https://i.pravatar.cc/150?img=64\" />\n      <Avatar initials=\"IR\" src=\"https://i.pravatar.cc/150?img=65\" />\n    </AvatarGroup>\n  )\n}\n",
    "type": "docs"
  },
  "media/avatar-fallback-demo": {
    "component": "@/components/docs/media/avatar-fallback-demo",
    "raw": "import { Avatar } from 'ui'\n\nexport default function AvatarFallbackDemo() {\n  return <Avatar initials=\"IR\" src=\"https://github.com/irsyadadl.png\" />\n}\n",
    "type": "docs"
  },
  "aspect-ratio": {
    "component": "@/components/ui/aspect-ratio",
    "raw": "'use client'\n\nimport * as AspectRatioPrimitive from '@radix-ui/react-aspect-ratio'\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n",
    "type": "ui"
  },
  "note": {
    "component": "@/components/ui/note",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { IconCircleCheck, IconCircleInfo, IconTriangleInfo } from '@irsyadadl/paranoid'\nimport { Text } from 'react-aria-components'\nimport { tv, type VariantProps } from 'tailwind-variants'\n\nimport { cn } from './primitive'\n\nconst noteStyles = tv({\n  base: [\n    'my-4 px-5 py-4 overflow-hidden rounded-xl ring-1 [&_strong]:font-medium',\n    '[&_[data-slot=icon]]:size-5 [&_[data-slot=icon]]:shrink-0'\n  ],\n  variants: {\n    intent: {\n      primary: [\n        'ring-primary-500/30 [&_a]:text-primary-600 text-primary-800 bg-primary-50/50 [&_[data-slot=icon]]:text-primary-600 leading-4',\n        'dark:bg-primary-600/10 dark:text-primary-200 dark:[&_a]:text-primary-50 dark:[&_[data-slot=icon]]:text-primary-400'\n      ],\n      secondary: [\n        'ring-zinc-500/30 [&_a]:text-zinc-600 text-zinc-900 bg-zinc-50/50 [&_[data-slot=icon]]:text-zinc-500 leading-4',\n        'dark:bg-zinc-500/10 dark:text-zinc-200 dark:[&_a]:text-zinc-50 dark:[&_[data-slot=icon]]:text-zinc-50'\n      ],\n      info: [\n        'ring-sky-500/30 [&_a]:text-sky-600 text-sky-800 bg-sky-50/50 [&_[data-slot=icon]]:text-sky-500 leading-4',\n        'dark:bg-sky-500/10 dark:text-sky-200 dark:[&_a]:text-sky-50 dark:[&_[data-slot=icon]]:text-sky-400'\n      ],\n      warning: [\n        'ring-amber-500/30 [&_a]:text-amber-600 text-amber-800 bg-amber-50/50 [&_[data-slot=icon]]:text-amber-500 leading-4',\n        'dark:bg-amber-500/10 dark:text-amber-200 dark:[&_a]:text-amber-50 dark:[&_[data-slot=icon]]:text-amber-400'\n      ],\n      danger: [\n        'ring-red-500/30 [&_a]:text-red-600 text-red-800 bg-red-50/50 [&_[data-slot=icon]]:text-red-500 leading-4',\n        'dark:bg-red-500/10 dark:text-red-200 dark:[&_a]:text-red-50 dark:[&_[data-slot=icon]]:text-red-400'\n      ],\n      success: [\n        'ring-emerald-500/30 [&_a]:text-emerald-600 text-emerald-900 bg-emerald-50/50 [&_[data-slot=icon]]:text-emerald-600 leading-4',\n        'dark:bg-emerald-500/10 dark:text-emerald-200 dark:[&_a]:text-emerald-50 dark:[&_[data-slot=icon]]:text-emerald-400'\n      ]\n    }\n  },\n  defaultVariants: {\n    intent: 'primary'\n  }\n})\n\ninterface NoteProps\n  extends React.HtmlHTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof noteStyles> {}\n\nconst Note = ({ intent = 'secondary', className, ...props }: NoteProps) => {\n  return (\n    <div className={noteStyles({ intent, className })} {...props}>\n      <div className=\"flex items-start gap-x-3\">\n        <div className=\"mt-0.5 w-5\">\n          {['info', 'primary', 'secondary'].includes(intent) ? (\n            <IconCircleInfo />\n          ) : intent === 'success' ? (\n            <IconCircleCheck />\n          ) : (\n            <IconTriangleInfo />\n          )}\n        </div>\n        <Text slot=\"description\" {...props} className={cn('text-sm block nd', className)}>\n          {props.children}\n        </Text>\n      </div>\n    </div>\n  )\n}\n\nexport { Note, type NoteProps }\n",
    "type": "ui"
  },
  "list-box": {
    "component": "@/components/ui/list-box",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { IconHamburger } from '@irsyadadl/paranoid'\nimport {\n  ListBox as ListBoxPrimitive,\n  ListBoxItem as ListBoxItemPrimitive,\n  type ListBoxItemProps,\n  type ListBoxProps as ListBoxPrimitiveProps\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { DropdownSection } from './dropdown'\nimport { cn } from './primitive'\n\nconst listBox = tv({\n  slots: {\n    root: 'border-surface-2 flex max-h-96 w-full min-w-72 flex-col overflow-auto overflow-y-auto rounded-xl border p-1 shadow-xl outline-none',\n    item: [\n      'my-0.5 cursor-pointer rounded-md p-2 text-base outline-none transition lg:text-sm',\n      'hover:bg-secondary', // hover\n      'focus:bg-secondary', // focus\n      'dragging:cursor-grab dragging:bg-secondary', // dragging\n      'selected:bg-primary selected:text-primary-fg' // selected\n    ]\n  }\n})\n\nconst { root, item } = listBox()\n\ninterface ListBoxProps<T> extends ListBoxPrimitiveProps<T> {\n  className?: string\n}\n\nconst ListBox = <T extends object>({\n  children,\n  className,\n  ...props\n}: ListBoxProps<T>) => (\n  <ListBoxPrimitive {...props} className={root({ className: className })}>\n    {children}\n  </ListBoxPrimitive>\n)\n\nconst ListBoxItem = <T extends object>({\n  children,\n  className,\n  ...props\n}: ListBoxItemProps<T> & {\n  className?: string\n}) => {\n  const textValue = typeof children === 'string' ? children : undefined\n\n  return (\n    <ListBoxItemPrimitive\n      textValue={textValue}\n      {...props}\n      className={item({ className })}\n    >\n      {(values) => (\n        <div className=\"flex items-center gap-2\">\n          <>\n            {values.allowsDragging && (\n              <IconHamburger\n                className={cn(\n                  'size-4 shrink-0 text-muted-fg transition',\n                  values.isFocused && 'text-fg',\n                  values.isDragging && 'text-fg',\n                  values.isSelected && 'text-primary-fg/70'\n                )}\n              />\n            )}\n            <div className=\"flex flex-col\">\n              {typeof children === 'function' ? children(values) : children}\n            </div>\n          </>\n        </div>\n      )}\n    </ListBoxItemPrimitive>\n  )\n}\n\nconst ListBoxSection = DropdownSection\n\ninterface ListBoxPickerProps<T> extends ListBoxProps<T> {}\n\nconst ListBoxPicker = <T extends object>({\n  className,\n  ...props\n}: ListBoxPickerProps<T>) => {\n  return (\n    <ListBoxPrimitive\n      className={cn(\n        'max-h-72 overflow-auto p-1 outline-none [clip-path:inset(0_0_0_0_round_.75rem)]',\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { ListBox, listBox, ListBoxItem, ListBoxPicker, ListBoxSection }\n",
    "type": "ui"
  },
  "pagination": {
    "component": "@/components/ui/pagination",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport {\n  IconChevronLgLeft,\n  IconChevronLgRight,\n  IconChevronsLgLeft,\n  IconChevronsLgRight,\n  IconDotsHorizontal\n} from '@irsyadadl/paranoid'\nimport type {\n  GridListItemProps,\n  GridListProps,\n  LabelProps,\n  LinkProps\n} from 'react-aria-components'\nimport { GridList, GridListItem, Link } from 'react-aria-components'\nimport type { VariantProps } from 'tailwind-variants'\n\nimport { buttonStyles } from './button'\nimport { Label } from './field'\nimport { cn } from './primitive'\nimport { VisuallyHidden } from './visually-hidden'\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<'nav'>) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn('mx-auto flex w-full justify-center', className)}\n    {...props}\n  />\n)\n\nconst PaginationList = <T extends object>({ className, ...props }: GridListProps<T>) => {\n  return (\n    <GridList className={cn('flex flex-row items-center gap-1', className)} {...props} />\n  )\n}\n\nconst PaginationItem = ({ className, ...props }: GridListItemProps) => (\n  <GridListItem className={cn(className)} {...props} />\n)\n\ninterface PaginationLinkProps\n  extends Omit<LinkProps, 'id'>,\n    VariantProps<typeof buttonStyles> {\n  isActive?: boolean\n  className?: string\n}\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = 'square-petite',\n  ...props\n}: PaginationLinkProps) => (\n  <Link\n    routerOptions={{\n      scroll: false\n    }}\n    aria-current={isActive ? 'page' : undefined}\n    className={cn(\n      buttonStyles({\n        appearance: isActive ? 'solid' : 'outline',\n        size,\n        className: 'rounded-lg'\n      }),\n      className\n    )}\n    {...props}\n  />\n)\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"square-petite\"\n    slot=\"previous\"\n    className={cn('gap-1', className)}\n    {...props}\n  >\n    <IconChevronLgLeft />\n\n    <span className=\"sr-only\">Previous</span>\n  </PaginationLink>\n)\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"square-petite\"\n    slot=\"next\"\n    className={cn('gap-1', className)}\n    {...props}\n  >\n    <span className=\"sr-only\">Next</span>\n    <IconChevronLgRight />\n  </PaginationLink>\n)\n\nconst PaginationLast = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"square-petite\"\n    className={cn('gap-1', className)}\n    {...props}\n  >\n    <span className=\"sr-only\">Last</span>\n    <IconChevronsLgRight />\n  </PaginationLink>\n)\n\nconst PaginationFirst = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"square-petite\"\n    className={cn('gap-1', className)}\n    {...props}\n  >\n    <IconChevronsLgLeft />\n\n    <span className=\"sr-only\">First</span>\n  </PaginationLink>\n)\n\nconst PaginationEllipsis = ({ className, ...props }: React.ComponentProps<'span'>) => (\n  <span\n    aria-hidden\n    className={cn('flex size-9 items-center justify-center', className)}\n    {...props}\n  >\n    <IconDotsHorizontal className=\"size-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\n\nconst PaginationLabel = ({ className, ...props }: LabelProps) => (\n  <Label\n    aria-hidden\n    className={cn('grid h-9 place-content-center px-3 text-sm font-normal', className)}\n    {...props}\n  />\n)\n\nconst PaginationSeparator = ({ className, ...props }: React.ComponentProps<'span'>) => (\n  <span\n    aria-hidden\n    className={cn('mx-1 h-5 w-px rotate-[14deg] bg-border block self-center', className)}\n    {...props}\n  >\n    <VisuallyHidden>Divider</VisuallyHidden>\n  </span>\n)\n\nexport {\n  Pagination,\n  PaginationList,\n  PaginationEllipsis,\n  PaginationFirst,\n  PaginationItem,\n  PaginationLabel,\n  PaginationLast,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n  PaginationSeparator\n}\n",
    "type": "ui"
  },
  "link": {
    "component": "@/components/ui/link",
    "raw": "'use client'\n\nimport {\n  composeRenderProps,\n  Link as LinkPrimitive,\n  type LinkProps as LinkPrimitiveProps\n} from 'react-aria-components'\nimport { tv, type VariantProps } from 'tailwind-variants'\n\nconst linkStyles = tv({\n  base: 'rounded transition-colors focus:outline-none disabled:cursor-default disabled:no-underline forced-colors:disabled:text-[GrayText]',\n  variants: {\n    intent: {\n      unstyled: 'text-fg',\n      primary:\n        'text-primary-600 hover:text-primary-500 dark:text-primary-500 dark:hover:text-primary-400 forced-colors:disabled:text-[GrayText]',\n      'light/dark': 'text-fg hover:text-zinc-700 dark:hover:text-primary-400',\n      secondary:\n        'text-zinc-700 underline decoration-zinc-700/50 hover:decoration-zinc-700 dark:text-zinc-300 dark:decoration-zinc-300/70 dark:hover:decoration-zinc-300'\n    }\n  },\n  defaultVariants: {\n    intent: 'unstyled'\n  }\n})\n\ninterface LinkProps extends LinkPrimitiveProps, VariantProps<typeof linkStyles> {}\n\nfunction Link({ className, intent, ...props }: LinkProps) {\n  return (\n    <LinkPrimitive\n      {...props}\n      className={composeRenderProps(className, (className, ...renderProps) =>\n        linkStyles({ ...renderProps, intent, className })\n      )}\n    />\n  )\n}\n\nexport { Link, LinkPrimitive, type LinkPrimitiveProps, type LinkProps }\n",
    "type": "ui"
  },
  "tabs": {
    "component": "@/components/ui/tabs",
    "raw": "'use client'\n\nimport { useId } from 'react'\n\nimport { LayoutGroup, motion } from 'framer-motion'\nimport {\n  composeRenderProps,\n  Tab as TabPrimitive,\n  TabList as TabListPrimitive,\n  type TabListProps,\n  TabPanel as TabPanelPrimitive,\n  type TabPanelProps,\n  type TabProps,\n  Tabs as TabsPrimitive,\n  type TabsProps\n} from 'react-aria-components'\nimport { twJoin } from 'tailwind-merge'\nimport { tv } from 'tailwind-variants'\n\nimport { cn } from './primitive'\n\nconst tabsStyles = tv({\n  base: 'group flex gap-4',\n  variants: {\n    orientation: {\n      horizontal: 'flex-col',\n      vertical: 'w-[800px] flex-row'\n    }\n  }\n})\n\nfunction Tabs(props: TabsProps) {\n  return (\n    <TabsPrimitive\n      {...props}\n      className={composeRenderProps(props.className, (className, renderProps) =>\n        tabsStyles({\n          ...renderProps,\n          className\n        })\n      )}\n    />\n  )\n}\n\nconst tabListStyles = tv({\n  base: 'flex',\n  variants: {\n    orientation: {\n      horizontal: 'flex-row gap-x-5 border-b',\n      vertical: 'flex-col items-start gap-y-4 border-l'\n    }\n  }\n})\n\nfunction TabList<T extends object>(props: TabListProps<T>) {\n  const id = useId()\n  return (\n    <LayoutGroup id={id}>\n      <TabListPrimitive\n        {...props}\n        className={composeRenderProps(props.className, (className, renderProps) =>\n          tabListStyles({ ...renderProps, className })\n        )}\n      />\n    </LayoutGroup>\n  )\n}\n\nconst tabProps = tv({\n  base: [\n    'relative flex cursor-default items-center rounded-full text-sm font-medium outline-none transition forced-color-adjust-none hover:text-fg',\n    // hor\n    'group-orientation-vertical:w-full group-orientation-vertical:py-0',\n    // ver\n    'group-orientation-horizontal:pb-3 group-orientation-vertical:pl-4 group-orientation-vertical:pr-2'\n  ],\n  variants: {\n    isSelected: {\n      false: 'text-muted-fg',\n      true: 'text-fg forced-colors:bg-[Highlight] forced-colors:text-[HighlightText]'\n    },\n    isFocused: { false: 'ring-0', true: 'text-fg' },\n    isDisabled: {\n      true: 'text-muted-fg/50 forced-colors:text-[GrayText] forced-colors:selected:bg-[GrayText] forced-colors:selected:text-[HighlightText]'\n    }\n  }\n})\n\nfunction Tab({ children, ...props }: TabProps) {\n  return (\n    <TabPrimitive\n      {...props}\n      className={composeRenderProps(props.className, (_className, renderProps) =>\n        tabProps({\n          ...renderProps,\n          className: twJoin('href' in props && 'cursor-pointer', _className)\n        })\n      )}\n    >\n      {({ isSelected }) => (\n        <>\n          {children}\n          {isSelected && (\n            <motion.span\n              className={cn(\n                'absolute rounded bg-fg',\n                // horizontal\n                'group-orientation-horizontal:inset-x-0 group-orientation-horizontal:-bottom-px group-orientation-horizontal:h-0.5 group-orientation-horizontal:w-full',\n                // vertical\n                'group-orientation-vertical:left-0 group-orientation-vertical:h-[calc(100%-10%)] group-orientation-vertical:w-0.5 group-orientation-vertical:transform'\n              )}\n              layoutId=\"current-selected\"\n              transition={{ type: 'spring', stiffness: 500, damping: 30 }}\n            />\n          )}\n        </>\n      )}\n    </TabPrimitive>\n  )\n}\n\nconst tabPanelStyles = tv({\n  base: 'flex-1 text-sm text-fg'\n})\n\nfunction TabPanel(props: TabPanelProps) {\n  return (\n    <TabPanelPrimitive\n      {...props}\n      className={composeRenderProps(props.className, (className, renderProps) =>\n        tabPanelStyles({ ...renderProps, className })\n      )}\n    />\n  )\n}\n\nexport { Tab, TabList, TabPanel, Tabs }\n",
    "type": "ui"
  },
  "card": {
    "component": "@/components/ui/card",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport type { HeadingProps, TextProps } from 'react-aria-components'\nimport { Heading } from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { Description } from './field'\n\nconst card = tv({\n  slots: {\n    root: [\n      'xrkr rounded-lg xkd2 border bg-card text-fg shadow-sm [&:has(.larhy3):not(:has(.yahnba))>.ccvgs8x]:pt-6 [&:has(.larhy3)]:overflow-hidden [&_table]:overflow-hidden'\n    ],\n    header: 'flex xlw32 flex-col space-y-1.5 px-6 py-5',\n    title: 'text-xl klda font-semibold leading-none tracking-tight',\n    description: 'text-base dl2 text-muted-fg sm:text-sm',\n    content:\n      'yahnba px-6 pb-6 has-[.t-hea]:bg-secondary/40 has-[table]:p-0 [&:has(table)+.ccvgs8x]:py-5 [&:has(table)]:border-t [&_.t-cel]:px-6 [&_.t-col]:px-6',\n    footer: 'ccvgs8x flex items-center p-6 pt-0'\n  }\n})\n\nconst { root, header, title, description, content, footer } = card()\n\nconst Card = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => {\n  return <div className={root({ className })} {...props} />\n}\n\nconst CardHeader = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n  <div className={header({ className })} {...props} />\n)\n\nconst CardTitle = (props: HeadingProps) => {\n  return <Heading className={title({ className: props.className })} {...props} />\n}\n\nconst CardDescription = (props: TextProps) => {\n  return (\n    <Description className={description({ className: props.className })} {...props} />\n  )\n}\n\nconst CardContent = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => {\n  return <div className={content({ className })} {...props} />\n}\n\nconst CardFooter = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => {\n  return <div className={footer({ className })} {...props} />\n}\n\nexport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle }\n",
    "type": "ui"
  },
  "slider": {
    "component": "@/components/ui/slider",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { useSlotId } from '@react-aria/utils'\nimport {\n  composeRenderProps,\n  type LabelProps,\n  Slider as SliderPrimitive,\n  SliderOutput as SliderOutputPrimitive,\n  type SliderOutputProps as SliderOutputPrimitiveProps,\n  type SliderProps as SliderPrimitiveProps,\n  SliderStateContext as SliderStateContextPrimitive,\n  SliderThumb as SliderThumbPrimitive,\n  type SliderThumbProps as SliderThumbPrimitiveProps,\n  SliderTrack as SliderTrackPrimitive,\n  type SliderTrackProps as SliderTrackPrimitiveProps,\n  TextContext as TextContextPrimitive,\n  type TextProps\n} from 'react-aria-components'\nimport { tv, type VariantProps } from 'tailwind-variants'\n\nimport { Description, Label } from './field'\n\nconst sliderStyles = tv({\n  slots: {\n    root: 'flex disabled:opacity-50 flex-col gap-2 orientation-horizontal:w-full orientation-vertical:h-64 orientation-vertical:items-center',\n    track: [\n      'relative group/track rounded-full bg-zinc-200 dark:bg-zinc-800 cursor-pointer disabled:cursor-default disabled:bg-bg-disabled',\n      'grow orientation-vertical:flex-1 orientation-vertical:w-2 orientation-horizontal:w-full orientation-horizontal:h-2'\n    ],\n    filler: [\n      'rounded-full bg-primary group-disabled/track:bg-bg-disabled',\n      'pointer-events-none absolute group-orientation-horizontal/top-0 group-orientation-vertical/track:w-full group-orientation-vertical/track:bottom-0 group-orientation-horizontal/track:h-full'\n    ],\n    thumb: [\n      'outline-none focus:ring-4 focus:ring-primary/20 focus:outline-none forced-colors:outline-[Highlight]',\n      'rounded-full bg-white shadow-md transition-[width,height]',\n      'absolute left-[50%] top-[50%] block !-translate-x-1/2 !-translate-y-1/2',\n      'disabled:bg-bg-disabled disabled:border disabled:border-bg',\n      'orientation-vertical:w-2 orientation-horizontal:h-2',\n      'size-4 dragging:size-5'\n    ],\n    valueLabel: 'text-muted-fg text-sm'\n  }\n})\n\nconst { filler, thumb, root } = sliderStyles()\n\ninterface SliderProps extends SliderRootProps, VariantProps<typeof sliderStyles> {\n  label?: LabelProps['children']\n  description?: TextProps['children']\n  showValue?: boolean | ((value: number[]) => string)\n}\nconst Slider = React.forwardRef<React.ElementRef<typeof SliderPrimitive>, SliderProps>(\n  ({ label, description, showValue = true, ...props }, ref) => (\n    <SliderRoot ref={ref} {...props}>\n      <div className=\"flex items-center justify-between gap-2\">\n        {label && <Label>{label}</Label>}\n        {(showValue || typeof showValue === 'function') && (\n          <SliderValueLabel>\n            {({ state }) =>\n              typeof showValue === 'function' ? showValue(state.values) : undefined\n            }\n          </SliderValueLabel>\n        )}\n      </div>\n      <SliderControls />\n      {description && <Description>{description}</Description>}\n    </SliderRoot>\n  )\n)\nSlider.displayName = 'Slider'\n\ntype SliderRootProps = SliderPrimitiveProps\nconst SliderRoot = React.forwardRef(\n  (props: SliderRootProps, ref: React.Ref<HTMLDivElement>) => {\n    const descriptionId = useSlotId()\n    return (\n      <TextContextPrimitive.Provider\n        value={{ slots: { description: { id: descriptionId } } }}\n      >\n        <SliderPrimitive\n          ref={ref}\n          aria-describedby={descriptionId}\n          {...props}\n          className={composeRenderProps(props.className, (className) =>\n            root({ className })\n          )}\n        />\n      </TextContextPrimitive.Provider>\n    )\n  }\n)\nSliderRoot.displayName = 'SliderRoot'\n\ntype SliderControlsProps = SliderTrackProps & VariantProps<typeof sliderStyles>\nconst SliderControls = (props: SliderControlsProps) => {\n  const { values } = React.useContext(SliderStateContextPrimitive)\n  return (\n    <SliderTrack {...props}>\n      <SliderFiller />\n      {values.map((_, i) => (\n        <SliderThumb key={i} index={i} />\n      ))}\n    </SliderTrack>\n  )\n}\n\ntype SliderTrackProps = SliderTrackPrimitiveProps & VariantProps<typeof sliderStyles>\nconst SliderTrack = (props: SliderTrackProps) => {\n  const { track } = sliderStyles()\n  return (\n    <SliderTrackPrimitive\n      {...props}\n      className={composeRenderProps(props.className, (className) => track({ className }))}\n    />\n  )\n}\n\ntype SliderFillerProps = React.HTMLAttributes<HTMLDivElement>\nconst SliderFiller = (props: SliderFillerProps) => {\n  const { orientation, getThumbPercent, values } = React.useContext(\n    SliderStateContextPrimitive\n  )\n  return (\n    <div\n      {...props}\n      style={\n        values.length === 1\n          ? orientation === 'horizontal'\n            ? {\n                width: `${getThumbPercent(0) * 100}%`\n              }\n            : { height: `${getThumbPercent(0) * 100}%` }\n          : orientation === 'horizontal'\n            ? {\n                left: `${getThumbPercent(0) * 100}%`,\n                width: `${Math.abs(getThumbPercent(0) - getThumbPercent(1)) * 100}%`\n              }\n            : {\n                bottom: `${getThumbPercent(0) * 100}%`,\n                height: `${Math.abs(getThumbPercent(0) - getThumbPercent(1)) * 100}%`\n              }\n      }\n      className={filler({ className: props.className })}\n    />\n  )\n}\n\ntype SliderThumbProps = SliderThumbPrimitiveProps & VariantProps<typeof sliderStyles>\nconst SliderThumb = (props: SliderThumbProps) => {\n  return (\n    <SliderThumbPrimitive\n      {...props}\n      className={composeRenderProps(props.className, (className) => thumb({ className }))}\n    />\n  )\n}\n\ntype SliderValueLabelProps = SliderOutputPrimitiveProps\nconst SliderValueLabel = (props: SliderValueLabelProps) => {\n  const { valueLabel } = sliderStyles()\n  return (\n    <SliderOutputPrimitive\n      {...props}\n      className={composeRenderProps(props.className, (className) =>\n        valueLabel({ className })\n      )}\n    >\n      {composeRenderProps(\n        props.children,\n        (children, { state }) =>\n          children ?? state.values.map((_, i) => state.getThumbValueLabel(i)).join(' - ')\n      )}\n    </SliderOutputPrimitive>\n  )\n}\n\nexport {\n  Slider,\n  SliderControls,\n  SliderFiller,\n  SliderRoot,\n  SliderThumb,\n  SliderTrack,\n  SliderValueLabel\n}\n",
    "type": "ui"
  },
  "popover": {
    "component": "@/components/ui/popover",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport {\n  Button,\n  composeRenderProps,\n  DialogTrigger,\n  OverlayArrow,\n  Popover as PopoverPrimitive,\n  PopoverContext,\n  type PopoverProps as PopoverPrimitiveProps,\n  useSlottedContext\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport {\n  ModalBody,\n  ModalClose,\n  ModalDescription,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n  ModalTitle\n} from './modal'\n\nexport interface PopoverProps extends Omit<PopoverPrimitiveProps, 'children'> {\n  showArrow?: boolean\n  children: React.ReactNode\n}\n\nconst popoverContentStyles = tv({\n  base: 'max-w-xs rounded-xl border bg-popover bg-clip-padding p-4 text-popover-fg shadow-lg dark:backdrop-blur-2xl dark:backdrop-saturate-200 sm:max-w-3xl forced-colors:bg-[Canvas]',\n  variants: {\n    isEntering: {\n      true: 'duration-200 ease-out animate-in fade-in placement-left:slide-in-from-right-1 placement-right:slide-in-from-left-1 placement-top:slide-in-from-bottom-1 placement-bottom:slide-in-from-top-1'\n    },\n    isExiting: {\n      true: 'duration-150 ease-in animate-out fade-out placement-left:slide-out-to-right-1 placement-right:slide-out-to-left-1 placement-top:slide-out-to-bottom-1 placement-bottom:slide-out-to-top-1'\n    }\n  }\n})\n\nconst Popover = DialogTrigger\nconst PopoverTrigger = Button\nconst PopoverClose = ModalClose\nconst PopoverOverlay = ModalOverlay\nconst PopoverFooter = ModalFooter\nconst PopoverHeader = ModalHeader\nconst PopoverTitle = ModalTitle\nconst PopoverDescription = ModalDescription\nconst PopoverBody = ModalBody\n\nconst PopoverContent = ({\n  children,\n  showArrow = true,\n  className,\n  ...props\n}: PopoverProps) => {\n  const popoverContext = useSlottedContext(PopoverContext)!\n  const isSubmenu = popoverContext?.trigger === 'SubmenuTrigger'\n  let offset = showArrow ? 12 : 8\n  offset = isSubmenu ? offset - 6 : offset\n  return (\n    <PopoverPrimitive\n      offset={offset}\n      {...props}\n      className={composeRenderProps(className, (className, renderProps) =>\n        popoverContentStyles({ ...renderProps, className })\n      )}\n    >\n      {showArrow && (\n        <OverlayArrow className=\"group\">\n          <svg\n            width={12}\n            height={12}\n            viewBox=\"0 0 12 12\"\n            className=\"block fill-popover stroke-border group-placement-left:-rotate-90 group-placement-right:rotate-90 group-placement-bottom:rotate-180 forced-colors:fill-[Canvas] forced-colors:stroke-[ButtonBorder]\"\n          >\n            <path d=\"M0 0 L6 6 L12 0\" />\n          </svg>\n        </OverlayArrow>\n      )}\n      {children}\n    </PopoverPrimitive>\n  )\n}\n\nconst PopoverPicker = ({ showArrow = false, children, ...props }: PopoverProps) => {\n  return (\n    <PopoverContent\n      showArrow={showArrow}\n      className=\"max-h-72 overflow-y-auto min-w-[--trigger-width] p-0\"\n      {...props}\n    >\n      {children}\n    </PopoverContent>\n  )\n}\n\nconst PopoverContentPrimitive = PopoverPrimitive\n\nexport {\n  Popover,\n  PopoverBody,\n  PopoverClose,\n  PopoverContent,\n  PopoverContentPrimitive,\n  PopoverDescription,\n  PopoverFooter,\n  PopoverHeader,\n  PopoverOverlay,\n  PopoverPicker,\n  PopoverTitle,\n  PopoverTrigger\n}\n",
    "type": "ui"
  },
  "text-field": {
    "component": "@/components/ui/text-field",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { IconLoader } from '@irsyadadl/paranoid'\nimport {\n  TextField as TextFieldPrimitive,\n  type TextFieldProps as TextFieldPrimitiveProps,\n  type ValidationResult\n} from 'react-aria-components'\n\nimport {\n  Description,\n  FieldError,\n  FieldGroup,\n  fieldGroupPrefixStyles,\n  Input,\n  Label\n} from './field'\nimport { ctr } from './primitive'\n\ninterface TextFieldProps extends TextFieldPrimitiveProps {\n  label?: string\n  placeholder?: string\n  description?: string\n  errorMessage?: string | ((validation: ValidationResult) => string)\n  prefix?: React.ReactNode\n  suffix?: React.ReactNode\n  isLoading?: boolean\n  indicatorPlace?: 'prefix' | 'suffix'\n}\n\nconst TextField = ({\n  label,\n  description,\n  errorMessage,\n  placeholder,\n  prefix,\n  suffix,\n  isLoading,\n  indicatorPlace,\n  ...props\n}: TextFieldProps) => {\n  return (\n    <TextFieldPrimitive\n      {...props}\n      className={ctr(props.className, 'group flex flex-col gap-1')}\n    >\n      {label && <Label id=\"x21z-id\">{label}</Label>}\n      <FieldGroup\n        aria-labelledby={label ? 'x21z-id' : undefined}\n        data-loading={isLoading ? 'true' : undefined}\n        className={fieldGroupPrefixStyles()}\n      >\n        {isLoading && indicatorPlace === 'prefix' ? (\n          <IconLoader className=\"animate-spin isPfx\" />\n        ) : prefix ? (\n          <span className=\"atrs isPfx x2e2\">{prefix}</span>\n        ) : null}\n        <Input className=\"px-2.5\" placeholder={placeholder} />\n        {isLoading && indicatorPlace === 'suffix' ? (\n          <IconLoader className=\"animate-spin isSfx\" />\n        ) : suffix ? (\n          <span className=\"atrs isSfx x2e2\">{suffix}</span>\n        ) : null}\n      </FieldGroup>\n      {description && <Description>{description}</Description>}\n      <FieldError>{errorMessage}</FieldError>\n    </TextFieldPrimitive>\n  )\n}\n\nexport { TextField, TextFieldPrimitive, type TextFieldProps }\n",
    "type": "ui"
  },
  "radio": {
    "component": "@/components/ui/radio",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport {\n  Radio as RadioPrimitive,\n  RadioGroup as RadioGroupPrimitive,\n  type RadioGroupProps as RACRadioGroupProps,\n  type RadioProps,\n  type ValidationResult\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { Description, FieldError, Label } from './field'\nimport { ctr } from './primitive'\n\ninterface RadioGroupProps extends Omit<RACRadioGroupProps, 'children'> {\n  label?: string\n  children?: React.ReactNode\n  description?: string\n  errorMessage?: string | ((validation: ValidationResult) => string)\n}\n\nconst RadioGroup = (props: RadioGroupProps) => {\n  return (\n    <RadioGroupPrimitive\n      {...props}\n      className={ctr(props.className, 'group flex flex-col gap-2')}\n    >\n      <Label>{props.label}</Label>\n      <div className=\"flex gap-2 group-orientation-horizontal:gap-4 group-orientation-vertical:flex-col\">\n        {props.children}\n      </div>\n      {props.description && <Description>{props.description}</Description>}\n      <FieldError>{props.errorMessage}</FieldError>\n    </RadioGroupPrimitive>\n  )\n}\n\nconst radioStyles = tv({\n  base: 'size-4 rounded-full border bg-secondary transition',\n  variants: {\n    isSelected: {\n      false: 'border-toggle',\n      true: 'border-[4.5px] border-primary'\n    },\n    isFocused: {\n      true: [\n        'border-primary bg-primary/20 ring-4 ring-primary/20',\n        'group-invalid:border-danger/70 group-invalid:bg-danger/20 group-invalid:ring-danger/20'\n      ]\n    },\n    isInvalid: {\n      true: 'border-danger/70 bg-danger/20'\n    },\n    isDisabled: {\n      true: 'opacity-50'\n    }\n  }\n})\n\nconst Radio = (props: RadioProps) => {\n  return (\n    <RadioPrimitive\n      {...props}\n      className={ctr(\n        props.className,\n        'group flex items-center gap-2 text-sm text-fg transition disabled:text-fg/50 forced-colors:disabled:text-[GrayText]'\n      )}\n    >\n      {(renderProps) => (\n        <>\n          <div className={radioStyles(renderProps)} />\n          {props.children}\n        </>\n      )}\n    </RadioPrimitive>\n  )\n}\n\nexport { Radio, RadioGroup, radioStyles }\n",
    "type": "ui"
  },
  "date-field": {
    "component": "@/components/ui/date-field",
    "raw": "'use client'\n\nimport {\n  composeRenderProps,\n  DateField as DateFieldPrimitive,\n  type DateFieldProps as DateFieldPrimitiveProps,\n  DateInput as DateInputPrimitive,\n  type DateInputProps,\n  DateSegment,\n  type DateValue,\n  type ValidationResult\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { Description, FieldError, fieldGroupStyles, Label } from './field'\nimport { cn, ctr } from './primitive'\n\ninterface DateFieldProps<T extends DateValue> extends DateFieldPrimitiveProps<T> {\n  label?: string\n  description?: string\n  errorMessage?: string | ((validation: ValidationResult) => string)\n}\n\nconst DateField = <T extends DateValue>({\n  label,\n  description,\n  errorMessage,\n  ...props\n}: DateFieldProps<T>) => {\n  return (\n    <DateFieldPrimitive\n      {...props}\n      className={ctr(props.className, 'flex flex-col gap-1')}\n    >\n      {label && <Label>{label}</Label>}\n      <DateInput />\n      {description && <Description>{description}</Description>}\n      <FieldError>{errorMessage}</FieldError>\n    </DateFieldPrimitive>\n  )\n}\n\nconst segmentStyles = tv({\n  base: 'inline rounded p-0.5 tracking-wider text-fg caret-transparent outline outline-0 forced-color-adjust-none type-literal:px-0 lg:text-sm forced-colors:text-[ButtonText]',\n  variants: {\n    isPlaceholder: {\n      true: 'text-muted-fg'\n    },\n    isDisabled: {\n      true: 'text-fg/50 forced-colors:text-[GrayText]'\n    },\n    isFocused: {\n      true: [\n        'bg-primary text-primary-fg forced-colors:bg-[Highlight] forced-colors:text-[HighlightText]',\n        'invalid:bg-danger invalid:text-danger-fg'\n      ]\n    }\n    // isInvalid: {\n    //   true: 'bg-danger text-danger-fg'\n    // }\n  }\n})\n\nconst DateInput = (props: Omit<DateInputProps, 'children'>) => {\n  return (\n    <DateInputPrimitive\n      className={composeRenderProps(props.className, (className, renderProps) =>\n        fieldGroupStyles({\n          ...renderProps,\n          className: cn(\n            'min-w-sm block font-mono disabled:bg-secondary uppercase w-full py-2 px-2 text-base lg:text-sm',\n            className\n          )\n        })\n      )}\n      {...props}\n    >\n      {(segment) => <DateSegment segment={segment} className={segmentStyles} />}\n    </DateInputPrimitive>\n  )\n}\n\nexport { DateField, DateInput, segmentStyles, type DateFieldProps }\n",
    "type": "ui"
  },
  "primitive": {
    "component": "@/components/ui/primitive",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { type ClassValue, clsx } from 'clsx'\nimport { composeRenderProps } from 'react-aria-components'\nimport { twMerge } from 'tailwind-merge'\nimport { tv } from 'tailwind-variants'\n\nconst cn = (...inputs: ClassValue[]) => twMerge(clsx(inputs))\n\nfunction composeTailwindRenderProps<T>(\n  className: string | ((v: T) => string) | undefined,\n  tw: string\n): string | ((v: T) => string) {\n  return composeRenderProps(className, (className) => twMerge(tw, className))\n}\n\nconst focusRing = tv({\n  base: 'outline-none focus:outline-none forced-colors:outline-[Highlight]',\n  variants: {\n    isFocused: { false: 'ring-0', true: 'ring-4 ring-primary/20' },\n    isInvalid: { true: 'ring-4 ring-danger/20' }\n  }\n})\n\nconst focusStyles = tv({\n  extend: focusRing,\n  variants: {\n    isFocused: { true: 'border-primary' },\n    isInvalid: { true: 'border-danger' }\n  }\n})\n\nfunction pickBy<T extends object>(\n  object: T,\n  predicate: (value: T[keyof T], key: keyof T) => boolean = (value) =>\n    value !== undefined && value !== ''\n): Partial<T> {\n  return Object.keys(object).reduce((acc: Partial<T>, key: string) => {\n    const typedKey = key as keyof T\n    if (predicate(object[typedKey], typedKey)) {\n      acc[typedKey] = object[typedKey]\n    }\n    return acc\n  }, {})\n}\n\nfunction useMediaQuery(query: string) {\n  const [value, setValue] = React.useState(false)\n\n  React.useEffect(() => {\n    function onChange(event: MediaQueryListEvent) {\n      setValue(event.matches)\n    }\n\n    const result = matchMedia(query)\n    result.addEventListener('change', onChange)\n    setValue(result.matches)\n\n    return () => result.removeEventListener('change', onChange)\n  }, [query])\n\n  return value\n}\n\nconst ctr = composeTailwindRenderProps\nconst tm = twMerge\nconst cr = composeRenderProps\n\nexport {\n  cn,\n  composeTailwindRenderProps,\n  cr,\n  ctr,\n  focusRing,\n  focusStyles,\n  pickBy,\n  tm,\n  twMerge,\n  useMediaQuery\n}\n",
    "type": "ui"
  },
  "visually-hidden": {
    "component": "@/components/ui/visually-hidden",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { useVisuallyHidden } from 'react-aria'\n\ntype VisuallyHiddenSpanProps = {\n  children: React.ReactNode\n}\n\nconst VisuallyHidden = ({ children }: VisuallyHiddenSpanProps) => {\n  const { visuallyHiddenProps } = useVisuallyHidden()\n\n  return <span {...visuallyHiddenProps}>{children}</span>\n}\n\nexport { VisuallyHidden }\n",
    "type": "ui"
  },
  "date-picker": {
    "component": "@/components/ui/date-picker",
    "raw": "'use client'\n\nimport { IconCalendar } from '@irsyadadl/paranoid'\nimport {\n  DatePicker as DatePickerPrimitive,\n  type DatePickerProps as DatePickerPrimitiveProps,\n  DateRangePicker as DateRangePickerPrimitive,\n  type DateRangePickerProps as DateRangePickerPrimitiveProps,\n  type DateValue,\n  type ValidationResult\n} from 'react-aria-components'\n\nimport { Button } from './button'\nimport { Calendar, RangeCalendar } from './calendar'\nimport { DateInput } from './date-field'\nimport { Dialog } from './dialog'\nimport { DynamicOverlay } from './dynamic-overlay'\nimport { Description, FieldError, FieldGroup, Label } from './field'\nimport { ctr } from './primitive'\n\ninterface DatePickerProps<T extends DateValue> extends DatePickerPrimitiveProps<T> {\n  label?: string\n  description?: string\n  errorMessage?: string | ((validation: ValidationResult) => string)\n}\n\nfunction DatePicker<T extends DateValue>({\n  label,\n  description,\n  errorMessage,\n  ...props\n}: DatePickerProps<T>) {\n  return (\n    <DatePickerPrimitive\n      {...props}\n      className={ctr(props.className, 'group flex flex-col gap-1')}\n    >\n      {label && <Label>{label}</Label>}\n      <FieldGroup className=\"min-w-40\">\n        <DateInput className=\"w-full px-2 font-mono uppercase min-w-[inherit] text-base lg:text-sm\" />\n        <Button\n          size=\"square-petite\"\n          appearance=\"plain\"\n          className=\"group mr-1 h-7 w-8 rounded outline-offset-0 hover:bg-transparent pressed:bg-transparent\"\n        >\n          <IconCalendar aria-hidden className=\"size-4 text-muted-fg group-open:text-fg\" />\n        </Button>\n      </FieldGroup>\n      {description && <Description>{description}</Description>}\n      <FieldError>{errorMessage}</FieldError>\n      <DynamicOverlay className=\"p-0 grid\">\n        <Dialog>\n          <Calendar />\n        </Dialog>\n      </DynamicOverlay>\n    </DatePickerPrimitive>\n  )\n}\n\ninterface DateRangePickerProps<T extends DateValue>\n  extends DateRangePickerPrimitiveProps<T> {\n  label?: string\n  description?: string\n  errorMessage?: string | ((validation: ValidationResult) => string)\n}\n\nfunction DateRangePicker<T extends DateValue>({\n  label,\n  description,\n  errorMessage,\n  ...props\n}: DateRangePickerProps<T>) {\n  return (\n    <DateRangePickerPrimitive\n      {...props}\n      className={ctr(props.className, 'group flex flex-col gap-1')}\n    >\n      {label && <Label>{label}</Label>}\n      <FieldGroup className=\"w-auto min-w-[208px]\">\n        <DateInput\n          slot=\"start\"\n          className=\"px-2 lg:text-sm font-mono uppercase text-base min-w-[ineherit]\"\n        />\n        <span\n          aria-hidden=\"true\"\n          className=\"text-gray-800 group-disabled:text-gray-200 dark:text-zinc-200 group-disabled:dark:text-zinc-600 forced-colors:text-[ButtonText] group-disabled:forced-colors:text-[GrayText]\"\n        >\n          –\n        </span>\n        <DateInput\n          slot=\"end\"\n          className=\"flex-1 px-2 py-1.5 font-mono uppercase text-base lg:text-sm\"\n        />\n        <Button\n          size=\"square-petite\"\n          appearance=\"plain\"\n          className=\"group mr-1 h-7 w-8 rounded outline-offset-0 hover:bg-transparent pressed:bg-transparent\"\n        >\n          <IconCalendar aria-hidden className=\"size-4 text-muted-fg group-open:text-fg\" />\n        </Button>\n      </FieldGroup>\n      {description && <Description>{description}</Description>}\n      <FieldError>{errorMessage}</FieldError>\n      <DynamicOverlay className=\"p-0 grid\">\n        <Dialog>\n          <RangeCalendar />\n        </Dialog>\n      </DynamicOverlay>\n    </DateRangePickerPrimitive>\n  )\n}\n\nexport {\n  DatePicker,\n  DateRangePicker,\n  type DatePickerProps,\n  type DateRangePickerProps,\n  type DateValue,\n  type ValidationResult\n}\n",
    "type": "ui"
  },
  "toaster": {
    "component": "@/components/ui/toaster",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { useTheme } from 'next-themes'\nimport { Toaster as ToasterPrimitive, type ToasterProps } from 'sonner'\nimport { twJoin } from 'tailwind-merge'\n\nimport { buttonStyles } from './button'\n\nconst Toaster = ({ ...props }: ToasterProps) => {\n  const { theme = 'system' } = useTheme()\n  return (\n    <ToasterPrimitive\n      theme={theme as ToasterProps['theme']}\n      className=\"toaster group\"\n      toastOptions={{\n        unstyled: true,\n        closeButton: true,\n        classNames: {\n          toast: twJoin(\n            'bg-background ring-1 min-w-[22rem] ring-border rounded-xl text-fg overflow-hidden text-[0.925rem] backdrop-blur-xl px-4 py-3 font-normal sm:px-4 sm:py-5',\n            '[&:has([data-button])_[data-close-button=\"true\"]]:hidden',\n            '[&:not([data-description])_[data-title]]:font-normal',\n            '[&:has([data-description])_[data-title]]:!font-medium',\n            '[&>[data-button]]:absolute [&>[data-button=true]]:bottom-4',\n            '[&>[data-action=true]]:right-4',\n            '[&>[data-cancel=true]]:left-4'\n          ),\n          icon: 'hidden',\n          content:\n            '[&:not(:has(+button))]:pr-10 [&:has(+button)]:pb-11 md:[&:has(+button)]:pb-9',\n          error:\n            'ring-red-500/20 dark:ring-red-500/20 bg-danger/10 dark:text-red-50 text-red-950 dark:ring-inset',\n          success:\n            'ring-emerald-500/30 dark:ring-emerald-500/20 bg-success/10 dark:text-emerald-50 text-emerald-950 dark:ring-inset',\n          warning:\n            '!ring-amber-500/25 dark:!ring-amber-500/20 bg-warning/10 dark:text-amber-50 text-amber-950 dark:ring-inset',\n          info: 'ring-lime-500/30 dark:ring-lime-500/20 bg-lime-500/10 dark:text-lime-50 text-lime-950 dark:ring-inset',\n          cancelButton: buttonStyles({\n            className: '',\n            size: 'extra-small',\n            appearance: 'outline'\n          }),\n          actionButton: buttonStyles({\n            className: 'self-end justify-self-end',\n            size: 'extra-small'\n          }),\n          closeButton:\n            '[&_svg]:size-5 size-8 absolute top-1/2 transform -translate-y-1/2 right-2 lg:right-4 left-auto grid place-content-center rounded-md hover:bg-black/20 dark:hover:bg-white/20 border-0 [&_svg]:text-fg'\n        }\n      }}\n      {...props}\n    />\n  )\n}\n\nexport { Toaster }\n",
    "type": "ui"
  },
  "container": {
    "component": "@/components/ui/container",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { cn } from './primitive'\n\nconst Container = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(\n  ({ className, ...props }, ref) => (\n    <div\n      className={cn('mx-auto max-w-7xl px-4 sm:px-6 lg:px-8', className)}\n      {...props}\n      ref={ref}\n    />\n  )\n)\nContainer.displayName = 'Container'\n\nexport { Container }\n",
    "type": "ui"
  },
  "input-otp": {
    "component": "@/components/ui/input-otp",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { IconBulletFill } from '@irsyadadl/paranoid'\nimport { OTPInput, OTPInputContext } from 'input-otp'\n\nimport { cn } from './primitive'\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    data-1p-ignore\n    ref={ref}\n    containerClassName={cn(\n      'flex items-center gap-2 has-[:disabled]:opacity-50',\n      containerClassName\n    )}\n    className={cn('disabled:cursor-not-allowed', className)}\n    {...props}\n  />\n))\nInputOTP.displayName = 'InputOTP'\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<'div'>,\n  React.ComponentPropsWithoutRef<'div'>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn('flex items-center gap-x-1.5', className)} {...props} />\n))\nInputOTPGroup.displayName = 'InputOTPGroup'\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<'div'>,\n  React.ComponentPropsWithoutRef<'div'> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        'relative flex size-10 items-center justify-center rounded-md border border-input text-sm transition-all',\n        isActive && 'z-10 border-primary/70 ring-4 ring-primary/20',\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-fg duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = 'InputOTPSlot'\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<'div'>,\n  React.ComponentPropsWithoutRef<'div'>\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <IconBulletFill className=\"size-2\" />\n  </div>\n))\nInputOTPSeparator.displayName = 'InputOTPSeparator'\n\nexport { InputOTP, InputOTPGroup, InputOTPSeparator, InputOTPSlot }\n",
    "type": "ui"
  },
  "tag-group": {
    "component": "@/components/ui/tag-group",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { IconX } from '@irsyadadl/paranoid'\nimport {\n  Button,\n  composeRenderProps,\n  Tag as TagPrimitive,\n  TagGroup as TagGroupPrimitive,\n  type TagGroupProps as TagGroupPrimitiveProps,\n  TagList,\n  type TagListProps,\n  type TagProps as TagPrimitiveProps,\n  Text\n} from 'react-aria-components'\nimport { twMerge } from 'tailwind-merge'\nimport { tv } from 'tailwind-variants'\n\nimport { badgeIntents, badgeStyles } from './badge'\nimport { Description, Label } from './field'\nimport { cn, focusRing } from './primitive'\n\ntype Intent = keyof typeof badgeIntents\nconst IntentContext = React.createContext<Intent>('primary')\n\nconst emptyColors = Object.keys(badgeIntents).reduce(\n  (acc, key) => {\n    acc[key] = ''\n    return acc\n  },\n  {} as Record<string, string>\n)\nconst tagStyles = tv({\n  base: [\n    badgeStyles.base,\n    'cursor-pointer focus:outline-none select-none disabled:cursor-default'\n  ],\n  variants: {\n    intent: {\n      ...emptyColors\n    },\n    shape: {\n      ...badgeStyles.variants.shape\n    },\n    allowsRemoving: {\n      true: 'pr-1'\n    },\n    isSelected: {\n      true: 'border-transparent bg-primary-600 text-white forced-color-adjust-none forced-badgeIntents:bg-[Highlight] forced-badgeIntents:text-[HighlightText]'\n    },\n    isDisabled: {\n      true: 'opacity-60 forced-badgeIntents:text-[GrayText]'\n    }\n  },\n\n  defaultVariants: {\n    shape: 'square'\n  },\n  compoundVariants: (Object.keys(badgeIntents) as Intent[]).map((intent) => ({\n    isSelected: false,\n    intent,\n    className: badgeIntents[intent]\n  }))\n})\n\nexport interface TagGroupProps<T>\n  extends Omit<TagGroupPrimitiveProps, 'children'>,\n    Pick<TagListProps<T>, 'items' | 'children' | 'renderEmptyState'> {\n  intent?: Intent\n  label?: string\n  description?: string\n  errorMessage?: string\n}\n\nexport interface TagProps extends TagPrimitiveProps {\n  intent?: Intent\n}\n\nexport function TagGroup<T extends object>({\n  label,\n  description,\n  errorMessage,\n  items,\n  children,\n  renderEmptyState,\n  ...props\n}: TagGroupProps<T>) {\n  return (\n    <TagGroupPrimitive\n      {...props}\n      className={twMerge('flex flex-col gap-1', props.className)}\n    >\n      <Label>{label}</Label>\n      <IntentContext.Provider value={props.intent || 'primary'}>\n        <TagList\n          items={items}\n          renderEmptyState={renderEmptyState}\n          className=\"flex flex-wrap gap-1\"\n        >\n          {children}\n        </TagList>\n      </IntentContext.Provider>\n      {description && <Description>{description}</Description>}\n      {errorMessage && (\n        <Text slot=\"errorMessage\" className=\"text-sm text-danger\">\n          {errorMessage}\n        </Text>\n      )}\n    </TagGroupPrimitive>\n  )\n}\n\nconst removeButtonStyles = tv({\n  extend: focusRing,\n  base: 'flex cursor-default items-center justify-center rounded-full p-0.5 transition-[background-color] hover:bg-black/10 pressed:bg-black/20 dark:hover:bg-white/10 dark:pressed:bg-white/20'\n})\n\nexport function Tag({ children, intent, ...props }: TagProps) {\n  const textValue = typeof children === 'string' ? children : undefined\n  const groupIntent = React.useContext(IntentContext)\n  return (\n    <TagPrimitive\n      textValue={textValue}\n      {...props}\n      className={composeRenderProps(props.className, (className, renderProps) =>\n        tagStyles({\n          ...renderProps,\n          className: cn(\n            'href' in props ? '' : 'focus:ring-1 focus:ring-primary-400',\n            className\n          ),\n          intent: intent || groupIntent\n        })\n      )}\n    >\n      {({ allowsRemoving }) => (\n        <>\n          {children}\n          {allowsRemoving && (\n            <Button slot=\"remove\" className={removeButtonStyles}>\n              <IconX aria-hidden className=\"h-3 w-3\" />\n            </Button>\n          )}\n        </>\n      )}\n    </TagPrimitive>\n  )\n}\n",
    "type": "ui"
  },
  "sheet": {
    "component": "@/components/ui/sheet",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport {\n  Button,\n  type DialogProps,\n  DialogTrigger as DialogTriggerPrimitive,\n  Modal,\n  ModalOverlay,\n  type ModalOverlayProps\n} from 'react-aria-components'\nimport { tv, type VariantProps } from 'tailwind-variants'\n\nimport { Dialog } from './dialog'\nimport {\n  CloseButtonIndicator,\n  ModalClose,\n  ModalDescription,\n  ModalFooter,\n  ModalHeader,\n  ModalTitle\n} from './modal'\nimport { cn } from './primitive'\n\nconst Sheet = DialogTriggerPrimitive\nconst SheetTrigger = Button\nconst SheetClose = ModalClose\nconst SheetFooter = ModalFooter\nconst SheetHeader = ModalHeader\nconst SheetTitle = ModalTitle\nconst SheetDescription = ModalDescription\n\nconst generateCompoundVariants = (sides: Array<'top' | 'bottom' | 'left' | 'right'>) => {\n  return sides.map((side) => ({\n    side,\n    isStack: true,\n    className:\n      side === 'top'\n        ? 'top-2 inset-x-2 rounded-lg border'\n        : side === 'bottom'\n          ? 'bottom-2 inset-x-2 rounded-lg border'\n          : side === 'left'\n            ? 'left-2 inset-y-2 rounded-lg border'\n            : 'right-2 inset-y-2 rounded-lg border'\n  }))\n}\n\nconst sheetStyles = tv({\n  base: 'fixed z-50 grid gap-4 bg-popover text-popover-fg shadow-lg transition ease-in-out entering:duration-300 entering:animate-in exiting:duration-200 exiting:animate-out',\n  variants: {\n    side: {\n      top: 'inset-x-0 top-0 rounded-b-2xl border-b entering:slide-in-from-top exiting:slide-out-to-top',\n      bottom:\n        'inset-x-0 bottom-0 rounded-t-2xl border-t entering:slide-in-from-bottom exiting:slide-out-to-bottom',\n      left: 'inset-y-0 left-0 h-auto w-72 sm:w-3/4 overflow-y-auto border-r entering:slide-in-from-left exiting:slide-out-to-left sm:max-w-xs',\n      right:\n        'inset-y-0 right-0 h-auto w-72 sm:w-3/4 overflow-y-auto border-l entering:slide-in-from-right exiting:slide-out-to-right sm:max-w-xs'\n    },\n    isStack: {\n      true: '',\n      false: ''\n    }\n  },\n  compoundVariants: generateCompoundVariants(['top', 'bottom', 'left', 'right'])\n})\n\nconst SheetOverlay = ({\n  className,\n  isDismissable = true,\n  ...props\n}: ModalOverlayProps) => (\n  <ModalOverlay\n    isDismissable={isDismissable}\n    className={(values) =>\n      cn(\n        'fixed inset-0 z-50 bg-black/50 entering:animate-in entering:fade-in-0 exiting:duration-300 exiting:animate-out exiting:fade-out-0',\n        typeof className === 'function' ? className(values) : className\n      )\n    }\n    {...props}\n  />\n)\n\nexport interface SheetContentProps\n  extends Omit<React.ComponentProps<typeof Modal>, 'children'>,\n    VariantProps<typeof sheetStyles> {\n  children?: DialogProps['children']\n  role?: DialogProps['role']\n  closeButton?: boolean\n  className?: string\n  isStack?: boolean\n}\n\nconst SheetContent = ({\n  className,\n  children,\n  side = 'right',\n  role,\n  closeButton = true,\n  isStack = true,\n  ...props\n}: SheetContentProps) => {\n  return (\n    <Modal className={sheetStyles({ side, isStack, className })} {...props}>\n      <Dialog aria-label=\"Sheet\" role={role} className=\"h-full outline-none\">\n        {(values) => (\n          <>\n            {typeof children === 'function' ? children(values) : children}\n            {closeButton && (\n              <CloseButtonIndicator className=\"top-2.5 right-2.5\" close={values.close} />\n            )}\n          </>\n        )}\n      </Dialog>\n    </Modal>\n  )\n}\n\nexport {\n  Sheet,\n  SheetClose,\n  SheetContent,\n  SheetDescription,\n  SheetFooter,\n  SheetHeader,\n  SheetOverlay,\n  SheetTitle,\n  SheetTrigger\n}\n",
    "type": "ui"
  },
  "field": {
    "component": "@/components/ui/field",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport {\n  composeRenderProps,\n  FieldError as FieldErrorPrimitive,\n  type FieldErrorProps,\n  Group,\n  type GroupProps,\n  Input as InputPrimitive,\n  type InputProps,\n  Label as LabelPrimitive,\n  type LabelProps,\n  Text,\n  type TextProps\n} from 'react-aria-components'\nimport { twMerge } from 'tailwind-merge'\nimport { tv } from 'tailwind-variants'\n\nimport { ctr } from './primitive'\n\nconst fieldBorderStyles = tv({\n  base: 'group-focus-within:border-primary forced-colors:border-[Highlight]',\n  variants: {\n    isInvalid: {\n      true: 'border-danger/70 group-focus-within:border-danger/70 forced-colors:border-[Mark]'\n    }\n  }\n})\n\nconst Label = (props: LabelProps) => {\n  return (\n    <LabelPrimitive\n      {...props}\n      className={twMerge(\n        'w-fit cursor-default font-medium text-secondary-fg text-sm',\n        props.className\n      )}\n    />\n  )\n}\n\nconst Description = (props: TextProps) => {\n  return (\n    <Text\n      {...props}\n      slot=\"description\"\n      className={twMerge('text-sm text-muted-fg', props.className)}\n    />\n  )\n}\n\nconst FieldError = (props: FieldErrorProps) => {\n  return (\n    <FieldErrorPrimitive\n      {...props}\n      className={ctr(props.className, 'text-sm text-danger forced-colors:text-[Mark]')}\n    />\n  )\n}\n\nconst fieldGroupStyles = tv({\n  base: [\n    'group flex h-10 items-center overflow-hidden rounded-lg border border-input bg-background transition disabled:opacity-50 disabled:bg-secondary forced-colors:bg-[Field]',\n    'focus-within:border-primary focus-within:ring-4 focus-within:ring-primary/20',\n    'focus-within:invalid:border-danger focus-within:invalid:ring-4 focus-within:invalid:ring-danger/20',\n    'invalid:border-danger',\n    'has-[.isPfx]:pl-2.5 has-[.isSfx]:pr-2.5 [&_[data-slot=icon]]:size-4 has-[.atrs]:shrink-0 has-[.atrs]:text-muted-fg'\n  ]\n})\n\nconst fieldGroupPrefixStyles = tv({\n  base: [\n    'flex group-invalid:border-danger group-disabled:bg-secondary group-disabled:opacity-50 items-center group-invalid:focus-within:ring-danger/20',\n\n    '[&>.x2e2>.kbt32x]:size-7 [&>.x2e2>.kbt32x]:rounded-sm [&>.x2e2:has(.kbt32x)]:size-9 [&>.x2e2:has(.kbt32x)]:grid [&>.x2e2:has(.kbt32x)]:place-items-center',\n    '[&>.x2e2>.kbt32x]:before:rounded-[calc(theme(borderRadius.sm)-1px)] [&>.x2e2>.kbt32x]:after:rounded-[calc(theme(borderRadius.sm)-1px)] dark:[&>.x2e2>.kbt32x]:after:rounded-sm',\n\n    '[&>.isSfx:has(.kbt32x)]:-mr-2 [&>.isPfx:has(.kbt32x)]:-ml-2 [&>.isSfx>.kbt32x]:mr-0.5 [&>.isPfx>.kbt32x]:ml-0.5'\n  ]\n})\n\nconst FieldGroup = (props: GroupProps) => {\n  return (\n    <Group\n      {...props}\n      className={composeRenderProps(props.className, (className, renderProps) =>\n        fieldGroupStyles({ ...renderProps, className })\n      )}\n    />\n  )\n}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>((props, ref) => {\n  return (\n    <InputPrimitive\n      ref={ref}\n      {...props}\n      className={ctr(\n        props.className,\n        'w-full min-w-0 bg-transparent p-2 text-base text-fg placeholder-muted-fg focus:outline-none lg:text-sm'\n      )}\n    />\n  )\n})\nInput.displayName = 'Input'\n\nexport {\n  Description,\n  fieldBorderStyles,\n  FieldError,\n  FieldGroup,\n  fieldGroupPrefixStyles,\n  fieldGroupStyles,\n  Input,\n  InputPrimitive,\n  Label\n}\n",
    "type": "ui"
  },
  "drop-zone": {
    "component": "@/components/ui/drop-zone",
    "raw": "'use client'\n\nimport { DropZone as DropPrimitiveZone, type DropZoneProps } from 'react-aria-components'\n\nimport { cn } from './primitive'\n\nconst DropZone = ({ className, ...props }: DropZoneProps) => (\n  <DropPrimitiveZone\n    className={(values) =>\n      cn(\n        'flex h-[150px] w-[300px] flex-col items-center justify-center gap-2 rounded-md border border-dashed text-sm data-[drop-target]:border-solid data-[drop-target]:border-primary data-[drop-target]:bg-accent',\n        typeof className === 'function' ? className(values) : className\n      )\n    }\n    {...props}\n  />\n)\n\nexport { DropZone }\n",
    "type": "ui"
  },
  "grid": {
    "component": "@/components/ui/grid",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport type { ListBoxItemProps, ListBoxProps } from 'react-aria-components'\nimport { ListBox, ListBoxItem } from 'react-aria-components'\nimport { tv, type VariantProps } from 'tailwind-variants'\n\nimport { cn } from './primitive'\n\nconst gridStyle = tv(\n  {\n    base: 'grid',\n    variants: {\n      // Columns\n      columns: {\n        1: 'grid-cols-1',\n        2: 'grid-cols-2',\n        3: 'grid-cols-3',\n        4: 'grid-cols-4',\n        5: 'grid-cols-5',\n        6: 'grid-cols-6',\n        7: 'grid-cols-7',\n        8: 'grid-cols-8',\n        9: 'grid-cols-9',\n        10: 'grid-cols-10',\n        11: 'grid-cols-11',\n        12: 'grid-cols-12'\n      },\n\n      // Rows\n      rows: {\n        1: 'grid-rows-1',\n        2: 'grid-rows-2',\n        3: 'grid-rows-3',\n        4: 'grid-rows-4',\n        5: 'grid-rows-5',\n        6: 'grid-rows-6',\n        7: 'grid-rows-7',\n        8: 'grid-rows-8',\n        9: 'grid-rows-9',\n        10: 'grid-rows-10',\n        11: 'grid-rows-11',\n        12: 'grid-rows-12'\n      },\n\n      // Flow\n      flow: {\n        row: 'grid-flow-row',\n        col: 'grid-flow-col',\n        rowDense: 'grid-flow-row-dense',\n        colDense: 'grid-flow-col-dense',\n        dense: 'grid-flow-dense'\n      },\n\n      // Gap\n      gap: {\n        0: 'gap-0',\n        0.5: 'gap-0.5',\n        1: 'gap-1',\n        1.5: 'gap-1.5',\n        2: 'gap-2',\n        2.5: 'gap-2.5',\n        3: 'gap-3',\n        3.5: 'gap-3.5',\n        4: 'gap-4',\n        5: 'gap-5',\n        6: 'gap-6',\n        7: 'gap-7',\n        8: 'gap-8',\n        9: 'gap-9',\n        10: 'gap-10',\n        11: 'gap-11',\n        12: 'gap-12',\n        14: 'gap-14',\n        16: 'gap-16',\n        20: 'gap-20',\n        24: 'gap-24'\n      },\n      gapX: {\n        0: 'gap-x-0',\n        0.5: 'gap-x-0.5',\n        1: 'gap-x-1',\n        1.5: 'gap-x-1.5',\n        2: 'gap-x-2',\n        2.5: 'gap-x-2.5',\n        3: 'gap-x-3',\n        3.5: 'gap-x-3.5',\n        4: 'gap-x-4',\n        5: 'gap-x-5',\n        6: 'gap-x-6',\n        7: 'gap-x-7',\n        8: 'gap-x-8',\n        9: 'gap-x-9',\n        10: 'gap-x-10',\n        11: 'gap-x-11',\n        12: 'gap-x-12',\n        14: 'gap-x-14',\n        16: 'gap-x-16',\n        20: 'gap-x-20',\n        24: 'gap-x-24'\n      },\n      gapY: {\n        0: 'gap-y-0',\n        0.5: 'gap-y-0.5',\n        1: 'gap-y-1',\n        1.5: 'gap-y-1.5',\n        2: 'gap-y-2',\n        2.5: 'gap-y-2.5',\n        3: 'gap-y-3',\n        3.5: 'gap-y-3.5',\n        4: 'gap-y-4',\n        5: 'gap-y-5',\n        6: 'gap-y-6',\n        7: 'gap-y-7',\n        8: 'gap-y-8',\n        9: 'gap-y-9',\n        10: 'gap-y-10',\n        11: 'gap-y-11',\n        12: 'gap-y-12',\n        14: 'gap-y-14',\n        16: 'gap-y-16',\n        20: 'gap-y-20',\n        24: 'gap-y-24'\n      }\n    },\n    defaultVariants: {\n      columns: 1\n    }\n  },\n  {\n    responsiveVariants: true\n  }\n)\n\ninterface GridProps<T> extends VariantProps<typeof gridStyle>, ListBoxProps<T> {\n  className?: string\n  debug?: boolean\n}\n\nconst Grid = <T extends object>({\n  className,\n  children,\n  gap,\n  gapX,\n  gapY,\n  flow,\n  columns,\n  rows,\n  ...props\n}: GridProps<T>) => {\n  return (\n    <ListBox\n      aria-label={props['aria-label'] || 'grid'}\n      orientation=\"horizontal\"\n      layout=\"grid\"\n      className={gridStyle({\n        gap: gap ?? gapX ?? gapY,\n        gapX: gapX ?? gap,\n        gapY: gapY ?? gap,\n        flow: flow ?? 'row',\n        columns: columns ?? 1,\n        rows: rows ?? 1,\n\n        className:\n          'debug' in props\n            ? cn('[&>.grid-cell]:border [&>.grid-cell]:border-warning', className)\n            : className\n      })}\n      {...props}\n    >\n      {children}\n    </ListBox>\n  )\n}\n\nconst gridItemStyles = tv(\n  {\n    base: 'grid-cell',\n    variants: {\n      colSpan: {\n        auto: 'col-auto',\n        1: 'col-span-1',\n        2: 'col-span-2',\n        3: 'col-span-3',\n        4: 'col-span-4',\n        5: 'col-span-5',\n        6: 'col-span-6',\n        7: 'col-span-7',\n        8: 'col-span-8',\n        9: 'col-span-9',\n        10: 'col-span-10',\n        11: 'col-span-11',\n        12: 'col-span-12',\n        full: 'col-span-full'\n      },\n      colStart: {\n        1: 'col-start-1',\n        2: 'col-start-2',\n        3: 'col-start-3',\n        4: 'col-start-4',\n        5: 'col-start-5',\n        6: 'col-start-6',\n        7: 'col-start-7',\n        8: 'col-start-8',\n        9: 'col-start-9',\n        10: 'col-start-10',\n        11: 'col-start-11',\n        12: 'col-start-12',\n        13: 'col-start-13',\n        auto: 'col-start-auto'\n      },\n      colEnd: {\n        1: 'col-end-1',\n        2: 'col-end-2',\n        3: 'col-end-3',\n        4: 'col-end-4',\n        5: 'col-end-5',\n        6: 'col-end-6',\n        7: 'col-end-7',\n        8: 'col-end-8',\n        9: 'col-end-9',\n        10: 'col-end-10',\n        11: 'col-end-11',\n        12: 'col-end-12',\n        13: 'col-end-13',\n        auto: 'col-end-auto'\n      },\n      rowSpan: {\n        auto: 'row-auto',\n        1: 'row-span-1',\n        2: 'row-span-2',\n        3: 'row-span-3',\n        4: 'row-span-4',\n        5: 'row-span-5',\n        6: 'row-span-6',\n        7: 'row-span-7',\n        8: 'row-span-8',\n        9: 'row-span-9',\n        10: 'row-span-10',\n        11: 'row-span-11',\n        12: 'row-span-12',\n        full: 'row-span-full'\n      },\n      rowStart: {\n        1: 'row-start-1',\n        2: 'row-start-2',\n        3: 'row-start-3',\n        4: 'row-start-4',\n        5: 'row-start-5',\n        6: 'row-start-6',\n        7: 'row-start-7',\n        8: 'row-start-8',\n        9: 'row-start-9',\n        10: 'row-start-10',\n        11: 'row-start-11',\n        12: 'row-start-12',\n        13: 'row-start-13',\n        auto: 'row-start-auto'\n      },\n      rowEnd: {\n        1: 'row-end-1',\n        2: 'row-end-2',\n        3: 'row-end-3',\n        4: 'row-end-4',\n        5: 'row-end-5',\n        6: 'row-end-6',\n        7: 'row-end-7',\n        8: 'row-end-8',\n        9: 'row-end-9',\n        10: 'row-end-10',\n        11: 'row-end-11',\n        12: 'row-end-12',\n        13: 'row-end-13',\n        auto: 'row-end-auto'\n      }\n    }\n  },\n  {\n    responsiveVariants: ['sm', 'md', 'lg', 'xl', '2xl']\n  }\n)\n\ninterface GridItemProps extends ListBoxItemProps, VariantProps<typeof gridItemStyles> {\n  className?: string\n}\n\nconst GridItem = ({\n  children,\n  className,\n  colSpan,\n  rowSpan,\n  colStart,\n  colEnd,\n  rowStart,\n  rowEnd,\n  ...props\n}: GridItemProps) => {\n  const textValue = typeof children === 'string' ? children : undefined\n  return (\n    <ListBoxItem\n      textValue={textValue}\n      className={gridItemStyles({\n        colSpan,\n        rowSpan,\n        colStart,\n        colEnd,\n        rowStart,\n        rowEnd,\n        className\n      })}\n      {...props}\n    >\n      {(values) => <>{typeof children === 'function' ? children(values) : children}</>}\n    </ListBoxItem>\n  )\n}\n\nexport { Grid, GridItem }\n",
    "type": "ui"
  },
  "meter": {
    "component": "@/components/ui/meter",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { IconTriangleInfoFill } from '@irsyadadl/paranoid'\nimport { motion } from 'framer-motion'\nimport type { MeterProps as AriaMeterProps } from 'react-aria-components'\nimport { Meter as MeterPrimitive } from 'react-aria-components'\n\nimport { Label } from './field'\nimport { ctr } from './primitive'\n\nexport interface MeterProps extends AriaMeterProps {\n  label?: string\n}\n\nexport function Meter({ label, ...props }: MeterProps) {\n  return (\n    <MeterPrimitive {...props} className={ctr(props.className, 'flex flex-col gap-1')}>\n      {({ percentage, valueText }) => (\n        <>\n          <div className=\"flex w-full justify-between gap-2\">\n            <Label>{label}</Label>\n            <span\n              className={`text-sm ${percentage >= 80 ? 'text-danger' : 'text-muted-fg'}`}\n            >\n              {percentage >= 80 && (\n                <IconTriangleInfoFill\n                  aria-label=\"Alert\"\n                  className=\"inline-block size-4 align-text-bottom\"\n                />\n              )}\n              {' ' + valueText}\n            </span>\n          </div>\n          <div className=\"relative h-2 min-w-64 rounded-full bg-muted outline outline-1 -outline-offset-1 outline-transparent\">\n            <motion.div\n              className=\"absolute left-0 top-0 h-full rounded-full forced-colors:bg-[Highlight]\"\n              initial={{ width: '0%', backgroundColor: getColor(0) }}\n              animate={{\n                width: `${percentage}%`,\n                backgroundColor: getColor(percentage)\n              }}\n              transition={{ duration: 0.5 }}\n            />\n          </div>\n        </>\n      )}\n    </MeterPrimitive>\n  )\n}\n\nfunction getColor(percentage: number) {\n  if (percentage < 30) {\n    return '#0d6efd' // Blue\n  }\n\n  if (percentage < 50) {\n    return '#198754' // Green\n  }\n\n  if (percentage < 70) {\n    return '#ffc107' // Yellow\n  }\n\n  if (percentage < 80) {\n    return '#f97316' // Orange\n  }\n\n  return '#e11d48' // Red\n}\n",
    "type": "ui"
  },
  "time-field": {
    "component": "@/components/ui/time-field",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport {\n  TimeField as TimeFieldPrimitive,\n  type TimeFieldProps as TimeFieldPrimitiveProps,\n  type TimeValue,\n  type ValidationResult\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { DateInput } from './date-field'\nimport { Description, FieldError, fieldGroupStyles, Label } from './field'\nimport { ctr } from './primitive'\n\nexport interface TimeFieldProps<T extends TimeValue> extends TimeFieldPrimitiveProps<T> {\n  label?: string\n  description?: string\n  errorMessage?: string | ((validation: ValidationResult) => string)\n}\n\nconst timeFieldStyles = tv({\n  extend: fieldGroupStyles,\n  base: 'flex w-fit font-mono min-w-28 justify-around whitespace-nowrap p-2 lg:text-sm'\n})\n\nexport function TimeField<T extends TimeValue>({\n  label,\n  description,\n  errorMessage,\n  ...props\n}: TimeFieldProps<T>) {\n  return (\n    <TimeFieldPrimitive\n      {...props}\n      className={ctr(props.className, 'flex flex-col gap-1')}\n    >\n      <Label>{label}</Label>\n      <DateInput className={timeFieldStyles} />\n      {description && <Description>{description}</Description>}\n      <FieldError>{errorMessage}</FieldError>\n    </TimeFieldPrimitive>\n  )\n}\n",
    "type": "ui"
  },
  "breadcrumbs": {
    "component": "@/components/ui/breadcrumbs",
    "raw": "'use client'\n\nimport { IconChevronRight } from '@irsyadadl/paranoid'\nimport type { BreadcrumbProps, BreadcrumbsProps } from 'react-aria-components'\nimport {\n  Breadcrumb as BreadcrumbPrimitive,\n  Breadcrumbs as BreadcrumbsPrimitive,\n  type LinkProps\n} from 'react-aria-components'\n\nimport { Link } from './link'\nimport { cn } from './primitive'\n\nfunction Breadcrumbs<T extends object>(props: BreadcrumbsProps<T>) {\n  return <BreadcrumbsPrimitive {...props} className={cn('flex gap-1', props.className)} />\n}\n\nfunction Breadcrumb(props: BreadcrumbProps & LinkProps) {\n  return (\n    <BreadcrumbPrimitive\n      {...props}\n      className={cn('flex items-center gap-1', props.className)}\n    >\n      <Link href={props.href} {...props} />\n      {props.href && <IconChevronRight className=\"size-4 shrink-0 text-muted-fg\" />}\n    </BreadcrumbPrimitive>\n  )\n}\n\nexport { Breadcrumb, Breadcrumbs }\n",
    "type": "ui"
  },
  "drawer": {
    "component": "@/components/ui/drawer",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport {\n  animate,\n  AnimatePresence,\n  type Inertia,\n  motion,\n  useMotionTemplate,\n  useMotionValue,\n  useTransform\n} from 'framer-motion'\nimport {\n  Button,\n  type ButtonProps,\n  Dialog,\n  type DialogProps,\n  Heading,\n  type HeadingProps,\n  Modal,\n  ModalOverlay\n} from 'react-aria-components'\n\nimport { ModalClose, ModalDescription } from './modal'\nimport { cn } from './primitive'\n\nconst MotionModal = motion(Modal)\nconst MotionModalOverlay = motion(ModalOverlay)\n\nconst inertiaTransition: Inertia = {\n  type: 'inertia',\n  bounceStiffness: 300,\n  bounceDamping: 40,\n  timeConstant: 300\n}\n\nconst staticTransition = {\n  duration: 0.5,\n  ease: [0.32, 0.72, 0, 1]\n}\n\nconst DRAWER_MARGIN = 34\nconst DRAWER_RADIUS = 12\n\ninterface DrawerContextType {\n  isOpen: boolean\n  openDrawer: () => void\n  closeDrawer: () => void\n  withNotch?: boolean\n}\n\nconst DrawerContext = React.createContext<DrawerContextType | undefined>(undefined)\n\nconst useDrawerContext = () => {\n  const context = React.useContext(DrawerContext)\n  if (context === undefined) {\n    throw new Error('useDrawerContext must be used within a Drawer')\n  }\n  return context\n}\n\nconst DrawerTrigger = (props: ButtonProps) => {\n  const { openDrawer } = useDrawerContext()\n\n  return <Button onPress={openDrawer} {...props} />\n}\n\ninterface DrawerProps {\n  children: React.ReactNode\n  isOpen?: boolean\n  withNotch?: boolean\n  onOpenChange?: (isOpen: boolean) => void\n}\n\nconst Drawer = ({\n  children,\n  withNotch = true,\n  isOpen: controlledIsOpen,\n  onOpenChange\n}: DrawerProps) => {\n  const [internalIsOpen, setInternalIsOpen] = React.useState(false)\n\n  const isControlled = controlledIsOpen !== undefined\n  const isOpen = isControlled ? controlledIsOpen : internalIsOpen\n\n  React.useEffect(() => {\n    if (isControlled && onOpenChange) {\n      onOpenChange(isOpen)\n    }\n  }, [isOpen, isControlled, onOpenChange])\n\n  const openDrawer = () => {\n    if (isControlled && onOpenChange) {\n      onOpenChange(true)\n    } else {\n      setInternalIsOpen(true)\n    }\n  }\n\n  const closeDrawer = () => {\n    if (isControlled && onOpenChange) {\n      onOpenChange(false)\n    } else {\n      setInternalIsOpen(false)\n    }\n  }\n\n  if (typeof window === 'undefined') {\n    return null\n  }\n\n  return (\n    <DrawerContext.Provider value={{ isOpen, openDrawer, closeDrawer, withNotch }}>\n      {children}\n    </DrawerContext.Provider>\n  )\n}\n\ninterface DrawerContentProps\n  extends Omit<React.ComponentProps<typeof Modal>, 'children'> {\n  children?: DialogProps['children']\n}\n\nconst DrawerContent = ({ children, className, ...props }: DrawerContentProps) => {\n  const { isOpen, closeDrawer, withNotch } = useDrawerContext()\n\n  const h = window.innerHeight - DRAWER_MARGIN\n  const y = useMotionValue(h)\n  const bgOpacity = useTransform(y, [0, h], [0.5, 0])\n  const bg = useMotionTemplate`rgba(0, 0, 0, ${bgOpacity})`\n\n  const bodyScale = useTransform(\n    y,\n    [0, h],\n    [(window.innerWidth - DRAWER_MARGIN) / window.innerWidth, 1]\n  )\n  const bodyTranslate = useTransform(y, [0, h], [DRAWER_MARGIN - DRAWER_RADIUS, 0])\n  const bodyBorderRadius = useTransform(y, [0, h], [DRAWER_RADIUS, 0])\n  return (\n    <motion.div\n      style={{\n        scale: bodyScale,\n        borderRadius: bodyBorderRadius,\n        y: bodyTranslate,\n        transformOrigin: 'center 0'\n      }}\n    >\n      <AnimatePresence>\n        {isOpen && (\n          <MotionModalOverlay\n            isOpen // Force the modal to be open when AnimatePresence renders it.\n            onOpenChange={closeDrawer}\n            className=\"fixed inset-0 z-50\"\n            style={{ backgroundColor: bg as any }}\n          >\n            <MotionModal\n              className={cn(\n                'absolute bottom-0 w-full rounded-t-2xl bg-tertiary shadow-lg ring-1 ring-fg/10',\n                className\n              )}\n              initial={{ y: h }}\n              animate={{ y: 0 }}\n              exit={{ y: h }}\n              transition={staticTransition}\n              style={{\n                y,\n                top: DRAWER_MARGIN,\n                paddingBottom: window.screen.height // Extra padding at the bottom to account for rubber band scrolling.\n              }}\n              drag=\"y\"\n              dragConstraints={{ top: 0 }}\n              onDragEnd={(e, { offset, velocity }) => {\n                if (offset.y > window.innerHeight * 0.75 || velocity.y > 10) {\n                  closeDrawer()\n                } else {\n                  animate(y, 0, { ...inertiaTransition, min: 0, max: 0 })\n                }\n              }}\n              {...props}\n            >\n              {/* drag affordance / notch */}\n              {withNotch && (\n                <div className=\"notch mx-auto mt-2 h-1.5 w-10 rounded-full bg-fg/20\" />\n              )}\n              <Dialog className=\"mx-auto flex h-[calc(var(--visual-viewport-height)-4.5rem)] max-w-3xl flex-col justify-between overflow-y-auto px-4 pt-4 outline-none\">\n                {(values) => (\n                  <>{typeof children === 'function' ? children(values) : children}</>\n                )}\n              </Dialog>\n            </MotionModal>\n          </MotionModalOverlay>\n        )}\n      </AnimatePresence>\n    </motion.div>\n  )\n}\n\nconst DrawerHeader = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn('flex flex-col gap-y-1 text-center sm:text-left', className)}\n    {...props}\n  />\n)\n\nconst DrawerBody = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn('flex-1 overflow-y-auto overflow-x-hidden py-4', className)}\n    {...props}\n  />\n)\n\nconst DrawerFooter = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      'flex shrink-0 flex-col-reverse gap-2 sm:flex-row sm:justify-between [&_button:first-child:nth-last-child(1)]:w-full',\n      className\n    )}\n    {...props}\n  />\n)\n\nconst DrawerTitle = ({ className, ...props }: HeadingProps) => (\n  <Heading\n    slot=\"title\"\n    className={cn('text-lg font-semibold leading-none tracking-tight', className)}\n    {...props}\n  />\n)\n\nconst DrawerDescription = ModalDescription\nconst DrawerClose = ModalClose\n\nexport {\n  Drawer,\n  DrawerBody,\n  DrawerClose,\n  DrawerContent,\n  DrawerDescription,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerTitle,\n  DrawerTrigger\n}\n",
    "type": "ui"
  },
  "tooltip": {
    "component": "@/components/ui/tooltip",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport {\n  Button,\n  composeRenderProps,\n  OverlayArrow,\n  Tooltip as TooltipPrimitive,\n  type TooltipProps as TooltipPrimitiveProps,\n  TooltipTrigger as TooltipTriggerPrimitive\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nexport interface TooltipProps extends Omit<TooltipPrimitiveProps, 'children'> {\n  children: React.ReactNode\n}\n\nconst tooltipStyles = tv({\n  base: [\n    'group rounded-lg border bg-tertiary px-1.5 py-1 text-sm text-tertiary-fg will-change-transform dark:shadow-none',\n    // Placement\n    'placement-left:slide-in-from-right-1 placement-right:slide-in-from-left-1 placement-top:slide-in-from-bottom-1 placement-bottom:slide-in-from-top-1'\n  ],\n  variants: {\n    isEntering: {\n      true: 'animate-in fade-in'\n    },\n    isExiting: {\n      true: 'animate-in fade-in direction-reverse'\n    }\n  }\n})\n\nconst TooltipTrigger = Button\nconst Tooltip = TooltipTriggerPrimitive\n\nconst TooltipContent = ({ children, ...props }: TooltipProps) => {\n  return (\n    <TooltipPrimitive\n      {...props}\n      offset={10}\n      className={composeRenderProps(props.className, (className, renderProps) =>\n        tooltipStyles({\n          ...renderProps,\n          className\n        })\n      )}\n    >\n      <OverlayArrow>\n        <svg\n          width={8}\n          height={8}\n          viewBox=\"0 0 8 8\"\n          className=\"fill-tertiary stroke-border group-placement-left:-rotate-90 group-placement-right:rotate-90 group-placement-bottom:rotate-180 forced-colors:fill-[Canvas] forced-colors:stroke-[ButtonBorder]\"\n        >\n          <path d=\"M0 0 L4 4 L8 0\" />\n        </svg>\n      </OverlayArrow>\n      {children}\n    </TooltipPrimitive>\n  )\n}\n\nexport { Tooltip, TooltipContent, TooltipTrigger }\n",
    "type": "ui"
  },
  "file-trigger": {
    "component": "@/components/ui/file-trigger",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconCamera, IconFolder, IconPaperclip } from '@irsyadadl/paranoid'\nimport {\n  FileTrigger as FileTriggerPrimitive,\n  type FileTriggerProps as FileTriggerPrimitiveProps\n} from 'react-aria-components'\nimport { type VariantProps } from 'tailwind-variants'\n\nimport { Button, type buttonStyles } from './button'\n\ninterface FileTriggerProps\n  extends FileTriggerPrimitiveProps,\n    VariantProps<typeof buttonStyles> {\n  withIcon?: boolean\n  isDisabled?: boolean\n}\n\nconst FileTrigger: React.FC<FileTriggerProps> = ({\n  intent = 'primary',\n  appearance = 'outline',\n  withIcon = true,\n  ...props\n}) => {\n  return (\n    <>\n      <FileTriggerPrimitive {...props}>\n        <Button isDisabled={props.isDisabled} intent={intent} appearance={appearance}>\n          {withIcon && (\n            <>\n              {props.defaultCamera ? (\n                <IconCamera />\n              ) : props.acceptDirectory ? (\n                <IconFolder />\n              ) : (\n                <IconPaperclip className=\"rotate-45\" />\n              )}\n            </>\n          )}\n          {props.children ? (\n            props.children\n          ) : (\n            <>\n              {props.allowsMultiple\n                ? 'Browse a files'\n                : props.acceptDirectory\n                  ? 'Browse'\n                  : 'Browse a file'}\n              ...\n            </>\n          )}\n        </Button>\n      </FileTriggerPrimitive>\n    </>\n  )\n}\n\nexport { FileTrigger }\n",
    "type": "ui"
  },
  "heading": {
    "component": "@/components/ui/heading",
    "raw": "'use client'\n\nimport {\n  Header as HeaderPrimitive,\n  Heading as HeadingPrimitive,\n  type HeadingProps\n} from 'react-aria-components'\n\nimport { cn } from './primitive'\n\nconst Header = HeaderPrimitive\nconst Heading = ({ className, level = 1, ...props }: HeadingProps) => {\n  return (\n    <HeadingPrimitive\n      level={level}\n      className={cn('font-medium text-zinc-950 dark:text-white sm:text-xl', className)}\n      {...props}\n    />\n  )\n}\n\nconst Subheading = ({ className, level = 2, ...props }: HeadingProps) => {\n  return (\n    <HeadingPrimitive\n      level={level}\n      {...props}\n      className={cn('text-base/7 font-semibold text-fg sm:text-sm/6', className)}\n    />\n  )\n}\n\nexport { Header, Heading, Subheading, type HeadingProps }\n",
    "type": "ui"
  },
  "switch": {
    "component": "@/components/ui/switch",
    "raw": "'use client'\n\nimport {\n  Switch as SwitchPrimitive,\n  type SwitchProps as SwitchPrimitiveProps\n} from 'react-aria-components'\nimport { tv, type VariantProps } from 'tailwind-variants'\n\nimport { cn, focusRing } from './primitive'\n\nconst trackStyles = tv({\n  extend: focusRing,\n  base: 'mr-2 h-5 w-8 cursor-pointer rounded-full border-2 border-transparent bg-zinc-400 dark:bg-zinc-600 transition duration-200',\n  variants: {\n    intent: {\n      primary: 'group-selected:bg-primary',\n      secondary: 'group-selected:bg-zinc-500',\n      success: 'group-selected:bg-success',\n      danger: 'group-selected:bg-danger',\n      warning: 'group-selected:bg-amber-500',\n      info: 'group-selected:bg-lime-500 dark:group-selected:bg-lime-600'\n    }\n  },\n  defaultVariants: {\n    intent: 'primary'\n  }\n})\n\ninterface SwitchProps extends SwitchPrimitiveProps, VariantProps<typeof trackStyles> {}\n\nconst Switch = ({ children, intent, className, ...props }: SwitchProps) => {\n  return (\n    <SwitchPrimitive\n      {...props}\n      className={(values) =>\n        cn(\n          'group inline-flex touch-none lg:text-sm items-center disabled:opacity-60 forced-colors:disabled:text-[GrayText]',\n          typeof className === 'function' ? className(values) : className\n        )\n      }\n      style={{ WebkitTapHighlightColor: 'transparent' }}\n    >\n      {(values) => (\n        <>\n          <span className={trackStyles({ intent: intent })}>\n            <span className=\"forced-colors:disabled:outline-[GrayText] group-selected:ml-3 group-selected:group-data-[pressed]:ml-2 group-pressed:w-5 block size-4 origin-right rounded-full bg-white shadow transition-all duration-200\" />\n          </span>\n          {typeof children === 'function' ? children(values) : children}\n        </>\n      )}\n    </SwitchPrimitive>\n  )\n}\n\nexport { Switch }\n",
    "type": "ui"
  },
  "calendar": {
    "component": "@/components/ui/calendar",
    "raw": "'use client'\n\nimport { IconChevronLgLeft, IconChevronLgRight } from '@irsyadadl/paranoid'\nimport {\n  Calendar as CalendarPrimitive,\n  CalendarCell,\n  CalendarGrid,\n  CalendarGridBody,\n  CalendarGridHeader as CalendarGridHeaderPrimitive,\n  CalendarHeaderCell,\n  type CalendarProps as CalendarPrimitiveProps,\n  type DateValue,\n  Heading,\n  RangeCalendar as RangeCalendarPrimitive,\n  type RangeCalendarProps as RangeCalendarPrimitiveProps,\n  Text,\n  useLocale\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { Button } from './button'\nimport { focusRing } from './primitive'\n\nconst cellStyles = tv({\n  extend: focusRing,\n  base: 'flex size-10 lg:size-9 cursor-default items-center justify-center rounded-full lg:text-sm forced-color-adjust-none',\n  variants: {\n    isSelected: {\n      false:\n        'text-fg hover:bg-gray-100 pressed:bg-gray-200 dark:hover:bg-zinc-700 dark:pressed:bg-zinc-600',\n      true: 'bg-primary text-primary-fg invalid:bg-danger invalid:text-danger-fg forced-colors:bg-[Highlight] forced-colors:text-[HighlightText] forced-colors:invalid:bg-[Mark]'\n    },\n    isDisabled: {\n      true: 'text-gray-300 dark:text-zinc-600 forced-colors:text-[GrayText]'\n    }\n  }\n})\n\ninterface CalendarProps<T extends DateValue>\n  extends Omit<CalendarPrimitiveProps<T>, 'visibleDuration'> {\n  errorMessage?: string\n}\n\nfunction Calendar<T extends DateValue>({ errorMessage, ...props }: CalendarProps<T>) {\n  return (\n    <CalendarPrimitive {...props}>\n      <CalendarHeader />\n      <CalendarGrid>\n        <CalendarGridHeader />\n        <CalendarGridBody>\n          {(date) => <CalendarCell date={date} className={cellStyles} />}\n        </CalendarGridBody>\n      </CalendarGrid>\n      {errorMessage && (\n        <Text slot=\"errorMessage\" className=\"text-sm text-red-600\">\n          {errorMessage}\n        </Text>\n      )}\n    </CalendarPrimitive>\n  )\n}\n\nfunction CalendarHeader() {\n  const { direction } = useLocale()\n\n  return (\n    <header className=\"flex w-full justify-center items-center gap-1 px-1 pb-4\">\n      <Button\n        size=\"square-petite\"\n        className=\"[&_[data-slot=icon]]:text-fg\"\n        appearance=\"outline\"\n        slot=\"previous\"\n      >\n        {direction === 'rtl' ? <IconChevronLgRight /> : <IconChevronLgLeft aria-hidden />}\n      </Button>\n      <Heading className=\"mx-2 flex-1 text-center text-base font-medium text-fg\" />\n      <Button\n        size=\"square-petite\"\n        className=\"[&_[data-slot=icon]]:text-fg\"\n        appearance=\"outline\"\n        slot=\"next\"\n      >\n        {direction === 'rtl' ? <IconChevronLgLeft /> : <IconChevronLgRight />}\n      </Button>\n    </header>\n  )\n}\n\nfunction CalendarGridHeader() {\n  return (\n    <CalendarGridHeaderPrimitive>\n      {(day) => (\n        <CalendarHeaderCell className=\"text-sm lg:text-xs font-semibold text-gray-500\">\n          {day}\n        </CalendarHeaderCell>\n      )}\n    </CalendarGridHeaderPrimitive>\n  )\n}\n\ninterface RangeCalendarProps<T extends DateValue>\n  extends Omit<RangeCalendarPrimitiveProps<T>, 'visibleDuration'> {\n  errorMessage?: string\n}\n\nconst cell = tv({\n  extend: focusRing,\n  base: 'flex h-full w-full items-center justify-center rounded-full text-fg forced-color-adjust-none',\n  variants: {\n    selectionState: {\n      none: 'group-hover:bg-gray-100 group-pressed:bg-gray-200 dark:group-hover:bg-zinc-700 dark:group-pressed:bg-zinc-600',\n      middle: [\n        'group-hover:bg-primary-200 dark:group-hover:bg-primary-900 forced-colors:group-hover:bg-[Highlight]',\n        'group-invalid:group-hover:bg-red-200 dark:group-invalid:group-hover:bg-red-900 forced-colors:group-invalid:group-hover:bg-[Mark]',\n        'group-pressed:bg-primary-300 dark:group-pressed:bg-primary-800 forced-colors:text-[HighlightText] forced-colors:group-pressed:bg-[Highlight]',\n        'group-invalid:group-pressed:bg-red-300 dark:group-invalid:group-pressed:bg-red-800 forced-colors:group-invalid:group-pressed:bg-[Mark]'\n      ],\n      cap: 'bg-primary text-primary-fg group-invalid:bg-danger group-invalid:text-danger-fg forced-colors:bg-[Highlight] forced-colors:text-[HighlightText] forced-colors:group-invalid:bg-[Mark]'\n    },\n    isDisabled: {\n      true: 'text-gray-300 dark:text-zinc-600 forced-colors:text-[GrayText]'\n    }\n  }\n})\n\nfunction RangeCalendar<T extends DateValue>({\n  errorMessage,\n  ...props\n}: RangeCalendarProps<T>) {\n  return (\n    <RangeCalendarPrimitive {...props}>\n      <CalendarHeader />\n      <CalendarGrid className=\"[&_td]:px-0\">\n        <CalendarGridHeader />\n        <CalendarGridBody>\n          {(date) => (\n            <CalendarCell\n              date={date}\n              className=\"group size-9 cursor-default text-sm outline outline-0 outside-month:text-gray-300 selected:bg-primary-100 invalid:selected:bg-red-100 selection-start:rounded-s-full selection-end:rounded-e-full dark:selected:bg-primary-700/30 dark:invalid:selected:bg-red-700/30 forced-colors:selected:bg-[Highlight] forced-colors:invalid:selected:bg-[Mark] [td:first-child_&]:rounded-s-full [td:last-child_&]:rounded-e-full\"\n            >\n              {({\n                formattedDate,\n                isSelected,\n                isSelectionStart,\n                isSelectionEnd,\n                isDisabled\n              }) => (\n                <span\n                  className={cell({\n                    selectionState:\n                      isSelected && (isSelectionStart || isSelectionEnd)\n                        ? 'cap'\n                        : isSelected\n                          ? 'middle'\n                          : 'none',\n                    isDisabled\n                  })}\n                >\n                  {formattedDate}\n                </span>\n              )}\n            </CalendarCell>\n          )}\n        </CalendarGridBody>\n      </CalendarGrid>\n      {errorMessage && (\n        <Text slot=\"errorMessage\" className=\"text-sm text-red-600\">\n          {errorMessage}\n        </Text>\n      )}\n    </RangeCalendarPrimitive>\n  )\n}\n\nexport {\n  Calendar,\n  CalendarGridHeader,\n  CalendarHeader,\n  RangeCalendar,\n  type RangeCalendarProps\n}\n",
    "type": "ui"
  },
  "grid-list": {
    "component": "@/components/ui/grid-list",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconHamburger } from '@irsyadadl/paranoid'\nimport {\n  Button,\n  GridList as GridListPrimitive,\n  GridListItem as GridListItemPrimitive,\n  type GridListItemProps,\n  type GridListProps as GridListPrimitiveProps\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { Checkbox } from './checkbox'\nimport { composeTailwindRenderProps, focusRing } from './primitive'\n\ninterface GridListProps<T extends object> extends GridListPrimitiveProps<T> {}\n\nconst GridList = <T extends object>({\n  selectionMode = 'single',\n  children,\n  ...props\n}: GridListProps<T>) => (\n  <GridListPrimitive\n    selectionMode={selectionMode}\n    {...props}\n    className={composeTailwindRenderProps(\n      props.className,\n      'relative overflow-auto rounded-lg border'\n    )}\n  >\n    {children}\n  </GridListPrimitive>\n)\n\nconst itemStyles = tv({\n  extend: focusRing,\n  base: 'relative -mb-px flex cursor-default select-none gap-3 border-y px-3 py-2 text-sm text-fg -outline-offset-2 first:rounded-t-md first:border-t-0 last:mb-0 last:rounded-b-md last:border-b-0',\n  variants: {\n    isSelected: {\n      false: 'hover:bg-secondary',\n      true: 'z-20 border-y-primary/50 bg-primary/20'\n    },\n    isDisabled: {\n      true: 'z-10 text-muted-fg forced-colors:text-[GrayText]'\n    }\n  }\n})\n\nconst GridListItem = ({ children, ...props }: GridListItemProps) => {\n  const textValue = typeof children === 'string' ? children : undefined\n  return (\n    <GridListItemPrimitive textValue={textValue} {...props} className={itemStyles}>\n      {({ selectionMode, selectionBehavior, allowsDragging }) => (\n        <>\n          {allowsDragging && (\n            <Button slot=\"drag\">\n              <IconHamburger />\n            </Button>\n          )}\n          {selectionMode === 'multiple' && selectionBehavior === 'toggle' && (\n            <Checkbox slot=\"selection\" />\n          )}\n          {children}\n        </>\n      )}\n    </GridListItemPrimitive>\n  )\n}\n\nconst GridEmptyState = (props: React.HTMLAttributes<HTMLDivElement>) => (\n  <div className=\"p-6\" {...props} />\n)\n\nexport { GridList, GridListItem, GridEmptyState }\n",
    "type": "ui"
  },
  "color": {
    "component": "@/components/ui/color",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { parseColor } from '@react-stately/color'\nimport type {\n  ColorFieldProps as ColorFieldPrimitiveProps,\n  ColorSliderProps as ColorSliderPrimitiveProps,\n  ColorSwatchPickerItemProps as ColorSwatchPickerItemPrimitiveProps,\n  ColorSwatchProps as ColorSwatchPrimitiveProps,\n  ColorThumbProps as ColorThumbPrimitiveProps,\n  ValidationResult\n} from 'react-aria-components'\nimport {\n  ColorArea as ColorAreaPrimitive,\n  ColorField as ColorFieldPrimitive,\n  ColorSlider as ColorSliderPrimitive,\n  ColorSwatch as ColorSwatchPrimitive,\n  ColorSwatchPicker as ColorSwatchPickerPrimitive,\n  ColorSwatchPickerItem as ColorSwatchPickerItemPrimitive,\n  ColorThumb as ColorThumbPrimitive,\n  ColorWheel as ColorWheelPrimitive,\n  ColorWheelTrack as ColorWheelTrackPrimitive,\n  composeRenderProps,\n  SliderOutput\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport {\n  Description,\n  FieldError,\n  FieldGroup,\n  fieldGroupPrefixStyles,\n  Input,\n  Label\n} from './field'\nimport { cn, ctr, focusStyles } from './primitive'\nimport { SliderTrack } from './slider'\n\ninterface ColorFieldProps extends ColorFieldPrimitiveProps {\n  label?: string\n  description?: string\n  errorMessage?: string | ((validation: ValidationResult) => string)\n  placeholder?: string\n  prefix?: React.ReactNode\n  suffix?: React.ReactNode\n  isLoading?: boolean\n}\n\nconst ColorField = ({\n  label,\n  description,\n  errorMessage,\n  placeholder,\n  prefix,\n  suffix,\n  isLoading,\n  ...props\n}: ColorFieldProps) => {\n  return (\n    <ColorFieldPrimitive\n      {...props}\n      className={ctr(props.className, 'group w-full flex flex-col gap-1')}\n    >\n      {label && <Label>{label}</Label>}\n      <FieldGroup\n        data-loading={isLoading ? 'true' : undefined}\n        className={fieldGroupPrefixStyles()}\n      >\n        {prefix ? <span className=\"atrs isPfx\">{prefix}</span> : null}\n        <Input className=\"px-2.5\" placeholder={placeholder} />\n        {suffix ? <span className=\"atrs isSfx\">{suffix}</span> : null}\n      </FieldGroup>\n      {description && <Description>{description}</Description>}\n      <FieldError>{errorMessage}</FieldError>\n    </ColorFieldPrimitive>\n  )\n}\n\nconst colorAreaStyles = tv({\n  base: 'size-48 rounded-lg border border-background shrink-0 disabled:opacity-50'\n})\n\ninterface ColorAreaProps extends React.ComponentProps<typeof ColorAreaPrimitive> {}\n\nconst ColorArea = ({ className, ...props }: ColorAreaProps) => {\n  return (\n    <ColorAreaPrimitive\n      {...props}\n      className={composeRenderProps(className, (className, renderProps) =>\n        colorAreaStyles({\n          ...renderProps,\n          className\n        })\n      )}\n    />\n  )\n}\n\ninterface ColorThumbProps extends ColorThumbPrimitiveProps {}\n\nconst colorThumbStyles = tv({\n  base: 'size-5 shadow rounded-full ring-1 ring-inset ring-offset-2 ring-black/50 border border-black/50',\n  variants: {\n    isFocusVisible: {\n      true: 'size-6'\n    }\n  }\n})\n\nconst ColorThumb = ({ className, ...props }: ColorThumbProps) => {\n  return (\n    <ColorThumbPrimitive\n      className={composeRenderProps(className, (className, renderProps) =>\n        colorThumbStyles({\n          ...renderProps,\n          className\n        })\n      )}\n      {...props}\n    />\n  )\n}\n\nconst colorSwatchPickerItemStyles = tv({\n  extend: focusStyles,\n  base: 'size-8 rounded-md cspis disabled:opacity-50'\n})\n\nconst ColorSwatchPickerItem = ({\n  className,\n  ...props\n}: ColorSwatchPickerItemPrimitiveProps) => {\n  return (\n    <ColorSwatchPickerItemPrimitive\n      className={composeRenderProps(className, (className, renderProps) =>\n        colorSwatchPickerItemStyles({\n          ...renderProps,\n          className\n        })\n      )}\n      {...props}\n    >\n      <ColorSwatch\n        isBright={isBrightColor(props.color ?? '')}\n        className=\"size-[inherit] cocspip\"\n      />\n    </ColorSwatchPickerItemPrimitive>\n  )\n}\n\ninterface ColorSwatchProps extends ColorSwatchPrimitiveProps {\n  isBright?: boolean\n}\n\nconst ColorSwatch = ({ isBright, className, ...props }: ColorSwatchProps) => {\n  const needRing = props.color ? isBrightColor(props.color) : isBright\n  return (\n    <ColorSwatchPrimitive\n      className={cn(\n        'size-8 cs rounded-md',\n        needRing\n          ? 'ring-1 ring-inset ring-black/10'\n          : 'dark:ring-1 dark:ring-inset dark:ring-white/10',\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nconst hexToRgb = (hex: string): { r: number; g: number; b: number } | null => {\n  const shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i\n  hex = hex.replace(shorthandRegex, (m, r, g, b) => r + r + g + g + b + b)\n\n  const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex)\n  return result\n    ? {\n        r: parseInt(result[1], 16),\n        g: parseInt(result[2], 16),\n        b: parseInt(result[3], 16)\n      }\n    : null\n}\n\nconst hsbToRgb = (\n  h: number,\n  s: number,\n  b: number\n): { r: number; g: number; b: number } => {\n  s /= 100\n  b /= 100\n  const k = (n: number) => (n + h / 60) % 6\n  const f = (n: number) => b * (1 - s * Math.max(0, Math.min(k(n), 4 - k(n), 1)))\n  return {\n    r: Math.round(255 * f(5)),\n    g: Math.round(255 * f(3)),\n    b: Math.round(255 * f(1))\n  }\n}\n\nconst luminance = (r: number, g: number, b: number): number => {\n  const a = [r, g, b].map((v) => {\n    v /= 255\n    return v <= 0.03928 ? v / 12.92 : Math.pow((v + 0.055) / 1.055, 2.4)\n  })\n  return a[0] * 0.2126 + a[1] * 0.7152 + a[2] * 0.0722\n}\n\nconst isBrightColor = (color: any): boolean => {\n  let r, g, b\n\n  if (typeof color === 'string') {\n    if (color.startsWith('#')) {\n      const rgb = hexToRgb(color)\n      if (rgb) {\n        r = rgb.r\n        g = rgb.g\n        b = rgb.b\n      } else {\n        return false\n      }\n    } else if (color.startsWith('rgb')) {\n      const rgbValues = color.match(/\\d+/g)\n      if (rgbValues) {\n        r = parseInt(rgbValues[0], 10)\n        g = parseInt(rgbValues[1], 10)\n        b = parseInt(rgbValues[2], 10)\n      } else {\n        return false\n      }\n    } else {\n      const namedColors: Record<string, string> = {\n        white: '#ffffff',\n        black: '#000000'\n      }\n      const hex = namedColors[color.toLowerCase()]\n      if (hex) {\n        const rgb = hexToRgb(hex)\n        if (rgb) {\n          r = rgb.r\n          g = rgb.g\n          b = rgb.b\n        } else {\n          return false\n        }\n      } else {\n        return false\n      }\n    }\n  } else if (\n    typeof color === 'object' &&\n    'hue' in color &&\n    'saturation' in color &&\n    'brightness' in color\n  ) {\n    const rgb = hsbToRgb(color.hue, color.saturation, color.brightness)\n    r = rgb.r\n    g = rgb.g\n    b = rgb.b\n  } else {\n    return false\n  }\n\n  const lum = luminance(r, g, b)\n  return lum > 0.75\n}\n\nconst defaultColor = parseColor('hsl(216, 98%, 52%)')\n\ninterface ColorSliderProps extends ColorSliderPrimitiveProps {\n  label?: string\n  description?: string\n  showOutput?: boolean\n}\n\nconst ColorSlider = ({\n  className,\n  showOutput = true,\n  label,\n  description,\n  ...props\n}: ColorSliderProps) => {\n  return (\n    <ColorSliderPrimitive\n      className={cn('flex disabled:opacity-50 w-full flex-col gap-1', className)}\n      {...props}\n    >\n      <div className=\"flex items-center gap-2\">\n        {label && <Label className=\"text-sm [grid-area:label]\">{label}</Label>}\n        {showOutput && <SliderOutput className=\"text-sm ml-auto [grid-area:output]\" />}\n      </div>\n      <SliderTrack className=\"cstrk rounded-md orientation-horizontal:h-8\">\n        <ColorThumb className=\"csth top-1/2\" />\n      </SliderTrack>\n      {description && <Description>{description}</Description>}\n    </ColorSliderPrimitive>\n  )\n}\n\nconst ColorWheel = ColorWheelPrimitive\nconst ColorWheelTrack = ColorWheelTrackPrimitive\nconst ColorSwatchPicker = ColorSwatchPickerPrimitive\n\nexport {\n  ColorArea,\n  ColorField,\n  ColorSlider,\n  ColorSwatch,\n  ColorSwatchPicker,\n  ColorSwatchPickerItem,\n  ColorThumb,\n  ColorWheel,\n  ColorWheelTrack,\n  defaultColor,\n  isBrightColor\n}\n",
    "type": "ui"
  },
  "command": {
    "component": "@/components/ui/command",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { IconSearch } from '@irsyadadl/paranoid'\nimport { Command as CommandPrimitive } from 'cmdk'\nimport { Button, Dialog, Modal } from 'react-aria-components'\nimport { twJoin } from 'tailwind-merge'\n\nimport type { ModalOverlayProps } from './modal'\nimport { ModalOverlay } from './modal'\nimport { cn, useMediaQuery } from './primitive'\n\ntype CommandComponent = React.ForwardRefExoticComponent<\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive> &\n    React.RefAttributes<HTMLElement>\n>\n\nconst Command: CommandComponent = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      [\n        'flex h-svh w-full flex-col overflow-hidden rounded-md bg-popover text-popover-fg sm:h-full',\n        '[&_[cmdk-group-heading]]:ml-1 [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-fg [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-0 [&_[cmdk-input-wrapper]_svg]:size-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:py-[0.70rem] [&_[cmdk-item]]:pl-3 [&_[cmdk-item]]:pr-4 [&_[cmdk-item]_svg]:mr-2 [&_[cmdk-item]_svg]:size-[1.10rem]'\n      ],\n      className\n    )}\n    {...props}\n  />\n)) as any\nCommand.displayName = CommandPrimitive.displayName\n\ninterface CommandModalProps extends ModalOverlayProps {\n  children: React.ReactNode\n}\n\nconst CommandModal = ({ children, ...props }: CommandModalProps) => {\n  const isDesktop = useMediaQuery('(min-width: 1024px)')\n  return (\n    <ModalOverlay {...props}>\n      <Modal\n        className={twJoin(\n          'fixed bottom-0 left-[50%] top-auto z-50 grid h-[calc(100vh-35%)] w-full max-w-full translate-x-[-50%] gap-4 overflow-hidden rounded-t-xl bg-background p-0 shadow-lg ring-1 ring-border sm:bottom-auto sm:top-[6rem] sm:h-auto sm:w-full sm:max-w-2xl sm:rounded-xl',\n          'sm:entering:slide-in-from-bottom-auto entering:duration-300 entering:animate-in entering:fade-in-0 entering:slide-in-from-bottom-1/2 entering:slide-in-from-left-1/2 entering:[transition-timing-function:ease-out] sm:entering:duration-300 sm:entering:slide-in-from-top-[2rem]',\n          'exiting:duration-300 exiting:animate-out exiting:fade-out-0 exiting:slide-out-to-bottom-1/2 exiting:slide-out-to-left-1/2 exiting:[transition-timing-function:ease] sm:exiting:slide-out-to-top-[4rem]'\n        )}\n      >\n        <Dialog>\n          {({ close }) => (\n            <>\n              <Command>{children}</Command>\n              <Button\n                autoFocus={!isDesktop}\n                onPress={close}\n                className=\"absolute right-3 top-3.5 rounded-full border bg-secondary/50 px-2.5 py-0.5 text-xs transition-opacity data-[state=open]:bg-secondary data-[state=open]:text-muted-fg focus:border-fg/70 focus:outline-none focus:ring-2 focus:ring-ring disabled:pointer-events-none\"\n              >\n                Esc\n              </Button>\n            </>\n          )}\n        </Dialog>\n      </Modal>\n    </ModalOverlay>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <div className=\"flex items-center border-b px-3\">\n      <IconSearch className=\"mr-2 size-5 shrink-0 opacity-50\" />\n      <CommandPrimitive.Input\n        ref={ref}\n        className={cn(\n          'flex h-11 w-full rounded-md bg-transparent py-3 text-base outline-none placeholder:text-muted-fg focus:outline-none disabled:cursor-not-allowed disabled:opacity-50',\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn('overflow-y-auto overflow-x-hidden px-2 md:max-h-[456px]', className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm text-muted-fg\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandSection = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      'overflow-hidden px-0 py-2 text-fg [&_[cmdk-group-heading]]:ml-0 [&_[cmdk-group-heading]]:select-none [&_[cmdk-group-heading]]:py-2 [&_[cmdk-group-heading]]:text-[0.8rem] [&_[cmdk-group-heading]]:text-muted-fg',\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandSection.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn('-mx-1 h-px bg-border', className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      'relative flex cursor-default select-none items-center rounded-lg px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected=true]:bg-secondary data-[selected=true]:text-secondary-fg data-[disabled=true]:opacity-50 [&[data-selected=true]_svg]:text-secondary-fg [&_svg]:shrink-0 [&_svg]:text-muted-fg',\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandKeyboard = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        '-mr-1 ml-auto hidden items-center gap-1 px-1 opacity-60 lg:inline-flex',\n        '[&_kbd]:inline-grid [&_kbd]:min-h-5 [&_kbd]:min-w-5 [&_kbd]:place-content-center [&_kbd]:rounded [&_kbd]:bg-background [&_kbd]:font-sans [&_kbd]:text-[.75rem] [&_kbd]:uppercase [&_kbd]:ring-1 [&_kbd]:ring-fg/10',\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandKeyboard.displayName = 'CommandShortcut'\n\nexport {\n  Command,\n  CommandEmpty,\n  CommandInput,\n  CommandItem,\n  CommandKeyboard,\n  CommandList,\n  CommandModal,\n  CommandSection,\n  CommandSeparator\n}\n",
    "type": "ui"
  },
  "dropdown": {
    "component": "@/components/ui/dropdown",
    "raw": "'use client'\n\nimport { IconCheck } from '@irsyadadl/paranoid'\nimport {\n  Collection,\n  composeRenderProps,\n  Header,\n  ListBoxItem as ListBoxItemPrimitive,\n  type ListBoxItemProps,\n  Section,\n  type SectionProps\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nconst dropdownItemStyles = tv({\n  base: [\n    'group flex cursor-default select-none items-center gap-x-1.5 rounded-md py-2 pl-2.5 pr-1 text-base outline outline-0 forced-color-adjust-none lg:text-sm',\n    '[&_[data-slot=avatar]]:-mr-0.5 [&_[data-slot=avatar]]:size-6 sm:[&_[data-slot=avatar]]:size-5',\n    '[&_svg]:size-4',\n    'has-submenu:open:data-[danger=true]:bg-danger/20 has-submenu:open:data-[danger=true]:text-danger',\n    'has-submenu:open:bg-primary has-submenu:open:text-primary-fg'\n  ],\n  variants: {\n    isDisabled: {\n      false: 'text-fg',\n      true: 'text-muted-fg forced-colors:text-[GrayText]'\n    },\n    isFocused: {\n      false: 'data-[danger=true]:text-danger',\n      true: [\n        'bg-primary text-primary-fg forced-colors:bg-[Highlight] forced-colors:text-[HighlightText]',\n        'data-[danger=true]:bg-danger data-[danger=true]:text-danger-fg'\n      ]\n    }\n  },\n  compoundVariants: [\n    {\n      isFocused: false,\n      isOpen: true,\n      className: 'bg-gray-100 dark:bg-zinc-700/60'\n    }\n  ]\n})\n\ninterface DropdownSectionProps<T> extends SectionProps<T> {\n  title?: string\n}\n\nconst DropdownSection = <T extends object>(props: DropdownSectionProps<T>) => {\n  return (\n    <Section className=\"after:block after:h-[5px] after:content-[''] first:-mt-[5px]\">\n      <Header className=\"dsh mb-0.5 px-2 text-sm text-muted-fg\">{props.title}</Header>\n      <Collection items={props.items}>{props.children}</Collection>\n    </Section>\n  )\n}\n\nconst DropdownItem = (props: ListBoxItemProps) => {\n  const textValue =\n    props.textValue || (typeof props.children === 'string' ? props.children : undefined)\n  return (\n    <ListBoxItemPrimitive\n      {...props}\n      textValue={textValue}\n      className={composeRenderProps(props.className, (className, renderProps) =>\n        dropdownItemStyles({ ...renderProps, className })\n      )}\n    >\n      {composeRenderProps(props.children, (children, { isSelected }) => (\n        <>\n          <span className=\"flex flex-1 items-center gap-2 truncate font-normal group-selected:font-semibold\">\n            {children}\n          </span>\n          <span className=\"flex w-5 items-center\">\n            {isSelected && <IconCheck className=\"h-4 w-4\" />}\n          </span>\n        </>\n      ))}\n    </ListBoxItemPrimitive>\n  )\n}\n\n// Note: This is not exposed component, but it's used in other components to render dropdowns.\nexport { DropdownItem, dropdownItemStyles, DropdownSection, type DropdownSectionProps }\n",
    "type": "ui"
  },
  "avatar": {
    "component": "@/components/ui/avatar",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { tv, type VariantProps } from 'tailwind-variants'\n\nconst avatarStyles = tv({\n  base: [\n    'inline-grid shrink-0 bg-secondary align-middle [--avatar-radius:20%] [--ring-opacity:20%] *:col-start-1 *:row-start-1',\n    'loo2ppvkxrcah38e outline outline-1 -outline-offset-1 outline-black/[--ring-opacity] dark:outline-white/[--ring-opacity]'\n  ],\n  variants: {\n    size: {\n      small: 'size-6',\n      medium: 'size-8',\n      large: 'size-10'\n    },\n    shape: {\n      square: 'rounded-[--avatar-radius] *:rounded-[--avatar-radius]',\n      circle: 'rounded-full *:rounded-full'\n    }\n  },\n\n  defaultVariants: {\n    shape: 'circle',\n    size: 'medium'\n  }\n})\n\ninterface AvatarProps\n  extends React.ComponentPropsWithoutRef<'span'>,\n    VariantProps<typeof avatarStyles> {\n  src?: string | null\n  initials?: string\n  alt?: string\n  className?: string\n}\n\nconst avatarGroupStyles = tv({\n  base: 'flex items-center justify-center -space-x-2 [&_[data-slot=avatar]]:ring-2 [&_[data-slot=avatar]]:ring-background'\n})\n\ninterface AvatarGroupProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof avatarGroupStyles> {\n  children: React.ReactNode\n}\n\nconst AvatarGroup = ({ className, ...props }: AvatarGroupProps) => {\n  return <div className={avatarGroupStyles({ className })} {...props} />\n}\n\nconst Avatar = ({\n  src = null,\n  initials,\n  alt = '',\n  className,\n  shape,\n  size,\n  ...props\n}: AvatarProps) => {\n  return (\n    <span\n      data-slot=\"avatar\"\n      {...props}\n      className={avatarStyles({ shape, size, className })}\n    >\n      {initials && (\n        <svg\n          className=\"select-none fill-current text-[48px] font-medium uppercase\"\n          viewBox=\"0 0 100 100\"\n          aria-hidden={alt ? undefined : 'true'}\n        >\n          {alt && <title>{alt}</title>}\n          <text\n            x=\"50%\"\n            y=\"50%\"\n            alignmentBaseline=\"middle\"\n            dominantBaseline=\"middle\"\n            textAnchor=\"middle\"\n            dy=\".125em\"\n          >\n            {initials}\n          </text>\n        </svg>\n      )}\n      {src && <img src={src} alt={alt} />}\n    </span>\n  )\n}\n\nexport { Avatar, AvatarGroup }\n",
    "type": "ui"
  },
  "combo-box": {
    "component": "@/components/ui/combo-box",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconChevronLgDown } from '@irsyadadl/paranoid'\nimport {\n  ComboBox as ComboboxPrimitive,\n  type ComboBoxProps as ComboboxPrimitiveProps,\n  type ValidationResult\n} from 'react-aria-components'\n\nimport { Button } from './button'\nimport { DropdownItem, DropdownSection } from './dropdown'\nimport { Description, FieldError, FieldGroup, Input, Label } from './field'\nimport { ListBoxPicker } from './list-box'\nimport { PopoverPicker } from './popover'\nimport { ctr } from './primitive'\n\ninterface ComboBoxProps<T extends object>\n  extends Omit<ComboboxPrimitiveProps<T>, 'children'> {\n  label?: string\n  placeholder?: string\n  description?: string | null\n  errorMessage?: string | ((validation: ValidationResult) => string)\n  children: React.ReactNode | ((item: T) => React.ReactNode)\n}\n\nconst ComboBox = <T extends object>({\n  label,\n  description,\n  errorMessage,\n  children,\n  placeholder,\n  items,\n  ...props\n}: ComboBoxProps<T>) => {\n  return (\n    <ComboboxPrimitive\n      menuTrigger=\"focus\"\n      {...props}\n      className={ctr(props.className, 'group w-full flex flex-col gap-1')}\n    >\n      <Label>{label}</Label>\n      <FieldGroup className=\"pl-0\">\n        <Input className=\"pl-2.5\" placeholder={placeholder} />\n        <Button\n          size=\"square-petite\"\n          appearance=\"plain\"\n          className=\"h-7 w-8 rounded outline-offset-0 active:bg-transparent hover:bg-transparent pressed:bg-transparent\"\n        >\n          <IconChevronLgDown\n            aria-hidden\n            className=\"text-muted-fg transition duration-200 group-open:rotate-180 group-open:text-fg\"\n          />\n        </Button>\n      </FieldGroup>\n      {description && <Description>{description}</Description>}\n      <FieldError>{errorMessage}</FieldError>\n      <PopoverPicker>\n        <ListBoxPicker items={items}>{children}</ListBoxPicker>\n      </PopoverPicker>\n    </ComboboxPrimitive>\n  )\n}\n\nconst ComboBoxItem = DropdownItem\nconst ComboBoxSection = DropdownSection\n\nexport { ComboBox, ComboBoxItem, ComboBoxSection, type ComboBoxProps }\n",
    "type": "ui"
  },
  "search-field": {
    "component": "@/components/ui/search-field",
    "raw": "'use client'\n\nimport { IconSearch, IconX } from '@irsyadadl/paranoid'\nimport {\n  SearchField as SearchFieldPrimitive,\n  type SearchFieldProps as SearchFieldPrimitiveProps,\n  type ValidationResult\n} from 'react-aria-components'\n\nimport { Button } from './button'\nimport { Description, FieldError, FieldGroup, Input, Label } from './field'\nimport { ctr } from './primitive'\n\nexport interface SearchFieldProps extends SearchFieldPrimitiveProps {\n  label?: string\n  placeholder?: string\n  description?: string\n  errorMessage?: string | ((validation: ValidationResult) => string)\n}\n\nexport function SearchField({\n  placeholder = 'Search',\n  label,\n  description,\n  errorMessage,\n  ...props\n}: SearchFieldProps) {\n  return (\n    <SearchFieldPrimitive\n      {...props}\n      className={ctr(props.className, 'group flex min-w-[40px] flex-col gap-1')}\n    >\n      {label && <Label>{label}</Label>}\n      <FieldGroup>\n        <IconSearch\n          aria-hidden\n          className=\"ml-2 size-4 shrink-0 text-muted-fg group-disabled:text-muted-fg/50 forced-colors:text-[ButtonText] forced-colors:group-disabled:text-[GrayText]\"\n        />\n        <Input\n          placeholder={placeholder}\n          className=\"[&::-webkit-search-cancel-button]:hidden\"\n        />\n        <Button\n          size=\"square-petite\"\n          appearance=\"plain\"\n          className=\"mr-1 size-8 text-muted-fg group-empty:invisible hover:bg-transparent pressed:text-fg\"\n        >\n          <IconX aria-hidden className=\"size-4\" />\n        </Button>\n      </FieldGroup>\n      {description && <Description>{description}</Description>}\n      <FieldError>{errorMessage}</FieldError>\n    </SearchFieldPrimitive>\n  )\n}\n",
    "type": "ui"
  },
  "multi-select": {
    "component": "@/components/ui/multi-select",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { IconCircleXFill } from '@irsyadadl/paranoid'\nimport { Command, CommandGroup, CommandInput, CommandItem, CommandList } from 'cmdk'\n\nimport { Badge } from './badge'\n\ninterface ItemProps {\n  label: string\n  value: string\n}\n\ninterface Props {\n  items: ItemProps[]\n  placeholder?: string\n  selected: ItemProps[]\n  setSelected: React.Dispatch<React.SetStateAction<ItemProps[]>>\n  max?: number\n}\n\nexport function MultiSelect({\n  items,\n  placeholder = 'Select items...',\n  max = 5,\n  selected,\n  setSelected\n}: Props) {\n  const inputRef = React.useRef<HTMLInputElement>(null)\n  const [open, setOpen] = React.useState(false)\n  const [inputValue, setInputValue] = React.useState('')\n  const handleUnselect = React.useCallback(\n    (item: ItemProps) => {\n      setSelected((prev) => prev.filter((s) => s.value !== item.value))\n    },\n    [setSelected]\n  )\n\n  const handleKeyDown = React.useCallback(\n    (e: React.KeyboardEvent<HTMLDivElement>) => {\n      const input = inputRef.current\n      if (input) {\n        if (e.key === 'Delete' || e.key === 'Backspace') {\n          if (input.value === '') {\n            setSelected((prev) => {\n              const newSelected = [...prev]\n              newSelected.pop()\n              return newSelected\n            })\n          }\n        }\n\n        if (e.key === 'Escape') {\n          input.blur()\n        }\n      }\n    },\n    [setSelected]\n  )\n  const selectables = items.filter((item) => !selected.includes(item))\n  React.useEffect(() => {\n    if (selected.length >= max) {\n      setOpen(false)\n    }\n  }, [selected, max])\n  return (\n    <Command onKeyDown={handleKeyDown} className=\"overflow-visible bg-transparent\">\n      <div className=\"group rounded-md border border-input bg-background px-2 py-[0.55rem] text-sm transition duration-200 focus-within:border-primary/70 focus-within:ring-[0.20rem] focus-within:ring-primary/20 focus-within:ring-offset-0\">\n        <div className=\"flex flex-wrap gap-1\">\n          {selected.map((item, index) => {\n            return (\n              <Badge key={index} className=\"inline-flex items-center rounded-sm px-1\">\n                <span className=\"text-xs\">{item.label}</span>\n                <button\n                  aria-label={`Remove ${item.label} option`}\n                  aria-roledescription=\"button to remove option\"\n                  type=\"button\"\n                  className=\"inline-grid size-4 place-content-center rounded-full border border-transparent focus:border-fg focus:text-fg focus:outline-none\"\n                  onKeyDown={(e) => {\n                    if (e.key === 'Enter') {\n                      handleUnselect(item)\n                    }\n                  }}\n                  onMouseDown={(e) => {\n                    e.preventDefault()\n                    e.stopPropagation()\n                  }}\n                  onClick={() => handleUnselect(item)}\n                >\n                  <span className=\"sr-only\">Remove {item.label} option</span>\n                  <IconCircleXFill className=\"size-3.5 hover:text-fg\" />\n                </button>\n              </Badge>\n            )\n          })}\n\n          <CommandInput\n            ref={inputRef}\n            value={inputValue}\n            onValueChange={setInputValue}\n            onBlur={() => setOpen(false)}\n            onFocus={() => {\n              if (selected.length < max) {\n                setOpen(true)\n              }\n            }}\n            placeholder={\n              selected.length >= max ? 'Remove one to select more' : placeholder\n            }\n            className=\"ml-0.5 flex-1 bg-transparent outline-none placeholder:text-muted-fg\"\n          />\n        </div>\n      </div>\n      <div className=\"relative\">\n        <CommandList>\n          {open && selectables.length > 0 ? (\n            <div className=\"absolute top-0 z-10 mt-2 max-h-72 w-full overflow-y-auto overflow-x-hidden rounded-lg border bg-popover p-1 text-popover-fg shadow-md outline-none animate-in\">\n              <CommandGroup className=\"h-full overflow-auto p-0\">\n                {selectables.map((item) => (\n                  <CommandItem\n                    disabled={selected.includes(item)}\n                    key={item.value}\n                    onMouseDown={(e) => {\n                      e.preventDefault()\n                      e.stopPropagation()\n                    }}\n                    onSelect={() => {\n                      setInputValue('')\n                      setSelected((prev) => [...prev, item])\n                    }}\n                    className=\"relative flex w-full cursor-pointer justify-between rounded-md p-2 text-sm transition-colors data-[selected=true]:bg-primary data-[selected=true]:text-primary-fg\"\n                  >\n                    {item.label}\n                  </CommandItem>\n                ))}\n              </CommandGroup>\n            </div>\n          ) : null}\n        </CommandList>\n      </div>\n    </Command>\n  )\n}\n",
    "type": "ui"
  },
  "dialog": {
    "component": "@/components/ui/dialog",
    "raw": "'use client'\n\nimport { Dialog as DialogPrimitive, type DialogProps } from 'react-aria-components'\nimport { twMerge } from 'tailwind-merge'\n\nconst Dialog = ({ className, ...props }: DialogProps) => {\n  return (\n    <DialogPrimitive\n      {...props}\n      className={twMerge(\n        'relative max-h-[inherit] overflow-y-auto p-4 focus:outline-none outline-0 [[data-placement]>&]:p-4 dlc',\n        className\n      )}\n    />\n  )\n}\n\nexport { Dialog }\n",
    "type": "ui"
  },
  "menu": {
    "component": "@/components/ui/menu",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { IconBulletFill, IconCheck, IconChevronLgRight } from '@irsyadadl/paranoid'\nimport {\n  Button,\n  type ButtonProps,\n  composeRenderProps,\n  Header,\n  Keyboard,\n  Menu as MenuPrimitive,\n  MenuItem as MenuItemPrimitive,\n  type MenuItemProps as MenuItemPrimitiveProps,\n  type MenuProps,\n  MenuTrigger as MenuTriggerPrimitive,\n  OverlayArrow,\n  Popover,\n  PopoverContext,\n  type PopoverProps,\n  Section,\n  Separator,\n  type SeparatorProps,\n  SubmenuTrigger as SubmenuTriggerPrimitive,\n  useSlottedContext\n} from 'react-aria-components'\nimport { twJoin } from 'tailwind-merge'\nimport type { VariantProps } from 'tailwind-variants'\n\nimport { dropdownItemStyles } from './dropdown'\nimport { cn } from './primitive'\n\nconst Menu = MenuTriggerPrimitive\nconst MenuTrigger = ({ className, ...props }: ButtonProps) => (\n  <Button\n    aria-label=\"Open Menu\"\n    className={cn(\n      'inline text-left focus:outline-none focus-visible:ring-1 focus-visible:ring-primary-500 pressed:outline-none',\n      className\n    )}\n    {...props}\n  />\n)\n\nconst SubmenuTrigger = SubmenuTriggerPrimitive\n\nconst MenuSection = Section\n\nexport interface MenuContentProps<T>\n  extends Omit<PopoverProps, 'children' | 'style'>,\n    MenuProps<T> {\n  className?: string\n  popoverClassName?: string\n  showArrow?: boolean\n}\n\nconst MenuContent = <T extends object>({\n  className,\n  showArrow = false,\n  popoverClassName,\n  offset = 4,\n  ...props\n}: MenuContentProps<T>) => {\n  const popoverContext = useSlottedContext(PopoverContext)!\n  const isSubmenu = popoverContext?.trigger === 'SubmenuTrigger'\n  let currentOffset = showArrow ? 12 : 8\n  currentOffset = isSubmenu ? currentOffset - 6 : currentOffset\n  return (\n    <Popover\n      offset={currentOffset}\n      className={cn(\n        'z-50 min-w-40 rounded-xl border bg-popover text-popover-fg outline-none entering:animate-in exiting:animate-out entering:fade-in-0 exiting:fade-out-0 exiting:zoom-out-95 data-[placement=bottom]:slide-in-from-top-2 data-[placement=left]:slide-in-from-right-2 data-[placement=right]:slide-in-from-left-2 data-[placement=top]:slide-in-from-bottom-2',\n        popoverClassName\n      )}\n      {...props}\n    >\n      {showArrow && (\n        <OverlayArrow className=\"group\">\n          <svg\n            width={12}\n            height={12}\n            viewBox=\"0 0 12 12\"\n            className=\"block fill-popover stroke-border group-placement-left:-rotate-90 group-placement-right:rotate-90 group-placement-bottom:rotate-180 forced-colors:fill-[Canvas] forced-colors:stroke-[ButtonBorder]\"\n          >\n            <path d=\"M0 0 L6 6 L12 0\" />\n          </svg>\n        </OverlayArrow>\n      )}\n      <MenuPrimitive\n        className={cn(\n          'z32kk',\n          'max-h-[inherit] overflow-auto rounded-xl p-1 outline outline-0 [clip-path:inset(0_0_0_0_round_calc(var(--radius)-2px))]',\n          className\n        )}\n        {...props}\n      />\n    </Popover>\n  )\n}\n\ninterface MenuItemProps\n  extends Omit<MenuItemPrimitiveProps, 'isDanger'>,\n    VariantProps<typeof dropdownItemStyles> {\n  isDanger?: boolean\n}\n\nconst MenuItem = ({ className, isDanger = false, children, ...props }: MenuItemProps) => (\n  <MenuItemPrimitive\n    className={composeRenderProps(className, (className, renderProps) =>\n      dropdownItemStyles({\n        ...renderProps,\n        className\n      })\n    )}\n    data-danger={isDanger ? 'true' : undefined}\n    {...props}\n  >\n    {(values) => (\n      <>\n        {typeof children === 'function' ? children(values) : children}\n        {values.hasSubmenu && <IconChevronLgRight className=\"gpfw ml-auto size-3.5\" />}\n      </>\n    )}\n  </MenuItemPrimitive>\n)\n\nexport interface MenuHeaderProps extends React.ComponentProps<typeof Header> {\n  inset?: boolean\n  separator?: boolean\n}\n\nconst MenuHeader = ({\n  className,\n  inset,\n  separator = false,\n  ...props\n}: MenuHeaderProps) => (\n  <Header\n    className={cn(\n      'px-2 py-1.5 text-base font-semibold sm:text-sm',\n      inset && 'pl-8',\n      separator && '-mx-1 mb-1 border-b border-b-border px-3 pb-[0.625rem]',\n      className\n    )}\n    {...props}\n  />\n)\n\nconst MenuSeparator = ({ className, ...props }: SeparatorProps) => (\n  <Separator className={cn('-mx-1 my-1 h-px bg-muted', className)} {...props} />\n)\n\ninterface MenuKeyboardProps extends React.HTMLAttributes<HTMLElement> {\n  keys: string | string[]\n}\n\nconst MenuKeyboard = ({ keys, className, ...props }: MenuKeyboardProps) => {\n  return (\n    <Keyboard\n      className={cn(\n        '-mr-1 ml-auto hidden items-center gap-[0.170rem] px-1 lg:inline-flex',\n        className\n      )}\n      {...props}\n    >\n      {(Array.isArray(keys) ? keys : keys.split('')).map((char, index) => (\n        <kbd\n          key={index}\n          className={twJoin([\n            'text-center font-sans capitalize text-muted-fg group-focus:text-fg forced-colors:group-focus:text-[HighlightText]',\n            'inline-grid min-h-5 min-w-5 place-content-center rounded bg-background font-sans text-[.75rem] uppercase text-fg ring-1 ring-fg/10 group-focus:opacity-60',\n            index > 0 && char.length > 1 && 'pl-1'\n          ])}\n        >\n          {char}\n        </kbd>\n      ))}\n    </Keyboard>\n  )\n}\n\nconst MenuCheckboxItem = ({ className, children, ...props }: MenuItemProps) => (\n  <MenuItem className={className} {...props}>\n    {(values) => (\n      <>\n        <span className=\"absolute right-2 flex size-4 items-center justify-center\">\n          {values.isSelected && <IconCheck className=\"size-4\" />}\n        </span>\n\n        {typeof children === 'function' ? children(values) : children}\n      </>\n    )}\n  </MenuItem>\n)\n\nconst MenuRadioItem = ({ className, children, ...props }: MenuItemProps) => (\n  <MenuItem className={className} {...props}>\n    {(values) => (\n      <>\n        <span className=\"absolute right-2 flex size-2 items-center justify-center\">\n          {values.isSelected && <IconBulletFill className=\"size-2\" />}\n        </span>\n        {typeof children === 'function' ? children(values) : children}\n      </>\n    )}\n  </MenuItem>\n)\n\nexport {\n  Menu,\n  MenuCheckboxItem,\n  MenuContent,\n  MenuHeader,\n  MenuItem,\n  MenuItemPrimitive,\n  MenuKeyboard,\n  MenuPrimitive,\n  MenuRadioItem,\n  MenuSection,\n  MenuSeparator,\n  MenuTrigger,\n  SubmenuTrigger,\n  type MenuItemProps\n}\n",
    "type": "ui"
  },
  "progress-bar": {
    "component": "@/components/ui/progress-bar",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { motion } from 'framer-motion'\nimport {\n  ProgressBar as ProgressBarPrimitive,\n  type ProgressBarProps as ProgressBarPrimitiveProps\n} from 'react-aria-components'\n\nimport { Label } from './field'\nimport { ctr } from './primitive'\n\nexport interface ProgressBarProps extends ProgressBarPrimitiveProps {\n  label?: string\n}\n\nexport function ProgressBar({ label, ...props }: ProgressBarProps) {\n  return (\n    <ProgressBarPrimitive\n      {...props}\n      className={ctr(props.className, 'flex flex-col gap-1')}\n    >\n      {({ percentage, valueText, isIndeterminate }) => (\n        <>\n          <div className=\"flex justify-between gap-2\">\n            <Label>{label}</Label>\n            <span className=\"text-sm text-muted-fg\">{valueText}</span>\n          </div>\n          <div className=\"relative h-2 min-w-64 overflow-hidden rounded-full bg-secondary outline outline-1 -outline-offset-1 outline-transparent\">\n            {!isIndeterminate ? (\n              <motion.div\n                className=\"absolute left-0 top-0 h-full rounded-full bg-primary forced-colors:bg-[Highlight]\"\n                initial={{ width: '0%' }}\n                animate={{ width: `${percentage}%` }}\n                transition={{ duration: 0.5, ease: 'easeInOut' }}\n              />\n            ) : (\n              <motion.div\n                className=\"absolute top-0 h-full rounded-full bg-primary forced-colors:bg-[Highlight]\"\n                initial={{ left: '0%', width: '40%' }}\n                animate={{ left: ['0%', '100%', '0%'] }}\n                transition={{\n                  repeat: Infinity,\n                  duration: 2,\n                  ease: 'easeInOut'\n                }}\n              />\n            )}\n          </div>\n        </>\n      )}\n    </ProgressBarPrimitive>\n  )\n}\n",
    "type": "ui"
  },
  "badge": {
    "component": "@/components/ui/badge",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { tv, type VariantProps } from 'tailwind-variants'\n\nconst badgeIntents = {\n  primary:\n    'ring-primary-300 dark:ring-primary-400/20 bg-primary-500/15 text-primary-700 hover:bg-primary-500/25 dark:text-primary-400 dark:hover:bg-primary-500/25',\n  secondary:\n    'ring-zinc-300 dark:ring-zinc-400/20 bg-zinc-600/10 text-zinc-700 hover:bg-zinc-600/20 dark:bg-white/5 dark:text-zinc-400 dark:hover:bg-white/10',\n  success:\n    'ring-emerald-300 dark:ring-emerald-400/20 bg-emerald-400/20 text-emerald-700 hover:bg-emerald-400/30 dark:bg-emerald-400/10 dark:text-emerald-300 dark:hover:bg-emerald-400/15',\n  info: 'ring-sky dark:ring-sky-400/20 bg-sky-500/15 text-sky-700 hover:bg-sky-500/25 dark:bg-sky-500/10 dark:text-sky-500 dark:hover:bg-sky-500/20',\n  warning:\n    'ring-amber-300 dark:ring-amber-400/20 bg-amber-400/20 text-amber-700 hover:bg-amber-400/30 dark:bg-amber-400/10 dark:text-amber-400 dark:hover:bg-amber-400/15',\n  danger:\n    'ring-red-300 dark:ring-red-400/20 bg-red-500/15 text-red-700 hover:bg-red-500/25 dark:bg-red-500/10 dark:text-red-400 dark:hover:bg-red-500/20',\n  light:\n    'ring-zinc-300 dark:ring-white bg-white hover:bg-zinc-100 dark:hover:bg-zinc-200 dark:ring-inset text-zinc-900 dark:text-zinc-900',\n  dark: 'bg-zinc-800 hover:bg-zinc-800/90 ring-inset ring-zinc-800 text-white dark:ring-zinc-600',\n  'light/dark':\n    'bg-white ring-zinc-200 text-zinc-900 dark:text-white dark:bg-zinc-800 dark:hover:bg-zinc-800/80 dark:ring-zinc-600'\n}\n\nconst badgeStyles = tv({\n  base: 'inline-flex items-center gap-x-1.5 py-0.5 text-xs/5 font-medium ring-1 ring-white/10 dark:ring-inset forced-colors:outline [&_svg]:size-3.5',\n  variants: {\n    intent: { ...badgeIntents },\n    shape: { square: 'rounded-md px-1.5', circle: 'px-2 rounded-full' }\n  },\n  defaultVariants: {\n    intent: 'primary',\n    shape: 'square'\n  }\n})\n\ninterface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeStyles> {\n  className?: string\n  children: React.ReactNode\n}\n\nfunction Badge({ children, intent, shape, className, ...props }: BadgeProps) {\n  return (\n    <span {...props} className={badgeStyles({ intent, shape, className })}>\n      {children}\n    </span>\n  )\n}\n\nexport { Badge, badgeIntents, badgeStyles }\n",
    "type": "ui"
  },
  "color-picker": {
    "component": "@/components/ui/color-picker",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport {\n  ColorPicker as ColorPickerPrimitive,\n  type ColorPickerProps as ColorPickerPrimitiveProps,\n  type ColorSpace,\n  DialogTrigger,\n  getColorChannels,\n  Group\n} from 'react-aria-components'\nimport tailwindColors from 'tailwindcss/colors'\n\nimport { Button } from './button'\nimport {\n  ColorArea,\n  ColorField,\n  ColorSlider,\n  ColorSwatch,\n  ColorSwatchPicker,\n  ColorSwatchPickerItem,\n  ColorThumb,\n  defaultColor,\n  isBrightColor\n} from './color'\nimport { Dialog } from './dialog'\nimport { DynamicOverlay } from './dynamic-overlay'\nimport { Description, Label } from './field'\nimport { Select, SelectItem } from './select'\n\ninterface ColorPickerProps extends ColorPickerPrimitiveProps {\n  space?: ColorSpace\n  enableColorSwatch?: boolean\n  enableColorFormatSelection?: boolean\n  isHex?: boolean\n  label?: string\n  description?: string\n  errorMessage?: string\n  placeholder?: string\n  colors?: string[]\n  isDisabled?: boolean\n}\n\nconst ColorPicker = ({\n  enableColorSwatch = false,\n  enableColorFormatSelection = false,\n  label,\n  description,\n  colors = [...Object.values(tailwindColors.zinc)],\n  placeholder = 'Fill Color',\n  isHex = true,\n  isDisabled = false,\n  ...props\n}: ColorPickerProps) => {\n  const [space, setSpace] = React.useState<ColorSpace>('rgb')\n  const [isHexFormat, setIsHexFormat] = React.useState(false)\n  return (\n    <Group className=\"flex w-full flex-col gap-1\">\n      {label && <Label>{label}</Label>}\n      <ColorPickerPrimitive defaultValue={defaultColor} {...props}>\n        <DialogTrigger>\n          <Button\n            isDisabled={isDisabled}\n            appearance=\"outline\"\n            className=\"w-full max-w-sm justify-start\"\n          >\n            <ColorSwatch\n              isBright={props.value ? isBrightColor(props.value) : false}\n              className=\"-ml-1.5 size-6\"\n            />\n            <span>{placeholder}</span>\n          </Button>\n          <DynamicOverlay\n            placement=\"bottom start\"\n            className=\"w-full p-0 overflow-hidden min-w-full sm:w-fit sm:min-w-fit\"\n          >\n            <Dialog className=\"[[data-placement]>&]:p-[0.70rem] lg:w-[18rem] lg:p-0\">\n              <div className=\"space-y-2\">\n                <div>\n                  <ColorArea\n                    className=\"w-full sm:w-[calc(18rem-1.30rem)]\"\n                    colorSpace=\"hsb\"\n                    xChannel=\"saturation\"\n                    yChannel=\"brightness\"\n                  >\n                    <ColorThumb className=\"z-50\" />\n                  </ColorArea>\n                  <ColorSlider\n                    showOutput={false}\n                    className=\"mt-2 [&_.cstrk]:orientation-horizontal:h-3\"\n                    colorSpace=\"hsb\"\n                    channel=\"hue\"\n                  />\n                </div>\n\n                <div className=\"grid gap-2\">\n                  {enableColorFormatSelection && (\n                    <Select\n                      selectedKey={space}\n                      onSelectionChange={(s) => {\n                        setSpace(s as ColorSpace)\n                        setIsHexFormat(s === 'hex')\n                      }}\n                      aria-label=\"Type of Color\"\n                    >\n                      {['rgb', 'hsl', 'hsb', 'hex'].map((s) => (\n                        <SelectItem key={s} id={s} textValue={s}>\n                          {s}\n                        </SelectItem>\n                      ))}\n                    </Select>\n                  )}\n\n                  {enableColorFormatSelection ? (\n                    <div className=\"flex gap-1 w-[inherit]\">\n                      {isHexFormat ? (\n                        <ColorField colorSpace={space} />\n                      ) : (\n                        getColorChannels(space).map((channel) => (\n                          <ColorField\n                            aria-label={channel.toString()}\n                            colorSpace={space}\n                            channel={channel}\n                            key={channel}\n                          />\n                        ))\n                      )}\n                    </div>\n                  ) : (\n                    <ColorField colorSpace={space} />\n                  )}\n                </div>\n\n                {enableColorSwatch && colors && colors.length > 0 && (\n                  <ColorSwatchPicker className=\"flex flex-wrap gap-x-2 gap-y-2.5\">\n                    {colors.map((color) => (\n                      <ColorSwatchPickerItem key={color} color={color} />\n                    ))}\n                  </ColorSwatchPicker>\n                )}\n              </div>\n            </Dialog>\n          </DynamicOverlay>\n        </DialogTrigger>\n      </ColorPickerPrimitive>\n      {description && <Description>{description}</Description>}\n    </Group>\n  )\n}\n\nexport { ColorPicker, type ColorPickerProps }\n",
    "type": "ui"
  },
  "toggle-button": {
    "component": "@/components/ui/toggle-button",
    "raw": "'use client'\n\nimport {\n  composeRenderProps,\n  ToggleButton as ToggleButtonPrimitive,\n  type ToggleButtonProps\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { focusRing } from './primitive'\n\nconst toggleButtonStyles = tv({\n  extend: focusRing,\n  base: [\n    'inline-flex h-10 items-center justify-center whitespace-nowrap rounded-md px-4 py-2 text-base font-medium ring-offset-background transition-colors focus:outline-none focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-1 pressed:outline-none disabled:pointer-events-none disabled:opacity-50 sm:text-sm',\n    '[&_svg]:size-4'\n  ],\n  variants: {\n    isSelected: {\n      false:\n        'hover:bg-secondary pressed:bg-tertiary forced-colors:!bg-[ButtonFace] forced-colors:!text-[ButtonText]',\n      true: 'bg-secondary hover:bg-secondary/80 pressed:bg-secondary/70 forced-colors:!bg-[Highlight] forced-colors:!text-[HighlightText]'\n    },\n    isDisabled: {\n      true: 'border-black/5 bg-gray-100 text-gray-300 dark:border-white/5 dark:bg-zinc-800 dark:text-zinc-600 forced-colors:border-[GrayText] forced-colors:!bg-[ButtonFace] forced-colors:!text-[GrayText]'\n    }\n  }\n})\n\nexport function ToggleButton(props: ToggleButtonProps) {\n  return (\n    <ToggleButtonPrimitive\n      {...props}\n      className={composeRenderProps(props.className, (className, renderProps) =>\n        toggleButtonStyles({ ...renderProps, className })\n      )}\n    />\n  )\n}\n",
    "type": "ui"
  },
  "snippet": {
    "component": "@/components/ui/snippet",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { IconCheck, IconDuplicate } from '@irsyadadl/paranoid'\nimport { AnimatePresence, motion } from 'framer-motion'\nimport { toast } from 'sonner'\nimport { twMerge } from 'tailwind-merge'\n\nimport { Button, type ButtonProps } from './button'\n\nconst snippetVariants = {\n  hidden: { opacity: 0, scale: 0.5 },\n  visible: { opacity: 1, scale: 1 }\n}\n\ninterface SnippetProps extends React.HTMLAttributes<HTMLDivElement> {\n  text: string\n}\n\nconst Snippet: React.FC<SnippetProps> = ({ className, text, ...props }) => {\n  const [copied, setCopied] = React.useState(false)\n\n  const handleCopy = async () => {\n    if (navigator.clipboard && window.isSecureContext) {\n      try {\n        await navigator.clipboard.writeText(text)\n        setCopied(true)\n        setTimeout(() => setCopied(false), 2000) // Reset the copied state after 2 seconds\n      } catch (error) {\n        toast.error('Failed to copy to clipboard')\n      }\n    } else {\n      toast.error('Failed to copy to clipboard')\n    }\n  }\n\n  return (\n    <div\n      {...props}\n      className={twMerge(\n        'relative flex items-center justify-between rounded-lg border bg-tertiary py-2.5 pl-3 pr-2.5 font-mono text-sm [&>svg:hover]:text-fg [&>svg]:text-muted-fg [&>svg]:transition [&_svg]:shrink-0',\n        className\n      )}\n    >\n      <span className=\"mr-6\">{text}</span>\n      <Button\n        className=\"size-7 backdrop-blur-lg text-white bg-zinc-800 border hover:bg-zinc-700 border-zinc-700\"\n        aria-label=\"Copy imports statement\"\n        size=\"square-petite\"\n        appearance=\"outline\"\n        onPress={handleCopy}\n      >\n        <AnimatePresence mode=\"wait\" initial={false}>\n          {copied ? (\n            <motion.span\n              key=\"checkmark\"\n              variants={snippetVariants}\n              initial=\"hidden\"\n              animate=\"visible\"\n              exit=\"hidden\"\n            >\n              <IconCheck />\n            </motion.span>\n          ) : (\n            <motion.span\n              key=\"copy\"\n              variants={snippetVariants}\n              initial=\"hidden\"\n              animate=\"visible\"\n              exit=\"hidden\"\n            >\n              <IconDuplicate />\n            </motion.span>\n          )}\n        </AnimatePresence>\n      </Button>\n    </div>\n  )\n}\n\ninterface CopyButtonProps extends ButtonProps {\n  isCopied?: boolean\n  ariaLabel?: string\n  initialIcon?: React.ReactNode\n  copiedIcon?: React.ReactNode\n}\n\nconst CopyButton = ({\n  initialIcon,\n  copiedIcon,\n  ariaLabel = 'Copy',\n  isCopied,\n  ...props\n}: CopyButtonProps) => {\n  return (\n    <Button\n      className=\"size-7 backdrop-blur-lg text-white bg-zinc-800 border hover:bg-zinc-700 border-zinc-700\"\n      aria-label={ariaLabel}\n      size=\"square-petite\"\n      appearance=\"outline\"\n      {...props}\n    >\n      <AnimatePresence mode=\"wait\" initial={false}>\n        {isCopied ? (\n          <motion.span\n            key=\"checkmark-import\"\n            variants={snippetVariants}\n            initial=\"hidden\"\n            animate=\"visible\"\n            exit=\"hidden\"\n          >\n            {copiedIcon ?? <IconCheck />}\n          </motion.span>\n        ) : (\n          <motion.span\n            key=\"copy-import\"\n            variants={snippetVariants}\n            initial=\"hidden\"\n            animate=\"visible\"\n            exit=\"hidden\"\n          >\n            {initialIcon ?? <IconDuplicate />}\n          </motion.span>\n        )}\n      </AnimatePresence>\n    </Button>\n  )\n}\n\nexport { CopyButton, Snippet, snippetVariants, type SnippetProps }\n",
    "type": "ui"
  },
  "number-field": {
    "component": "@/components/ui/number-field",
    "raw": "'use client'\n\nimport { IconChevronDown, IconChevronUp, IconMinus, IconPlus } from '@irsyadadl/paranoid'\nimport {\n  Button,\n  type ButtonProps,\n  NumberField as NumberFieldPrimitive,\n  type NumberFieldProps as NumberFieldPrimitiveProps,\n  type ValidationResult\n} from 'react-aria-components'\n\nimport {\n  Description,\n  fieldBorderStyles,\n  FieldError,\n  FieldGroup,\n  Input,\n  Label\n} from './field'\nimport { cn, ctr, useMediaQuery } from './primitive'\n\nexport interface NumberFieldProps extends NumberFieldPrimitiveProps {\n  label?: string\n  description?: string\n  placeholder?: string\n  errorMessage?: string | ((validation: ValidationResult) => string)\n}\n\nexport function NumberField({\n  label,\n  placeholder,\n  description,\n  errorMessage,\n  ...props\n}: NumberFieldProps) {\n  const isMobile = useMediaQuery('(max-width: 768px)')\n  return (\n    <NumberFieldPrimitive\n      {...props}\n      className={ctr(props.className, 'group flex flex-col gap-1')}\n    >\n      <Label>{label}</Label>\n      <FieldGroup className=\"group-disabled:bg-secondary\">\n        {(renderProps) => (\n          <>\n            {isMobile ? <StepperButton slot=\"decrement\" className=\"border-r\" /> : null}\n            <Input placeholder={placeholder} />\n            <div\n              className={fieldBorderStyles({\n                ...renderProps,\n                className: 'grid h-10 place-content-center border-s'\n              })}\n            >\n              {isMobile ? (\n                <StepperButton slot=\"increment\" />\n              ) : (\n                <div className=\"flex h-full flex-col\">\n                  <StepperButton\n                    slot=\"increment\"\n                    emblemType=\"chevron\"\n                    className=\"h-5 px-1\"\n                  />\n                  <div\n                    className={fieldBorderStyles({\n                      ...renderProps,\n                      className: 'border-b'\n                    })}\n                  />\n                  <StepperButton\n                    slot=\"decrement\"\n                    emblemType=\"chevron\"\n                    className=\"h-5 px-1\"\n                  />\n                </div>\n              )}\n            </div>\n          </>\n        )}\n      </FieldGroup>\n      {description && <Description>{description}</Description>}\n      <FieldError>{errorMessage}</FieldError>\n    </NumberFieldPrimitive>\n  )\n}\n\ninterface StepperButtonProps extends ButtonProps {\n  slot: 'increment' | 'decrement'\n  emblemType?: 'chevron' | 'default'\n  className?: string\n}\n\nconst StepperButton = ({\n  slot,\n  className,\n  emblemType = 'default',\n  ...props\n}: StepperButtonProps) => {\n  const icon =\n    emblemType === 'chevron' ? (\n      slot === 'increment' ? (\n        <IconChevronUp className=\"size-5\" />\n      ) : (\n        <IconChevronDown className=\"size-5\" />\n      )\n    ) : slot === 'increment' ? (\n      <IconPlus />\n    ) : (\n      <IconMinus />\n    )\n  return (\n    <Button\n      className={cn(\n        'h-10 cursor-default px-2 text-muted-fg pressed:bg-primary pressed:text-primary-fg group-disabled:bg-secondary forced-colors:group-disabled:text-[GrayText]',\n        className\n      )}\n      slot={slot}\n      {...props}\n    >\n      {icon}\n    </Button>\n  )\n}\n",
    "type": "ui"
  },
  "table": {
    "component": "@/components/ui/table",
    "raw": "'use client'\n\nimport { IconChevronDown, IconChevronUp, IconDotGrid2X3 } from '@irsyadadl/paranoid'\nimport {\n  Button,\n  Cell,\n  type CellProps,\n  Collection,\n  Column,\n  type ColumnProps,\n  Row,\n  type RowProps,\n  Table as TablePrimitive,\n  TableBody as TableBodyPrimitive,\n  type TableBodyProps,\n  TableHeader as TableHeaderPrimitive,\n  type TableHeaderProps,\n  type TableProps as TablePrimitiveProps,\n  useTableOptions\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { Checkbox } from './checkbox'\nimport { cn } from './primitive'\n\nconst table = tv({\n  slots: {\n    root: 'table w-full caption-bottom border-spacing-0 text-sm outline-none',\n    column:\n      'whitespace-nowrap px-4 py-3 text-left font-medium outline-none [&:has([slot=selection])]:pr-0',\n    header: 'border-b',\n    row: 'tr group relative cursor-default border-b text-fg/70 outline-none ring-primary focus-visible:ring-1 selected:bg-primary/15',\n    cell: 'whitespace-nowrap px-4 py-3 outline-none'\n  }\n})\n\nconst { root, header, column, row, cell } = table()\n\nconst TableBody = <T extends object>(props: TableBodyProps<T>) => (\n  <TableBodyPrimitive {...props} className={cn('[&_.tr:last-child]:border-0')} />\n)\n\ninterface TableProps extends TablePrimitiveProps {\n  className?: string\n}\n\nconst Table = ({ children, className, ...props }: TableProps) => (\n  <div className=\"relative w-full overflow-auto\">\n    <TablePrimitive {...props} className={root({ className })}>\n      {children}\n    </TablePrimitive>\n  </div>\n)\n\nconst TableCell = ({\n  children,\n  className,\n  ...props\n}: CellProps & { className?: string }) => (\n  <Cell {...props} className={cell({ className })}>\n    {children}\n  </Cell>\n)\n\nconst TableColumn = ({\n  children,\n  className,\n  ...props\n}: ColumnProps & { className?: string }) => (\n  <Column isRowHeader {...props} className={column({ className })}>\n    {({ allowsSorting, sortDirection }) => (\n      <div className=\"flex items-center gap-2\">\n        <>\n          {children}\n          {allowsSorting &&\n            (sortDirection === undefined ? (\n              <div className=\"w-6\"></div>\n            ) : sortDirection === 'ascending' ? (\n              <IconChevronUp />\n            ) : (\n              <IconChevronDown />\n            ))}\n        </>\n      </div>\n    )}\n  </Column>\n)\n\nconst TableHeader = <T extends object>({\n  children,\n  className,\n  columns,\n  ...props\n}: TableHeaderProps<T> & { className?: string }) => {\n  const { selectionBehavior, selectionMode, allowsDragging } = useTableOptions()\n  return (\n    <TableHeaderPrimitive {...props} className={header({ className })}>\n      {allowsDragging && <Column />}\n      {selectionBehavior === 'toggle' && (\n        <Column className=\"pl-4\">\n          {selectionMode === 'multiple' && <Checkbox slot=\"selection\" />}\n        </Column>\n      )}\n      <Collection items={columns}>{children}</Collection>\n    </TableHeaderPrimitive>\n  )\n}\n\nconst TableRow = <T extends object>({\n  children,\n  className,\n  columns,\n  id,\n  ...props\n}: RowProps<T> & { className?: string }) => {\n  const { selectionBehavior, allowsDragging } = useTableOptions()\n  return (\n    <Row\n      id={id}\n      {...props}\n      className={row({\n        className:\n          'href' in props ? cn('cursor-pointer hover:bg-secondary/50', className) : ''\n      })}\n    >\n      {allowsDragging && (\n        <Cell className=\"ring-primary\">\n          <Button\n            className=\"cursor-pointer bg-transparent p-1.5 text-muted-fg pressed:cursor-grab pressed:text-fg\"\n            slot=\"drag\"\n          >\n            <IconDotGrid2X3 className=\"size-5\" />\n          </Button>\n        </Cell>\n      )}\n      {selectionBehavior === 'toggle' && (\n        <Cell className=\"pl-4\">\n          <span\n            aria-hidden\n            className=\"absolute inset-y-0 left-0 hidden h-full w-0.5 bg-primary group-selected:block\"\n          />\n          <Checkbox slot=\"selection\" />\n        </Cell>\n      )}\n      <Collection items={columns}>{children}</Collection>\n    </Row>\n  )\n}\n\nexport {\n  Table,\n  TableBody,\n  TableCell,\n  TableColumn,\n  TableHeader,\n  TableRow,\n  type TableProps\n}\n",
    "type": "ui"
  },
  "dynamic-overlay": {
    "component": "@/components/ui/dynamic-overlay",
    "raw": "'use client'\n\nimport type { DialogProps, PopoverProps } from 'react-aria-components'\nimport { Modal } from 'react-aria-components'\nimport type { VariantProps } from 'tailwind-variants'\nimport { tv } from 'tailwind-variants'\n\nimport { ModalClose } from './modal'\nimport { PopoverPicker } from './popover'\nimport { cn, useMediaQuery } from './primitive'\n\nconst drawerStyles = tv({\n  base: [\n    'fixed bottom-0 top-auto z-50 w-full max-w-xl place-content-center gap-4 rounded-t-xl border border-b-transparent bg-background shadow-lg outline-none',\n    'entering:animate-in entering:fade-in-0 entering:slide-in-from-bottom-1/2 entering:[transition-timing-function:ease-out',\n    'exiting:animate-out exiting:fade-out-0 exiting:slide-out-to-bottom-1/2 exiting:[transition-timing-function:ease]'\n  ]\n})\n\ninterface OverlayProps\n  extends Omit<DialogProps, 'children' | 'className' | 'style'>,\n    Omit<PopoverProps, 'children' | 'className' | 'style'>,\n    Omit<VariantProps<typeof drawerStyles>, 'className'> {\n  className?: string | DialogProps['className'] | PopoverProps['className']\n  children: React.ReactNode\n}\n\nconst DynamicOverlay = ({ className, children, ...props }: OverlayProps) => {\n  const isMobile = useMediaQuery('(max-width: 600px)')\n\n  return isMobile ? (\n    <Modal {...props} isDismissable className={cn(drawerStyles(), className)}>\n      {children}\n\n      <div className=\"pb-4 px-4 max-w-[inherit]\">\n        <ModalClose shape=\"circle\" className=\"w-full\">\n          Close\n        </ModalClose>\n      </div>\n    </Modal>\n  ) : (\n    <PopoverPicker {...props} className={cn('', className)}>\n      {children}\n    </PopoverPicker>\n  )\n}\n\nexport { DynamicOverlay }\n",
    "type": "ui"
  },
  "separator": {
    "component": "@/components/ui/separator",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport {\n  Separator as SeparatorPrimitive,\n  type SeparatorProps\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nconst styles = tv({\n  base: 'bg-muted forced-colors:bg-[ButtonBorder]',\n  variants: {\n    orientation: {\n      horizontal: 'h-px w-full',\n      vertical: 'w-px'\n    }\n  },\n  defaultVariants: {\n    orientation: 'horizontal'\n  }\n})\n\nexport function Separator(props: SeparatorProps) {\n  return (\n    <SeparatorPrimitive\n      {...props}\n      className={styles({\n        orientation: props.orientation,\n        className: props.className\n      })}\n    />\n  )\n}\n\nexport type { SeparatorProps }\n",
    "type": "ui"
  },
  "button": {
    "component": "@/components/ui/button",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport {\n  Button as ButtonPrimitive,\n  type ButtonProps as ButtonPrimitiveProps\n} from 'react-aria-components'\nimport { tv, type VariantProps } from 'tailwind-variants'\n\nimport { cn } from './primitive'\n\nconst buttonStyles = tv(\n  {\n    base: [\n      'kbt32x relative no-underline isolate inline-flex items-center justify-center gap-x-2 border font-medium',\n      'focus:outline-none focus:outline focus:outline-2 focus-visible:outline-2 focus:outline-offset-2 focus:outline-primary-500',\n      'data-[disabled]:opacity-50',\n      'forced-colors:[--btn-icon:ButtonText] forced-colors:hover:[--btn-icon:ButtonText] [&>[data-slot=icon]]:-mx-0.5 [&>[data-slot=icon]]:my-1 [&>[data-slot=icon]]:size-4 [&>[data-slot=icon]]:shrink-0 [&>[data-slot=icon]]:text-[--btn-icon]'\n    ],\n    variants: {\n      intent: {\n        primary: [\n          'text-white [--btn-bg:theme(colors.primary.600)] [--btn-border:theme(colors.primary.700/90%)] [--btn-hover-overlay:theme(colors.white/10%)]',\n          '[--btn-icon:theme(colors.primary.200)] active:[--btn-icon:theme(colors.primary.300)] hover:[--btn-icon:theme(colors.primary.300)]'\n        ],\n        secondary: [\n          'text-zinc-950 [--btn-bg:white] [--btn-border:theme(colors.zinc.950/10%)] [--btn-hover-overlay:theme(colors.zinc.950/2.5%)] data-[active]:[--btn-border:theme(colors.zinc.950/15%)] data-[hover]:[--btn-border:theme(colors.zinc.950/15%)]',\n          'dark:text-white dark:[--btn-bg:theme(colors.zinc.800)] dark:[--btn-hover-overlay:theme(colors.white/5%)]',\n          '[--btn-icon:theme(colors.zinc.500)] data-[active]:[--btn-icon:theme(colors.zinc.700)] data-[hover]:[--btn-icon:theme(colors.zinc.700)] dark:[--btn-icon:theme(colors.zinc.500)] dark:data-[active]:[--btn-icon:theme(colors.zinc.400)] dark:data-[hover]:[--btn-icon:theme(colors.zinc.400)]'\n        ],\n        success: [\n          'text-white [--btn-bg:theme(colors.emerald.600)] [--btn-border:theme(colors.emerald.700/90%)] [--btn-hover-overlay:theme(colors.white/10%)]',\n          '[--btn-icon:theme(colors.white/60%)] active:[--btn-icon:theme(colors.white/80%)] hover:[--btn-icon:theme(colors.white/80%)]'\n        ],\n        'light/dark': [\n          'text-white [--btn-bg:theme(colors.zinc.900)] [--btn-border:theme(colors.zinc.950/90%)] [--btn-hover-overlay:theme(colors.white/10%)]',\n          'dark:text-zinc-950 dark:[--btn-bg:white] dark:[--btn-hover-overlay:theme(colors.zinc.950/5%)]',\n          '[--btn-icon:theme(colors.zinc.400)] active:[--btn-icon:theme(colors.zinc.300)] hover:[--btn-icon:theme(colors.zinc.300)] dark:[--btn-icon:theme(colors.zinc.500)] dark:active:[--btn-icon:theme(colors.zinc.400)] dark:hover:[--btn-icon:theme(colors.zinc.400)]'\n        ],\n        dark: [\n          'text-white [--btn-bg:theme(colors.zinc.900)] [--btn-border:theme(colors.zinc.950/90%)] [--btn-hover-overlay:theme(colors.white/10%)]',\n          'dark:[--btn-bg:theme(colors.zinc.800)] dark:[--btn-hover-overlay:theme(colors.white/5%)]',\n          '[--btn-icon:theme(colors.zinc.400)] active:[--btn-icon:theme(colors.zinc.300)] hover:[--btn-icon:theme(colors.zinc.300)]'\n        ],\n        light: [\n          'text-zinc-950 [--btn-bg:white] [--btn-border:theme(colors.zinc.950/10%)] [--btn-hover-overlay:theme(colors.zinc.950/2.5%)] active:[--btn-border:theme(colors.zinc.950/15%)] hover:[--btn-border:theme(colors.zinc.950/15%)]',\n          'dark:[--btn-hover-overlay:theme(colors.zinc.950/5%)]',\n          '[--btn-icon:theme(colors.zinc.400)] active:[--btn-icon:theme(colors.zinc.500)] hover:[--btn-icon:theme(colors.zinc.500)]'\n        ],\n        info: [\n          'text-lime-950 [--btn-bg:theme(colors.info.DEFAULT)] [--btn-border:theme(colors.lime.400/80%)] [--btn-hover-overlay:theme(colors.white/25%)]',\n          '[--btn-icon:theme(colors.lime.600)] active:[--btn-icon:theme(colors.lime.700)] hover:[--btn-icon:theme(colors.lime.700)]'\n        ],\n        warning: [\n          'text-amber-950 [--btn-bg:theme(colors.amber.400)] [--btn-border:theme(colors.amber.500/80%)] [--btn-hover-overlay:theme(colors.white/25%)]',\n          '[--btn-icon:theme(colors.amber.600)]'\n        ],\n        danger: [\n          'text-white [--btn-bg:theme(colors.red.600)] [--btn-border:theme(colors.red.700/90%)] [--btn-hover-overlay:theme(colors.white/10%)]',\n          '[--btn-icon:theme(colors.red.300)] active:[--btn-icon:theme(colors.red.200)] hover:[--btn-icon:theme(colors.red.200)]'\n        ]\n      },\n      appearance: {\n        solid:\n          'border-transparent bg-[--btn-border] dark:bg-[--btn-bg] before:absolute before:inset-0 before:-z-10 before:bg-[--btn-bg] before:shadow dark:before:hidden dark:border-white/5 after:absolute after:inset-0 after:-z-10 after:shadow-[shadow:inset_0_1px_theme(colors.white/15%)] after:active:bg-[--btn-hover-overlay] after:hover:bg-[--btn-hover-overlay] dark:after:-inset-px before:data-[disabled]:shadow-none after:data-[disabled]:shadow-none',\n        outline:\n          'border-border hover:bg-secondary/70 active:bg-secondary/70 text-fg [--btn-icon:theme(colors.zinc.400)] active:[--btn-icon:theme(colors.zinc.500)] hover:[--btn-icon:theme(colors.zinc.500)] dark:active:[--btn-icon:theme(colors.zinc.300)] dark:hover:[--btn-icon:theme(colors.zinc.300)]',\n        plain:\n          'border-transparent text-fg active:bg-fg/5 hover:bg-fg/5 [--btn-icon:theme(colors.zinc.500)] active:[--btn-icon:theme(colors.zinc.700)] hover:[--btn-icon:theme(colors.zinc.700)] dark:[--btn-icon:theme(colors.zinc.500)] dark:active:[--btn-icon:theme(colors.zinc.400)] dark:hover:[--btn-icon:theme(colors.zinc.400)]'\n      },\n\n      size: {\n        'extra-small':\n          'h-8 px-[calc(theme(spacing.3)-1px)] py-[calc(theme(spacing.1)-1px)] text-xs/4 lg:text-[0.800rem]/4',\n        small:\n          'h-9 px-[calc(theme(spacing.4)-1px)] py-[calc(theme(spacing[1.5])-1px)] text-sm/5 lg:text-sm/5',\n        medium:\n          'h-10 px-[calc(theme(spacing.4)-1px)] py-[calc(theme(spacing.2)-1px)] text-base lg:text-sm/6',\n        large:\n          'h-10 sm:h-11 px-[calc(theme(spacing.4)-1px)] sm:px-[calc(theme(spacing.5)-1px)] py-[calc(theme(spacing[2.5])-1px)] text-base lg:text-base/7 sm:[&>[data-slot=icon]]:size-5',\n        'square-petite': 'size-9'\n      },\n      shape: {\n        square:\n          'rounded-lg before:rounded-[calc(theme(borderRadius.lg)-1px)] after:rounded-[calc(theme(borderRadius.lg)-1px)] dark:after:rounded-lg',\n        circle:\n          'rounded-[9999px] before:rounded-[9998px] after:rounded-[9998px] dark:after:rounded-[9999px]'\n      }\n    },\n    defaultVariants: {\n      intent: 'primary',\n      appearance: 'solid',\n      size: 'medium',\n      shape: 'square'\n    },\n    compoundVariants: [\n      {\n        appearance: ['outline', 'plain'],\n        className: 'px-1',\n        size: 'extra-small'\n      },\n      {\n        appearance: ['outline', 'plain'],\n        className: 'px-[calc(theme(spacing.1)-1px)]',\n        size: 'small'\n      },\n      {\n        appearance: ['outline', 'plain'],\n        className: 'px-[calc(theme(spacing.2)-1px)]',\n        size: 'medium'\n      },\n      {\n        appearance: ['outline', 'plain'],\n        className: 'px-[calc(theme(spacing.3)-1px)]',\n        size: 'large'\n      }\n    ]\n  },\n  {\n    responsiveVariants: true\n  }\n)\n\ninterface ButtonProps extends ButtonPrimitiveProps, VariantProps<typeof buttonStyles> {\n  className?: string\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, intent, appearance, size, shape, ...props }, ref) => {\n    return (\n      <ButtonPrimitive\n        ref={ref}\n        className={cn(buttonStyles({ intent, appearance, size, shape }), className)}\n        {...props}\n      />\n    )\n  }\n)\n\nButton.displayName = 'Button'\n\nexport { Button, ButtonPrimitive, buttonStyles, type ButtonProps }\n",
    "type": "ui"
  },
  "modal": {
    "component": "@/components/ui/modal",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { IconX } from '@irsyadadl/paranoid'\nimport {\n  Button as ButtonPrimitive,\n  type DialogProps,\n  DialogTrigger as DialogTriggerPrimitive,\n  Heading,\n  type HeadingProps,\n  Modal as ModalPrimitive,\n  ModalOverlay as ModalOverlayPrimitive,\n  type ModalOverlayProps,\n  OverlayTriggerStateContext\n} from 'react-aria-components'\nimport { tv, type VariantProps } from 'tailwind-variants'\n\nimport { Button, type ButtonProps } from './button'\nimport { Dialog } from './dialog'\nimport { cn, useMediaQuery } from './primitive'\n\nexport const modalVariants = tv({\n  base: [\n    'fixed bottom-0 left-[50%] top-auto z-50 grid w-full max-w-full translate-x-[-50%] gap-4 rounded-t-xl border border-b-transparent bg-background p-2 shadow-lg outline-none sm:bottom-auto sm:top-[40%] sm:translate-y-[-50%] sm:rounded-xl sm:border-b-border',\n    'sm:entering:slide-in-from-bottom-auto entering:animate-in entering:fade-in-0 entering:slide-in-from-bottom-1/2 entering:slide-in-from-left-1/2 entering:[transition-timing-function:ease-out] sm:entering:slide-in-from-top-[58%]',\n    'exiting:animate-out exiting:fade-out-0 exiting:slide-out-to-bottom-1/2 exiting:slide-out-to-left-1/2 exiting:[transition-timing-function:ease] sm:exiting:slide-out-to-top-[58%]'\n  ],\n  variants: {\n    size: {\n      xs: 'sm:max-w-xs',\n      sm: 'sm:max-w-sm',\n      md: 'sm:max-w-md',\n      lg: 'sm:max-w-lg',\n      xl: 'sm:max-w-xl',\n      '2xl': 'sm:max-w-2xl',\n      '3xl': 'sm:max-w-3xl',\n      '4xl': 'sm:max-w-4xl',\n      '5xl': 'sm:max-w-5xl'\n    }\n  },\n  defaultVariants: {\n    size: 'lg'\n  }\n})\n\nconst Modal = DialogTriggerPrimitive\n\nconst ModalTrigger = ButtonPrimitive\n\nconst ModalOverlayContext = React.createContext<{\n  isDismissable?: boolean\n}>({})\n\nconst ModalOverlay = ({\n  className,\n  isDismissable = true,\n  ...props\n}: ModalOverlayProps) => (\n  <ModalOverlayContext.Provider value={{ isDismissable: isDismissable }}>\n    <ModalOverlayPrimitive\n      isDismissable={isDismissable}\n      className={(values) =>\n        cn(\n          'fixed inset-0 z-50 bg-black/60 entering:animate-in entering:fade-in-0 exiting:animate-in exiting:fade-out-0',\n          typeof className === 'function' ? className(values) : className\n        )\n      }\n      {...props}\n    />\n  </ModalOverlayContext.Provider>\n)\n\nexport interface ModalContentProps\n  extends Omit<React.ComponentProps<typeof Modal>, 'children'>,\n    VariantProps<typeof modalVariants> {\n  children?: DialogProps['children']\n  role?: DialogProps['role']\n  closeButton?: boolean\n  className?: string\n}\n\ninterface CloseButtonIndicatorProps {\n  className?: string\n  close: () => void\n  dismissable?: boolean | undefined\n}\n\nconst CloseButtonIndicator = ({ className, ...props }: CloseButtonIndicatorProps) => {\n  const isMobile = useMediaQuery('(max-width: 600px)')\n  const buttonRef = React.useRef<HTMLButtonElement>(null)\n\n  React.useEffect(() => {\n    if (isMobile && buttonRef.current) {\n      buttonRef.current.focus()\n    }\n  }, [isMobile])\n\n  return (\n    <Button\n      ref={buttonRef}\n      {...(isMobile ? { autoFocus: true } : {})}\n      appearance=\"plain\"\n      size=\"square-petite\"\n      aria-label=\"Close\"\n      onPress={props.close}\n      className={cn(\n        'close absolute right-1 size-6 top-1 z-50',\n        className,\n        props.dismissable === false && 'hidden'\n      )}\n    >\n      <IconX className=\"size-4\" />\n    </Button>\n  )\n}\n\nconst ModalContent = ({\n  className,\n  children,\n  size,\n  role,\n  closeButton = true,\n  ...props\n}: ModalContentProps) => {\n  const { isDismissable } = React.useContext(ModalOverlayContext)\n  return (\n    <ModalPrimitive className={modalVariants({ size, className })} {...props}>\n      <Dialog role={role}>\n        {(values) => (\n          <>\n            {typeof children === 'function' ? children(values) : children}\n            {closeButton && (\n              <CloseButtonIndicator close={values.close} dismissable={isDismissable} />\n            )}\n          </>\n        )}\n      </Dialog>\n    </ModalPrimitive>\n  )\n}\n\nconst ModalHeader = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      'mb-6 flex flex-col gap-y-0.5 pr-1 text-center sm:pr-0 sm:text-left',\n      className\n    )}\n    {...props}\n  />\n)\n\ninterface ModalCloseProps extends ButtonProps {}\n\nconst ModalClose = ({ className, ...props }: ModalCloseProps) => {\n  const state = React.useContext(OverlayTriggerStateContext)!\n  return (\n    <Button\n      className={className}\n      appearance=\"outline\"\n      onPress={() => state.close()}\n      {...props}\n    />\n  )\n}\n\nconst ModalBody = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n  <div className={cn('pb-6', className)} {...props} />\n)\n\nconst ModalFooter = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      'flex flex-col-reverse gap-2 sm:flex-row sm:justify-between',\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ModalTitle = ({ className, ...props }: HeadingProps) => (\n  <Heading\n    slot=\"title\"\n    className={cn(\n      'text-xl font-semibold leading-none tracking-tight lg:text-lg',\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ModalDescription = ({ className, ...props }: HeadingProps) => (\n  <p className={cn('text-sm text-muted-fg', className)} {...props} />\n)\n\nexport {\n  CloseButtonIndicator,\n  Modal,\n  ModalBody,\n  ModalClose,\n  ModalContent,\n  ModalDescription,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n  ModalTitle,\n  ModalTrigger,\n  type ModalOverlayProps\n}\n",
    "type": "ui"
  },
  "checkbox": {
    "component": "@/components/ui/checkbox",
    "raw": "'use client'\n\nimport { type ReactNode } from 'react'\n\nimport {\n  Checkbox as CheckboxPrimitive,\n  CheckboxGroup as CheckboxGroupPrimitive,\n  type CheckboxGroupProps as CheckboxGroupPrimitiveProps,\n  type CheckboxProps,\n  composeRenderProps,\n  type ValidationResult\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { Description, FieldError, Label } from './field'\nimport { ctr } from './primitive'\n\ninterface CheckboxGroupProps extends Omit<CheckboxGroupPrimitiveProps, 'children'> {\n  label?: string\n  children?: ReactNode\n  description?: string\n  errorMessage?: string | ((validation: ValidationResult) => string)\n}\n\nconst CheckboxGroup = (props: CheckboxGroupProps) => {\n  return (\n    <CheckboxGroupPrimitive\n      {...props}\n      className={ctr(props.className, 'flex flex-col gap-2')}\n    >\n      <Label>{props.label}</Label>\n      {props.children}\n      {props.description && <Description>{props.description}</Description>}\n      <FieldError>{props.errorMessage}</FieldError>\n    </CheckboxGroupPrimitive>\n  )\n}\n\nconst checkboxStyles = tv({\n  base: 'racc group flex items-center gap-2 text-sm transition',\n  variants: {\n    isDisabled: {\n      false: 'opacity-100',\n      true: 'opacity-50'\n    }\n  }\n})\n\nconst boxStyles = tv({\n  base: 'flex size-4 flex-shrink-0 items-center justify-center rounded border text-background transition',\n  variants: {\n    isSelected: {\n      false: 'border-toggle bg-secondary',\n      true: [\n        'border-primary/70 bg-primary text-primary-fg',\n        'group-invalid:border-danger/70 group-invalid:bg-danger group-invalid:text-danger-fg'\n      ]\n    },\n    isFocused: {\n      true: [\n        'border-primary/70 ring-4 ring-primary/20',\n        'group-invalid:border-danger/70 group-invalid:text-danger-fg group-invalid:ring-danger/20'\n      ]\n    },\n    isInvalid: {\n      true: 'border-danger/70 bg-danger/20 text-danger-fg ring-danger/20'\n    }\n  }\n})\nconst Checkbox = (props: CheckboxProps) => {\n  return (\n    <CheckboxPrimitive\n      {...props}\n      className={composeRenderProps(props.className, (className, renderProps) =>\n        checkboxStyles({ ...renderProps, className })\n      )}\n    >\n      {({ isSelected, isIndeterminate, ...renderProps }) => (\n        <>\n          <div\n            className={boxStyles({\n              isSelected: isSelected || isIndeterminate,\n              ...renderProps\n            })}\n          >\n            {isIndeterminate ? (\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                width={24}\n                height={24}\n                viewBox=\"0 0 24 24\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                strokeWidth={2.5}\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                className=\"size-3\"\n              >\n                <line x1={5} y1={12} x2={19} y2={12} />\n              </svg>\n            ) : isSelected ? (\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                width={24}\n                height={24}\n                viewBox=\"0 0 24 24\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                strokeWidth={2.5}\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                className=\"size-3\"\n              >\n                <polyline points=\"20 6 9 17 4 12\" />\n              </svg>\n            ) : null}\n          </div>\n          {props.children}\n        </>\n      )}\n    </CheckboxPrimitive>\n  )\n}\n\nexport { Checkbox, CheckboxGroup }\n",
    "type": "ui"
  },
  "select": {
    "component": "@/components/ui/select",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { IconChevronLgDown } from '@irsyadadl/paranoid'\nimport {\n  Button,\n  Select as SelectPrimitive,\n  type SelectProps as SelectPrimitiveProps,\n  SelectValue,\n  type ValidationResult\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { DropdownItem, DropdownSection } from './dropdown'\nimport { Description, FieldError, Label } from './field'\nimport { ListBoxPicker } from './list-box'\nimport { PopoverPicker } from './popover'\nimport { ctr, focusStyles } from './primitive'\n\nconst selectTriggerStyles = tv({\n  extend: focusStyles,\n  base: 'btr group-disabled:bg-secondary group-disabled:opacity-50 focus-visible:border-primary focus-visible:ring-4 focus-visible:ring-primary/20 group-open:border-primary w-full group-open:ring-4 group-open:ring-primary/20 flex h-10 w-full cursor-default items-center gap-4 rounded-lg border border-input bg-background py-2 pl-3 pr-2 text-start shadow-[inset_0_1px_0_0_rgba(255,255,255,0.1)] transition dark:shadow-none',\n  variants: {\n    isDisabled: {\n      false:\n        'text-fg group-invalid:border-danger group-invalid:ring-danger/20 forced-colors:group-invalid:border-[Mark]',\n      true: 'bg-secondary text-muted-fg forced-colors:border-[GrayText] forced-colors:text-[GrayText]'\n    }\n  }\n})\n\ninterface SelectProps<T extends object>\n  extends Omit<SelectPrimitiveProps<T>, 'children'> {\n  label?: string\n  description?: string\n  errorMessage?: string | ((validation: ValidationResult) => string)\n  items?: Iterable<T>\n  children: React.ReactNode | ((item: T) => React.ReactNode)\n}\n\nfunction Select<T extends object>({\n  label,\n  description,\n  errorMessage,\n  children,\n  items,\n  ...props\n}: SelectProps<T>) {\n  return (\n    <SelectPrimitive\n      {...props}\n      className={ctr(props.className, 'group flex w-full flex-col gap-1')}\n    >\n      {label && <Label>{label}</Label>}\n      <Button className={selectTriggerStyles()}>\n        <SelectValue className=\"flex-1 text-base placeholder-shown:text-muted-fg lg:text-sm\" />\n        <IconChevronLgDown\n          aria-hidden\n          className=\"size-4 text-muted-fg duration-300 group-open:rotate-180 group-open:text-fg group-disabled:opacity-50 forced-colors:text-[ButtonText] forced-colors:group-disabled:text-[GrayText]\"\n        />\n      </Button>\n      {description && <Description>{description}</Description>}\n      <FieldError>{errorMessage}</FieldError>\n      <PopoverPicker>\n        <ListBoxPicker aria-label=\"items\" items={items}>\n          {children}\n        </ListBoxPicker>\n      </PopoverPicker>\n    </SelectPrimitive>\n  )\n}\n\nconst SelectItem = DropdownItem\nconst SelectSection = DropdownSection\n\nexport { Select, SelectItem, SelectSection }\n",
    "type": "ui"
  },
  "textarea": {
    "component": "@/components/ui/textarea",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport {\n  TextArea as TextAreaPrimitive,\n  TextField as TextFieldPrimitive,\n  type TextFieldProps as TextFieldPrimitiveProps,\n  type ValidationResult\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { Description, FieldError, Label } from './field'\nimport { ctr, focusStyles } from './primitive'\n\nexport interface TextareaProps extends TextFieldPrimitiveProps {\n  autoSize?: boolean\n  label?: string\n  placeholder?: string\n  description?: string\n  errorMessage?: string | ((validation: ValidationResult) => string)\n}\n\nconst textareaStyles = tv({\n  extend: focusStyles,\n  base: 'w-full min-w-0 rounded-md border border-input bg-background px-2.5 py-2 text-base shadow-sm outline-none transition duration-200 disabled:bg-secondary disabled:opacity-50 sm:text-sm'\n})\n\nexport function Textarea({\n  placeholder,\n  label,\n  description,\n  errorMessage,\n  ...props\n}: TextareaProps) {\n  return (\n    <TextFieldPrimitive\n      {...props}\n      className={ctr(props.className, 'group flex flex-col gap-1')}\n    >\n      {label && <Label>{label}</Label>}\n      <TextAreaPrimitive placeholder={placeholder} className={textareaStyles} />\n      {description && <Description>{description}</Description>}\n      <FieldError>{errorMessage}</FieldError>\n    </TextFieldPrimitive>\n  )\n}\n",
    "type": "ui"
  },
  "loading-dots": {
    "component": "@/components/ui/loading-dots",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { cn } from './primitive'\n\nconst dots = 'mx-[1px] inline-block size-[0.3125rem] animate-blink rounded-md'\n\nexport const LoadingDots = ({ className }: { className: string }) => {\n  return (\n    <span className=\"mx-2 inline-flex items-center\">\n      <span className={cn(dots, className)} />\n      <span className={cn(dots, 'animation-delay-[200ms]', className)} />\n      <span className={cn(dots, 'animation-delay-[400ms]', className)} />\n    </span>\n  )\n}\n",
    "type": "ui"
  },
  "skeleton": {
    "component": "@/components/ui/skeleton",
    "raw": "import React from 'react'\n\nimport { cn } from './primitive'\n\nfunction Skeleton({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {\n  return <div className={cn('animate-pulse rounded-md bg-muted', className)} {...props} />\n}\n\nexport { Skeleton }\n",
    "type": "ui"
  },
  "form": {
    "component": "@/components/ui/form",
    "raw": "'use client'\n\nimport type { FormProps as FormPrimitiveProps } from 'react-aria-components'\nimport { Form as FormPrimitive } from 'react-aria-components'\n\ninterface FormProps extends FormPrimitiveProps {}\n\nfunction Form(props: FormProps) {\n  return <FormPrimitive {...props} />\n}\n\nexport { Form, type FormProps }\n",
    "type": "ui"
  },
  "carousel": {
    "component": "@/components/ui/carousel",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { IconChevronLgLeft, IconChevronLgRight } from '@irsyadadl/paranoid'\nimport useEmblaCarousel, { type UseEmblaCarouselType } from 'embla-carousel-react'\n\nimport type { ButtonProps } from './button'\nimport { Button } from './button'\nimport { cn } from './primitive'\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ninterface CarouselComponent\n  extends React.ForwardRefExoticComponent<\n    React.HTMLAttributes<HTMLDivElement> &\n      CarouselProps &\n      React.RefAttributes<HTMLDivElement>\n  > {\n  Content: React.ForwardRefExoticComponent<\n    React.HTMLAttributes<HTMLDivElement> & React.RefAttributes<HTMLDivElement>\n  >\n  Item: React.ForwardRefExoticComponent<\n    React.HTMLAttributes<HTMLDivElement> & React.RefAttributes<HTMLDivElement>\n  >\n  Previous: React.ForwardRefExoticComponent<\n    React.ButtonHTMLAttributes<HTMLButtonElement> & React.RefAttributes<HTMLButtonElement>\n  >\n  Next: React.ForwardRefExoticComponent<\n    React.ButtonHTMLAttributes<HTMLButtonElement> & React.RefAttributes<HTMLButtonElement>\n  >\n  Handler: React.ForwardRefExoticComponent<\n    React.HTMLAttributes<HTMLDivElement> & React.RefAttributes<HTMLDivElement>\n  >\n}\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: 'horizontal' | 'vertical'\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error('useCarousel must be used within a <Carousel />')\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    { orientation = 'horizontal', opts, setApi, plugins, className, children, ...props },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === 'horizontal' ? 'x' : 'y'\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === 'ArrowLeft') {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === 'ArrowRight') {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on('reInit', onSelect)\n      api.on('select', onSelect)\n\n      return () => {\n        api?.off('select', onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation: orientation || (opts?.axis === 'y' ? 'vertical' : 'horizontal'),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn('relative', className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n) as CarouselComponent\nCarousel.displayName = 'Carousel'\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          'flex',\n          orientation === 'horizontal' ? '-ml-4' : '-mt-4 flex-col',\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = 'CarouselContent'\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        'min-w-0 shrink-0 grow-0 basis-full',\n        orientation === 'horizontal' ? 'pl-4' : 'pt-4',\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = 'CarouselItem'\n\nconst CarouselHandler = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        'mt-6 flex items-center gap-x-2',\n        orientation === 'horizontal' ? 'justify-end' : 'justify-center',\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselHandler.displayName = 'CarouselHandler'\n\nconst CarouselPrevious = ({\n  className,\n  intent = 'secondary',\n  size = 'square-petite',\n  ...props\n}: ButtonProps) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      intent={intent}\n      size={size}\n      className={cn(\n        'size-8 rounded-full',\n        orientation === 'vertical' ? 'rotate-90' : '',\n        className\n      )}\n      isDisabled={!canScrollPrev}\n      onPress={scrollPrev}\n      {...props}\n    >\n      <IconChevronLgLeft className=\"size-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n}\n\nconst CarouselNext = ({\n  className,\n  intent = 'secondary',\n  size = 'square-petite',\n  ...props\n}: ButtonProps) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      intent={intent}\n      size={size}\n      className={cn(\n        'size-8 rounded-full',\n        orientation === 'vertical' ? 'rotate-90' : '',\n        className\n      )}\n      isDisabled={!canScrollNext}\n      onPress={scrollNext}\n      {...props}\n    >\n      <IconChevronLgRight className=\"size-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n}\n\nexport {\n  Carousel,\n  CarouselContent,\n  CarouselHandler,\n  CarouselItem,\n  CarouselNext,\n  CarouselPrevious,\n  type CarouselApi\n}\n",
    "type": "ui"
  }
}