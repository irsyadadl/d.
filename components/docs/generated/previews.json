{
  "install": {
    "component": "@/components/docs/install",
    "raw": "'use client'\n\nimport React from 'react'\nimport { Snippet, Tab, TabList, TabPanel, Tabs } from 'ui'\n\ninterface InstallProps {\n  items?: string[]\n}\n\nconst Install: React.FC<InstallProps> = ({ items = ['react-aria-components'] }) => {\n  const getInstallCommand = (packageManager: string) => {\n    switch (packageManager) {\n      case 'bun':\n        return `bun add ${items.join(' ')}`\n      case 'yarn':\n        return `yarn add ${items.join(' ')}`\n      case 'pnpm':\n        return `pnpm add ${items.join(' ')}`\n      case 'npm':\n      default:\n        return `npm i ${items.join(' ')}`\n    }\n  }\n\n  return (\n    <Tabs aria-label=\"Packages\">\n      <TabList>\n        <Tab className=\"font-mono\" id=\"bun\">\n          bun\n        </Tab>\n        <Tab className=\"font-mono\" id=\"yarn\">\n          yarn\n        </Tab>\n        <Tab className=\"font-mono\" id=\"pnpm\">\n          pnpm\n        </Tab>\n        <Tab className=\"font-mono\" id=\"npm\">\n          npm\n        </Tab>\n      </TabList>\n      <TabPanel id=\"bun\">\n        <Snippet text={getInstallCommand('bun')} />\n      </TabPanel>\n      <TabPanel id=\"yarn\">\n        <Snippet text={getInstallCommand('yarn')} />\n      </TabPanel>\n      <TabPanel id=\"pnpm\">\n        <Snippet text={getInstallCommand('pnpm')} />\n      </TabPanel>\n      <TabPanel id=\"npm\">\n        <Snippet text={getInstallCommand('npm')} />\n      </TabPanel>\n    </Tabs>\n  )\n}\n\nexport { Install }\n",
    "type": "docs"
  },
  "date-and-time/date-field-demo": {
    "component": "@/components/docs/date-and-time/date-field-demo",
    "raw": "'use client'\n\nimport { DateField } from 'ui'\n\nexport default function DateFieldDemo() {\n  return <DateField label=\"Event date\" />\n}\n",
    "type": "docs"
  },
  "date-and-time/date-range-picker-disabled-demo": {
    "component": "@/components/docs/date-and-time/date-range-picker-disabled-demo",
    "raw": "'use client'\n\nimport { DateRangePicker } from 'ui'\n\nexport default function DateRangePickerDisabledDemo() {\n  return <DateRangePicker isDisabled label=\"Event date\" />\n}\n",
    "type": "docs"
  },
  "date-and-time/time-field-disabled-demo": {
    "component": "@/components/docs/date-and-time/time-field-disabled-demo",
    "raw": "'use client'\n\nimport { TimeField } from 'ui'\n\nexport default function TimeFieldDisabledDemo() {\n  return <TimeField isDisabled label=\"Event time\" />\n}\n",
    "type": "docs"
  },
  "date-and-time/range-calendar-demo": {
    "component": "@/components/docs/date-and-time/range-calendar-demo",
    "raw": "'use client'\n\nimport { RangeCalendar } from 'ui'\n\nexport default function RangeCalendarDemo() {\n  return <RangeCalendar aria-label=\"Trip dates\" />\n}\n",
    "type": "docs"
  },
  "date-and-time/date-picker-demo": {
    "component": "@/components/docs/date-and-time/date-picker-demo",
    "raw": "'use client'\n\nimport { DatePicker } from 'ui'\n\nexport default function DatePickerDemo() {\n  return <DatePicker label=\"Event date\" />\n}\n",
    "type": "docs"
  },
  "date-and-time/date-field-disabled-demo": {
    "component": "@/components/docs/date-and-time/date-field-disabled-demo",
    "raw": "'use client'\n\nimport { DateField } from 'ui'\n\nexport default function DateFieldDisabledDemo() {\n  return <DateField isDisabled label=\"Event date\" />\n}\n",
    "type": "docs"
  },
  "date-and-time/calendar-demo": {
    "component": "@/components/docs/date-and-time/calendar-demo",
    "raw": "'use client'\n\nimport { Calendar } from 'ui'\n\nexport default function CalendarDemo() {\n  return <Calendar aria-label=\"Event date\" onChange={function Qa() {}} onFocusChange={function Qa() {}} />\n}\n",
    "type": "docs"
  },
  "date-and-time/date-range-picker-demo": {
    "component": "@/components/docs/date-and-time/date-range-picker-demo",
    "raw": "'use client'\n\nimport { DateRangePicker } from 'ui'\n\nexport default function DateRangePickerDemo() {\n  return <DateRangePicker label=\"Event date\" />\n}\n",
    "type": "docs"
  },
  "date-and-time/time-field-hc-demo": {
    "component": "@/components/docs/date-and-time/time-field-hc-demo",
    "raw": "'use client'\n\nimport { OptionPreview } from '@/components/docs/docs-c/option-preview'\nimport { Time } from '@internationalized/date'\nimport React from 'react'\nimport { Switch, TimeField } from 'ui'\n\nexport default function TimeFieldHcDemo() {\n  const [hc, setHc] = React.useState<12 | 24>(24)\n  const [value, setValue] = React.useState(new Time(13, 45))\n  return (\n    <>\n      <OptionPreview>\n        <Switch isSelected={hc === 24} onChange={() => setHc((prevHc) => (prevHc === 24 ? 12 : 24))}>\n          {hc} hour\n        </Switch>\n      </OptionPreview>\n      <TimeField value={value} onChange={setValue} hourCycle={hc} label=\"Event time\" />\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "date-and-time/date-picker-disabled-demo": {
    "component": "@/components/docs/date-and-time/date-picker-disabled-demo",
    "raw": "'use client'\n\nimport { DatePicker } from 'ui'\n\nexport default function DatePickerDisabledDemo() {\n  return <DatePicker isDisabled label=\"Event date\" />\n}\n",
    "type": "docs"
  },
  "date-and-time/time-field-demo": {
    "component": "@/components/docs/date-and-time/time-field-demo",
    "raw": "'use client'\n\nimport { TimeField } from 'ui'\n\nexport default function TimeFieldDemo() {\n  return <TimeField label=\"Event time\" />\n}\n",
    "type": "docs"
  },
  "forms/slider-range-demo": {
    "component": "@/components/docs/forms/slider-range-demo",
    "raw": "'use client'\n\nimport { Slider } from 'ui'\n\nexport default function SliderRangeDemo() {\n  return <Slider defaultValue={[25, 75]} label=\"Progress tracking\" />\n}\n",
    "type": "docs"
  },
  "forms/checkbox-demo": {
    "component": "@/components/docs/forms/checkbox-demo",
    "raw": "'use client'\n\nimport { Checkbox } from 'ui'\n\nexport default function CheckboxDemo() {\n  return <Checkbox>Enable notifications</Checkbox>\n}\n",
    "type": "docs"
  },
  "forms/checkbox-group-demo": {
    "component": "@/components/docs/forms/checkbox-group-demo",
    "raw": "'use client'\n\nimport React from 'react'\nimport { Checkbox, CheckboxGroup } from 'ui'\n\nexport default function CheckboxGroupDemo() {\n  return (\n    <CheckboxGroup label=\"Settings\">\n      <React.Fragment key=\".0\">\n        <Checkbox value=\"notifications\">Enable notifications</Checkbox>\n        <Checkbox value=\"auto_update\">Auto-update applications</Checkbox>\n        <Checkbox value=\"dark_mode\">Enable dark mode</Checkbox>\n        <Checkbox value=\"location_access\">Allow location access</Checkbox>\n        <Checkbox value=\"two_factor_auth\">Enable two-factor authentication</Checkbox>\n      </React.Fragment>\n    </CheckboxGroup>\n  )\n}\n",
    "type": "docs"
  },
  "forms/switch-variant-demo": {
    "component": "@/components/docs/forms/switch-variant-demo",
    "raw": "'use client'\n\nimport { OptionPreview } from '@/components/docs/docs-c/option-preview'\nimport React from 'react'\nimport { Select, SelectItem, Switch } from 'ui'\n\nconst items = ['primary', 'secondary', 'success', 'danger', 'warning', 'info'].map((item) => ({\n  value: item,\n  label: item\n}))\nexport default function SwitchVariantDemo() {\n  const [intent, setIntent] = React.useState('primary')\n\n  return (\n    <>\n      <OptionPreview>\n        <Select items={items} selectedKey={intent} onSelectionChange={(v) => setIntent(v as any)}>\n          {(item) => (\n            <SelectItem id={item.value} textValue={item.value}>\n              {item.label}\n            </SelectItem>\n          )}\n        </Select>\n      </OptionPreview>\n      <Switch defaultSelected intent={intent as any}>\n        Label\n      </Switch>\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "forms/form-validation-demo": {
    "component": "@/components/docs/forms/form-validation-demo",
    "raw": "'use client'\n\nimport { Button, Form, TextField } from 'ui'\n\nexport default function FormValidationDemo() {\n  return (\n    <Form onSubmit={() => {}}>\n      <TextField label=\"Name\" isRequired className=\"mb-2\" />\n      <Button type=\"submit\">Submit</Button>\n    </Form>\n  )\n}\n",
    "type": "docs"
  },
  "forms/textarea-demo": {
    "component": "@/components/docs/forms/textarea-demo",
    "raw": "'use client'\n\nimport { Textarea } from 'ui'\n\nexport default function TextareaDemo() {\n  return <Textarea label=\"Address\" />\n}\n",
    "type": "docs"
  },
  "forms/number-field-invalid-demo": {
    "component": "@/components/docs/forms/number-field-invalid-demo",
    "raw": "'use client'\n\nimport { NumberField } from 'ui'\n\nexport default function NumberFieldInvalidDemo() {\n  return <NumberField isInvalid label=\"Cookies\" />\n}\n",
    "type": "docs"
  },
  "forms/number-field-disabled-demo": {
    "component": "@/components/docs/forms/number-field-disabled-demo",
    "raw": "'use client'\n\nimport { NumberField } from 'ui'\n\nexport default function NumberFieldDisabledDemo() {\n  return <NumberField isDisabled label=\"Cookies\" />\n}\n",
    "type": "docs"
  },
  "forms/radio-group-demo": {
    "component": "@/components/docs/forms/radio-group-demo",
    "raw": "'use client'\n\nimport { Radio, RadioGroup } from 'ui'\n\nexport default function RadioGroupDemo() {\n  return (\n    <RadioGroup label=\"Features\">\n      <Radio value=\"fs\">Font size: Small, Medium, Large</Radio>\n      <Radio value=\"dr\">Display resolution: 1080p, 1440p, 4K</Radio>\n      <Radio value=\"ss\">Sound settings: Mute, Low, Medium, High</Radio>\n      <Radio value=\"bi\">Background image: Default, Custom</Radio>\n      <Radio value=\"ks\">Keyboard shortcuts: Enabled, Disabled</Radio>\n    </RadioGroup>\n  )\n}\n",
    "type": "docs"
  },
  "forms/slider-demo": {
    "component": "@/components/docs/forms/slider-demo",
    "raw": "import { Slider } from 'ui'\n\nexport default function SliderDemo() {\n  return <Slider label=\"Volume\" />\n}\n",
    "type": "docs"
  },
  "forms/checkbox-invalid-demo": {
    "component": "@/components/docs/forms/checkbox-invalid-demo",
    "raw": "'use client'\n\nimport { Checkbox } from 'ui'\n\nexport default function CheckboxInvalidDemo() {\n  return <Checkbox isInvalid>Enable notifications</Checkbox>\n}\n",
    "type": "docs"
  },
  "forms/search-field-demo": {
    "component": "@/components/docs/forms/search-field-demo",
    "raw": "import { SearchField } from 'ui'\n\nexport default function SearchFieldDemo() {\n  return <SearchField aria-label=\"Search\" placeholder=\"Search\" />\n}\n",
    "type": "docs"
  },
  "forms/slider-disabled-demo": {
    "component": "@/components/docs/forms/slider-disabled-demo",
    "raw": "'use client'\n\nimport { Slider } from 'ui'\n\nexport default function SliderDisabledDemo() {\n  return <Slider isDisabled label=\"Volume\" />\n}\n",
    "type": "docs"
  },
  "forms/text-field-prefix-suffix-demo": {
    "component": "@/components/docs/forms/text-field-prefix-suffix-demo",
    "raw": "'use client'\n\nimport { IconBrandTwitter } from '@irsyadadl/paranoid'\nimport { TextField } from 'ui'\n\nexport default function TextFieldDemo() {\n  return (\n    <div className=\"flex flex-col gap-4\">\n      <TextField label=\"Twitter\" suffix={<IconBrandTwitter />} />\n      <TextField label=\"Sites\" prefix=\"https://\" suffix=\".com\" />\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "forms/textarea-disabled-demo": {
    "component": "@/components/docs/forms/textarea-disabled-demo",
    "raw": "'use client'\n\nimport { Textarea } from 'ui'\n\nexport default function TextareaDisabledDemo() {\n  return <Textarea isDisabled label=\"Address\" />\n}\n",
    "type": "docs"
  },
  "forms/text-field-demo": {
    "component": "@/components/docs/forms/text-field-demo",
    "raw": "'use client'\n\nimport { TextField } from 'ui'\n\nexport default function TextFieldDemo() {\n  return <TextField label=\"Name\" />\n}\n",
    "type": "docs"
  },
  "forms/slider-step-demo": {
    "component": "@/components/docs/forms/slider-step-demo",
    "raw": "'use client'\n\nimport { Slider } from 'ui'\n\nexport default function SliderStepDemo() {\n  return <Slider step={10} description=\"Step in 10\" label=\"Progress tracking\" />\n}\n",
    "type": "docs"
  },
  "forms/form-demo": {
    "component": "@/components/docs/forms/form-demo",
    "raw": "'use client'\n\nimport { Button, Form, Heading, TextField } from 'ui'\n\nexport default function FormDemo() {\n  return (\n    <div className=\"mx-auto max-w-md py-10\">\n      <Heading level={2} className=\"mb-4\">\n        Register\n      </Heading>\n      <Form onSubmit={() => {}} className=\"space-y-4\">\n        <TextField isRequired label=\"Name\" placeholder=\"Enter your name\" />\n        <TextField isRequired label=\"Email\" placeholder=\"Enter your email\" />\n        <div className=\"grid grid-cols-2 gap-4\">\n          <TextField isRequired label=\"Password\" placeholder=\"Enter your password\" type=\"password\" />\n          <TextField isRequired label=\"Confirm Password\" placeholder=\"Enter your password again\" type=\"password\" />\n        </div>\n        <Button type=\"submit\">Submit</Button>\n      </Form>\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "forms/switch-demo": {
    "component": "@/components/docs/forms/switch-demo",
    "raw": "'use client'\n\nimport { useTheme } from 'next-themes'\nimport { Switch } from 'ui'\n\nexport default function SwitchDemo() {\n  const { resolvedTheme, setTheme } = useTheme()\n  return <Switch onChange={() => setTheme(resolvedTheme === 'light' ? 'dark' : 'light')}>Switch Theme</Switch>\n}\n",
    "type": "docs"
  },
  "forms/radio-group-invalid-demo": {
    "component": "@/components/docs/forms/radio-group-invalid-demo",
    "raw": "'use client'\n\nimport { Radio, RadioGroup } from 'ui'\n\nexport default function RadioGroupInvalidDemo() {\n  return (\n    <RadioGroup isInvalid label=\"Features\">\n      <Radio value=\"fs\">Font size: Small, Medium, Large</Radio>\n      <Radio value=\"dr\">Display resolution: 1080p, 1440p, 4K</Radio>\n      <Radio value=\"ss\">Sound settings: Mute, Low, Medium, High</Radio>\n      <Radio value=\"bi\">Background image: Default, Custom</Radio>\n      <Radio value=\"ks\">Keyboard shortcuts: Enabled, Disabled</Radio>\n    </RadioGroup>\n  )\n}\n",
    "type": "docs"
  },
  "forms/text-field-disabled-demo": {
    "component": "@/components/docs/forms/text-field-disabled-demo",
    "raw": "'use client'\n\nimport { TextField } from 'ui'\n\nexport default function TextFieldDisabledDemo() {\n  return <TextField isDisabled label=\"Name\" />\n}\n",
    "type": "docs"
  },
  "forms/radio-group-disabled-demo": {
    "component": "@/components/docs/forms/radio-group-disabled-demo",
    "raw": "'use client'\n\nimport { Radio, RadioGroup } from 'ui'\n\nexport default function RadioGroupDisabledDemo() {\n  return (\n    <RadioGroup isDisabled label=\"Features\">\n      <Radio value=\"fs\">Font size: Small, Medium, Large</Radio>\n      <Radio value=\"dr\">Display resolution: 1080p, 1440p, 4K</Radio>\n      <Radio value=\"ss\">Sound settings: Mute, Low, Medium, High</Radio>\n      <Radio value=\"bi\">Background image: Default, Custom</Radio>\n      <Radio value=\"ks\">Keyboard shortcuts: Enabled, Disabled</Radio>\n    </RadioGroup>\n  )\n}\n",
    "type": "docs"
  },
  "forms/number-field-demo": {
    "component": "@/components/docs/forms/number-field-demo",
    "raw": "'use client'\n\nimport { NumberField } from 'ui'\n\nexport default function NumberFieldDemo() {\n  return <NumberField label=\"Cookies\" />\n}\n",
    "type": "docs"
  },
  "forms/checkbox-disabled-demo": {
    "component": "@/components/docs/forms/checkbox-disabled-demo",
    "raw": "'use client'\n\nimport { Checkbox } from 'ui'\n\nexport default function CheckboxDisabledDemo() {\n  return <Checkbox isDisabled>Enable notifications</Checkbox>\n}\n",
    "type": "docs"
  },
  "forms/text-field-loading-demo": {
    "component": "@/components/docs/forms/text-field-loading-demo",
    "raw": "'use client'\n\nimport { TextField } from 'ui'\n\nexport default function TextFieldLoadingDemo() {\n  return <TextField isLoading indicatorPlace=\"suffix\" label=\"Name\" />\n}\n",
    "type": "docs"
  },
  "forms/switch-disabled-demo": {
    "component": "@/components/docs/forms/switch-disabled-demo",
    "raw": "'use client'\n\nimport { Switch } from 'ui'\n\nexport default function SwitchDemo() {\n  return <Switch isDisabled>Dark Mode</Switch>\n}\n",
    "type": "docs"
  },
  "buttons/file-trigger-disabled-demo": {
    "component": "@/components/docs/buttons/file-trigger-disabled-demo",
    "raw": "'use client'\n\nimport React from 'react'\nimport { Description, FileTrigger } from 'ui'\n\nexport default function FileTriggerDemo() {\n  const [file, setFile] = React.useState<string[] | null>(null)\n  return (\n    <>\n      <FileTrigger\n        isDisabled\n        onSelect={(e) => {\n          const files = Array.from(e ?? [])\n          const filenames = files.map((file) => file.name)\n          setFile(filenames)\n        }}\n      />\n      {file && <Description>{file}</Description>}\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "buttons/button-intent-demo": {
    "component": "@/components/docs/buttons/button-intent-demo",
    "raw": "'use client'\n\nimport { Button } from 'ui'\n\nexport default function ButtonIntentDemo() {\n  return <Button intent=\"danger\">Label</Button>\n}\n",
    "type": "docs"
  },
  "buttons/file-trigger-folder-demo": {
    "component": "@/components/docs/buttons/file-trigger-folder-demo",
    "raw": "'use client'\n\nimport { FileTrigger } from 'ui'\n\nexport default function FileTriggerFolderDemo() {\n  return <FileTrigger acceptDirectory />\n}\n",
    "type": "docs"
  },
  "buttons/file-trigger-demo": {
    "component": "@/components/docs/buttons/file-trigger-demo",
    "raw": "'use client'\n\nimport React from 'react'\nimport { Description, FileTrigger } from 'ui'\n\nexport default function FileTriggerDemo() {\n  const [file, setFile] = React.useState<string[] | null>(null)\n  return (\n    <>\n      <FileTrigger\n        onSelect={(e) => {\n          const files = Array.from(e ?? [])\n          const filenames = files.map((file) => file.name)\n          setFile(filenames)\n        }}\n      />\n      {file && <Description>{file}</Description>}\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "buttons/button-icon-demo": {
    "component": "@/components/docs/buttons/button-icon-demo",
    "raw": "'use client'\n\nimport { IconBrandLaravel } from '@irsyadadl/paranoid'\nimport { Button } from 'ui'\n\nexport default function ButtonIconDemo() {\n  return (\n    <Button intent=\"danger\">\n      <IconBrandLaravel />\n      Laravel\n    </Button>\n  )\n}\n",
    "type": "docs"
  },
  "buttons/toggle-button-demo": {
    "component": "@/components/docs/buttons/toggle-button-demo",
    "raw": "'use client'\n\nimport { ToggleButton } from 'ui'\n\nexport default function ToggleButtonDemo() {\n  return <ToggleButton>{({ isSelected }) => <>{isSelected ? 'Unpin' : 'Pin'}</>}</ToggleButton>\n}\n",
    "type": "docs"
  },
  "buttons/button-disabled-demo": {
    "component": "@/components/docs/buttons/button-disabled-demo",
    "raw": "'use client'\n\nimport { Button } from 'ui'\n\nexport default function ButtonDisabledDemo() {\n  return <Button isDisabled>Label</Button>\n}\n",
    "type": "docs"
  },
  "buttons/button-only-icon-demo": {
    "component": "@/components/docs/buttons/button-only-icon-demo",
    "raw": "'use client'\n\nimport { IconBrandParsinta } from '@irsyadadl/paranoid'\nimport { Button } from 'ui'\n\nexport default function ButtonOnlyIconDemo() {\n  return (\n    <Button size=\"square-petite\" appearance=\"outline\">\n      <IconBrandParsinta />\n    </Button>\n  )\n}\n",
    "type": "docs"
  },
  "buttons/button-size-demo": {
    "component": "@/components/docs/buttons/button-size-demo",
    "raw": "'use client'\n\nimport { Button } from 'ui'\n\nexport default function ButtonSizeDemo() {\n  return (\n    <div className=\"flex gap-2\">\n      <Button size=\"extra-small\">Label</Button>\n      <Button size=\"small\">Label</Button>\n      <Button>Label</Button>\n      <Button size=\"large\">Label</Button>\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "buttons/button-shape-demo": {
    "component": "@/components/docs/buttons/button-shape-demo",
    "raw": "'use client'\n\nimport { Button } from 'ui'\n\nexport default function ButtonShapeDemo() {\n  return <Button shape=\"circle\">Label</Button>\n}\n",
    "type": "docs"
  },
  "buttons/file-trigger-multiple-demo": {
    "component": "@/components/docs/buttons/file-trigger-multiple-demo",
    "raw": "'use client'\n\nimport { FileTrigger } from 'ui'\n\nexport default function FileTriggerMultipleDemo() {\n  return <FileTrigger allowsMultiple />\n}\n",
    "type": "docs"
  },
  "buttons/file-trigger-camera-demo": {
    "component": "@/components/docs/buttons/file-trigger-camera-demo",
    "raw": "'use client'\n\nimport { FileTrigger } from 'ui'\n\nexport default function FileTriggerCameraDemo() {\n  return <FileTrigger defaultCamera=\"environment\">Open a camera</FileTrigger>\n}\n",
    "type": "docs"
  },
  "buttons/button-basic-demo": {
    "component": "@/components/docs/buttons/button-basic-demo",
    "raw": "'use client'\n\nimport { Button } from 'ui'\n\nexport default function ButtonBasicDemo() {\n  return <Button>Label</Button>\n}\n",
    "type": "docs"
  },
  "buttons/button-appearance-demo": {
    "component": "@/components/docs/buttons/button-appearance-demo",
    "raw": "'use client'\n\nimport title from 'title'\nimport { Button, buttonStyles } from 'ui'\n\ntype Appearance = keyof typeof buttonStyles.variants.appearance\n\nexport default function ButtonAppearanceDemo() {\n  return (\n    <div className=\"flex flex-col gap-2 md:flex-row md:flex-wrap\">\n      {Object.keys(buttonStyles.variants.appearance).map((appearance) => (\n        <div key={appearance}>\n          <Button appearance={appearance as Appearance}>{title(appearance)}</Button>\n        </div>\n      ))}\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "overlays/modal-triggered-by-menu-demo": {
    "component": "@/components/docs/overlays/modal-triggered-by-menu-demo",
    "raw": "'use client'\n\nimport { wait } from '@/lib/utils'\nimport { IconDotsVertical } from '@irsyadadl/paranoid'\nimport React from 'react'\nimport {\n  Button,\n  buttonStyles,\n  LoadingDots,\n  Menu,\n  MenuContent,\n  MenuItem,\n  MenuTrigger,\n  ModalClose,\n  ModalContent,\n  ModalDescription,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n  ModalTitle\n} from 'ui'\n\nexport default function ModalTriggeredByMenuDemo() {\n  const [state, setState] = React.useState<string | null>(null)\n  const [loading, setLoading] = React.useState<boolean>(false)\n  const closeModal = () => setState(null)\n  const executeAction = (action: string) => {\n    console.log(`${action} is executing`)\n    setLoading(true)\n    wait(2000).then(() => {\n      setLoading(false)\n      closeModal()\n    })\n  }\n\n  const actionType = (t: string | null) => {\n    switch (t) {\n      case 'delete':\n        return {\n          title: 'Delete User',\n          description: 'Are you sure you want to delete this item?',\n          confirmText: 'Delete',\n          action: () => executeAction(t)\n        }\n\n      case 'ban':\n        return {\n          title: 'Ban User',\n          description: 'Are you sure you want to ban this user?',\n          confirmText: 'Ban',\n          action: () => executeAction(t)\n        }\n\n      case 'restore':\n        return {\n          title: 'Restore User',\n          description: 'Are you sure you want to restore this user?',\n          confirmText: 'Restore',\n          action: () => executeAction(t)\n        }\n      default:\n        return\n    }\n  }\n  return (\n    <>\n      <Menu>\n        <MenuTrigger className={buttonStyles({ appearance: 'outline' })}>\n          <IconDotsVertical />\n        </MenuTrigger>\n        <MenuContent placement=\"bottom\">\n          <MenuItem onAction={() => setState('delete')}>Delete</MenuItem>\n          <MenuItem onAction={() => setState('ban')}>Ban</MenuItem>\n          <MenuItem onAction={() => setState('restore')}>Restore</MenuItem>\n        </MenuContent>\n      </Menu>\n\n      <ModalOverlay isOpen={state !== null} onOpenChange={closeModal}>\n        <ModalContent>\n          <ModalHeader>\n            <ModalTitle>{actionType(state)?.title}</ModalTitle>\n            <ModalDescription>{actionType(state)?.description}</ModalDescription>\n          </ModalHeader>\n          <ModalFooter>\n            <ModalClose>Cancel</ModalClose>\n            <Button className=\"min-w-24\" isDisabled={loading} onPress={actionType(state)?.action}>\n              {loading ? <LoadingDots className={'bg-fg'} /> : actionType(state)?.confirmText}\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </ModalOverlay>\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "overlays/sheet-basic-demo": {
    "component": "@/components/docs/overlays/sheet-basic-demo",
    "raw": "'use client'\n\nimport { Button, Sheet, SheetContent, SheetDescription, SheetFooter, SheetHeader, SheetOverlay, SheetTitle } from 'ui'\n\nexport default function SheetBasicDemo() {\n  return (\n    <Sheet>\n      <Button appearance=\"outline\">Open sheet</Button>\n      <SheetOverlay>\n        <SheetContent>\n          <SheetHeader>\n            <SheetTitle>Sheet Title</SheetTitle>\n            <SheetDescription>Sheet Description</SheetDescription>\n          </SheetHeader>\n          Sheet Body\n          <SheetFooter>Sheet Footer</SheetFooter>\n        </SheetContent>\n      </SheetOverlay>\n    </Sheet>\n  )\n}\n",
    "type": "docs"
  },
  "overlays/tooltip-demo": {
    "component": "@/components/docs/overlays/tooltip-demo",
    "raw": "'use client'\n\nimport { IconBrandGithub, IconBrandTwitter } from '@irsyadadl/paranoid'\nimport { buttonStyles, Tooltip, TooltipContent, TooltipTrigger } from 'ui'\n\nexport default function App() {\n  return (\n    <div className=\"flex gap-2\">\n      <Tooltip>\n        <TooltipTrigger\n          aria-label=\"Follow My Twitter\"\n          className={buttonStyles({\n            intent: 'secondary'\n          })}\n        >\n          <IconBrandTwitter />\n        </TooltipTrigger>\n        <TooltipContent>Tollow me on Twitter @irsyadadl</TooltipContent>\n      </Tooltip>\n      <Tooltip>\n        <TooltipTrigger\n          aria-label=\"Follow My Github\"\n          className={buttonStyles({\n            intent: 'secondary'\n          })}\n        >\n          <IconBrandGithub />\n        </TooltipTrigger>\n        <TooltipContent>Follow me on Github @irsyadadl</TooltipContent>\n      </Tooltip>\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "overlays/sheet-menu-demo": {
    "component": "@/components/docs/overlays/sheet-menu-demo",
    "raw": "'use client'\n\nimport {\n  IconBook,\n  IconBookOpen,\n  IconBrandCopilot,\n  IconBrandGithub,\n  IconBuilding,\n  IconChart,\n  IconCodeBrackets,\n  IconFilter,\n  IconGear,\n  IconGlobe,\n  IconHeart,\n  IconLogout,\n  IconMessages,\n  IconPeople,\n  IconPerson,\n  IconStar\n} from '@irsyadadl/paranoid'\nimport React from 'react'\nimport { Group, Menu } from 'react-aria-components'\nimport {\n  Avatar,\n  Button,\n  Checkbox,\n  Description,\n  MenuItem,\n  MenuSection,\n  MenuSeparator,\n  ModalBody,\n  ModalClose,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n  ModalTitle,\n  Select,\n  SelectItem,\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetOverlay,\n  SheetTitle,\n  SheetTrigger,\n  TextField\n} from 'ui'\n\nexport default function SheetMenuDemo() {\n  const [isOpen, setIsOpen] = React.useState(false)\n\n  const openModal = () => setIsOpen(true)\n  const closeModal = () => setIsOpen(false)\n  return (\n    <>\n      <ModalOverlay isOpen={isOpen} onOpenChange={setIsOpen}>\n        <ModalContent>\n          <ModalHeader>\n            <ModalTitle>Edit status</ModalTitle>\n          </ModalHeader>\n          <ModalBody>\n            <div className=\"space-y-4\">\n              <TextField prefix={<IconBrandGithub />} label=\"Status\" placeholder=\"What's your status?\" />\n              <Group>\n                <Checkbox>Busy</Checkbox>\n                <Description>\n                  When others mention you, assign you, or request your review, GitHub will let them know that you have\n                  limited availability.\n                </Description>\n              </Group>\n              <Select label=\"Clear Status\">\n                <SelectItem>Never</SelectItem>\n                <SelectItem>in 30 Minutes</SelectItem>\n                <SelectItem>in 1 Hour</SelectItem>\n                <SelectItem>in 8 Hours</SelectItem>\n                <SelectItem>after Today</SelectItem>\n                <SelectItem>after a Week</SelectItem>\n                <SelectItem>after a Month</SelectItem>\n              </Select>\n              <Select label=\"Visible to\">\n                <SelectItem>Everyone</SelectItem>\n                <SelectItem>Organization</SelectItem>\n                <SelectItem>Public</SelectItem>\n              </Select>\n            </div>\n          </ModalBody>\n          <ModalFooter>\n            <ModalClose>Clear Status</ModalClose>\n            <Button onPress={closeModal}>Set Status</Button>\n          </ModalFooter>\n        </ModalContent>\n      </ModalOverlay>\n      <Sheet>\n        <SheetTrigger aria-label=\"Open menu\">\n          <Avatar src=\"https://github.com/irsyadadl.png\" alt=\"irsyadadl\" />\n        </SheetTrigger>\n        <SheetOverlay>\n          <SheetContent closeButton={false}>\n            <SheetHeader className=\"flex flex-row items-center gap-x-3 mb-2\">\n              <Avatar src=\"https://github.com/irsyadadl.png\" alt=\"irsyadadl\" />\n              <div>\n                <SheetTitle>irsyadadl</SheetTitle>\n                <SheetDescription>Irsyad A. Panjaitan</SheetDescription>\n              </div>\n            </SheetHeader>\n            <Menu>\n              <MenuItem onAction={openModal}>\n                <IconBrandGithub />\n                Edit Status\n              </MenuItem>\n              <MenuSeparator />\n              <MenuSection>\n                <MenuItem>\n                  <IconPerson />\n                  Your profile\n                </MenuItem>\n                <MenuItem>\n                  <IconBook /> Your repositories\n                </MenuItem>\n                <MenuItem>\n                  <IconBrandCopilot /> Your Copilot\n                </MenuItem>\n                <MenuItem>\n                  <IconChart /> Your projects\n                </MenuItem>\n                <MenuItem>\n                  <IconStar /> Your stars\n                </MenuItem>\n                <MenuItem>\n                  <IconCodeBrackets /> Your gists\n                </MenuItem>\n                <MenuItem>\n                  <IconBuilding /> Your organizations\n                </MenuItem>\n                <MenuItem>\n                  <IconGlobe /> Your enterprises\n                </MenuItem>\n                <MenuItem>\n                  <IconHeart />\n                  Your sponsors\n                </MenuItem>\n              </MenuSection>\n              <MenuSeparator />\n              <MenuSection>\n                <MenuItem>\n                  <IconFilter /> Feature preview\n                </MenuItem>\n                <MenuItem>\n                  <IconGear />\n                  Settings\n                </MenuItem>\n              </MenuSection>\n              <MenuSeparator />\n              <MenuSection>\n                <MenuItem>\n                  <IconBookOpen /> GitHub Docs\n                </MenuItem>\n                <MenuItem>\n                  <IconPeople /> GitHub Support\n                </MenuItem>\n                <MenuItem>\n                  <IconMessages /> GitHub Community\n                </MenuItem>\n              </MenuSection>\n              <MenuSeparator />\n              <MenuItem>\n                <IconLogout /> Sign out\n              </MenuItem>\n            </Menu>\n          </SheetContent>\n        </SheetOverlay>\n      </Sheet>\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "overlays/drawer-with-footer-demo": {
    "component": "@/components/docs/overlays/drawer-with-footer-demo",
    "raw": "'use client'\n\nimport {\n  buttonStyles,\n  Drawer,\n  DrawerBody,\n  DrawerClose,\n  DrawerContent,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerTitle,\n  DrawerTrigger\n} from 'ui'\n\nexport default function DrawerBasicDemo() {\n  return (\n    <Drawer>\n      <DrawerTrigger className={buttonStyles({ appearance: 'outline' })}>Open Drawer</DrawerTrigger>\n      <DrawerContent>\n        <DrawerHeader>\n          <DrawerTitle>The Beatles</DrawerTitle>\n        </DrawerHeader>\n        <DrawerBody>\n          The Beatles were an English rock band formed in Liverpool in 1960, comprising John Lennon, Paul McCartney,\n          George Harrison and Ringo Starr.\n        </DrawerBody>\n        <DrawerFooter>\n          <DrawerClose>Close</DrawerClose>\n        </DrawerFooter>\n      </DrawerContent>\n    </Drawer>\n  )\n}\n",
    "type": "docs"
  },
  "overlays/drawer-basic-demo": {
    "component": "@/components/docs/overlays/drawer-basic-demo",
    "raw": "'use client'\n\nimport { buttonStyles, Drawer, DrawerContent, DrawerDescription, DrawerHeader, DrawerTitle, DrawerTrigger } from 'ui'\n\nexport default function DrawerBasicDemo() {\n  return (\n    <Drawer>\n      <DrawerTrigger className={buttonStyles({ appearance: 'outline' })}>Open Drawer</DrawerTrigger>\n      <DrawerContent>\n        <DrawerHeader>\n          <DrawerTitle>The Beatles</DrawerTitle>\n          <DrawerDescription>\n            The Beatles were an English rock band formed in Liverpool in 1960, comprising John Lennon, Paul McCartney,\n            George Harrison and Ringo Starr.\n          </DrawerDescription>\n        </DrawerHeader>\n      </DrawerContent>\n    </Drawer>\n  )\n}\n",
    "type": "docs"
  },
  "overlays/sheet-demo": {
    "component": "@/components/docs/overlays/sheet-demo",
    "raw": "'use client'\n\nimport { OptionPreview } from '@/components/docs/docs-c/option-preview'\nimport React, { useState } from 'react'\nimport { Button, SheetContent, SheetDescription, SheetHeader, SheetOverlay, SheetTitle, Switch } from 'ui'\nimport { titleCase } from 'usemods'\n\ntype Side = 'left' | 'right' | 'top' | 'bottom'\nexport default function SheetDemo() {\n  const [sheetSide, setSheetSide] = React.useState<Side>('left')\n  const [isOpen, setIsOpen] = React.useState(false)\n\n  const [settings, setSettings] = useState({\n    closeButton: true,\n    isStack: true\n  })\n\n  const sides: Side[] = ['left', 'right', 'top', 'bottom']\n\n  const pressHandler = (side: Side, open: boolean) => {\n    setSheetSide(side)\n    setIsOpen(open)\n  }\n\n  return (\n    <>\n      <OptionPreview>\n        <Switch\n          defaultSelected={settings.isStack}\n          onChange={() => setSettings({ ...settings, isStack: !settings.isStack })}\n        >\n          Toggle stack\n        </Switch>\n        <Switch\n          defaultSelected={settings.closeButton}\n          onChange={() => setSettings({ ...settings, closeButton: !settings.closeButton })}\n        >\n          With x button\n        </Switch>\n      </OptionPreview>\n      <div className=\"grid grid-cols-2 gap-2\">\n        {sides.map((side, idx) => (\n          <Button appearance=\"outline\" onPress={() => pressHandler(side, true)} key={idx}>\n            {titleCase(side)}\n          </Button>\n        ))}\n      </div>\n      <SheetOverlay isOpen={isOpen} onOpenChange={setIsOpen}>\n        <SheetContent closeButton={settings.closeButton} isStack={settings.isStack} side={sheetSide}>\n          <SheetHeader>\n            <SheetTitle>{titleCase(sheetSide)}</SheetTitle>\n            <SheetDescription>The sheet will go from {sheetSide} side.</SheetDescription>\n          </SheetHeader>\n        </SheetContent>\n      </SheetOverlay>\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "overlays/alert-dialog-demo": {
    "component": "@/components/docs/overlays/alert-dialog-demo",
    "raw": "'use client'\n\nimport {\n  Button,\n  buttonStyles,\n  Modal,\n  ModalContent,\n  ModalDescription,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n  ModalTitle,\n  ModalTrigger\n} from 'ui'\n\nexport default function AlertDialogDemo() {\n  return (\n    <Modal>\n      <ModalTrigger className={buttonStyles({ intent: 'danger' })}>Delete</ModalTrigger>\n      <ModalOverlay isDismissable={false}>\n        <ModalContent>\n          {({ close }) => (\n            <>\n              <ModalHeader>\n                <ModalTitle>Delete file</ModalTitle>\n                <ModalDescription>This will permanently delete the selected file. Continue?</ModalDescription>\n              </ModalHeader>\n              <ModalFooter>\n                <Button appearance=\"outline\" onPress={close}>\n                  Cancel\n                </Button>\n                <Button intent=\"danger\" onPress={close}>\n                  Continue\n                </Button>\n              </ModalFooter>\n            </>\n          )}\n        </ModalContent>\n      </ModalOverlay>\n    </Modal>\n  )\n}\n",
    "type": "docs"
  },
  "overlays/drawer-controlled-demo": {
    "component": "@/components/docs/overlays/drawer-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\nimport { Button, Drawer, DrawerBody, DrawerClose, DrawerContent, DrawerFooter, DrawerHeader, DrawerTitle } from 'ui'\n\nexport default function DrawerBasicDemo() {\n  const [isOpen, setIsOpen] = React.useState(false)\n  return (\n    <>\n      <Button onPress={() => setIsOpen(!isOpen)} appearance=\"outline\">\n        Open Drawer\n      </Button>\n      <Drawer isOpen={isOpen} onOpenChange={setIsOpen}>\n        <DrawerContent>\n          <DrawerHeader>\n            <DrawerTitle>The Beatles</DrawerTitle>\n          </DrawerHeader>\n          <DrawerBody>\n            The Beatles were an English rock band formed in Liverpool in 1960, comprising John Lennon, Paul McCartney,\n            George Harrison and Ringo Starr.\n          </DrawerBody>\n          <DrawerFooter>\n            <DrawerClose>Close</DrawerClose>\n          </DrawerFooter>\n        </DrawerContent>\n      </Drawer>\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "overlays/modal-controlled-demo": {
    "component": "@/components/docs/overlays/modal-controlled-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\nimport {\n  Button,\n  ModalClose,\n  ModalContent,\n  ModalDescription,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n  ModalTitle\n} from 'ui'\n\nexport default function ModalControlledDemo() {\n  const [open, setOpen] = useState(false)\n  return (\n    <>\n      <Button onPress={() => setOpen(true)} intent=\"secondary\">\n        Controlled\n      </Button>\n      <ModalOverlay isOpen={open} onOpenChange={setOpen}>\n        <ModalContent>\n          <ModalHeader>\n            <ModalTitle>Delete file</ModalTitle>\n            <ModalDescription>This will permanently delete the selected file. Continue?</ModalDescription>\n          </ModalHeader>\n          <ModalFooter>\n            <ModalClose>Cancel</ModalClose>\n            <Button onPress={() => setOpen(false)}>Continue</Button>\n          </ModalFooter>\n        </ModalContent>\n      </ModalOverlay>\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "overlays/popover-demo": {
    "component": "@/components/docs/overlays/popover-demo",
    "raw": "'use client'\n\nimport { Button, Popover, PopoverContent } from 'ui'\n\nexport default function App() {\n  return (\n    <Popover>\n      <Button intent=\"secondary\">Forgot Password</Button>\n      <PopoverContent className=\"w-[28rem]\">\n        <div className=\"mb-4\">\n          <h2 className=\"font-semibold\">Email</h2>\n          <p className=\"text-sm text-muted-fg\">We'll send you an email to log in.</p>\n        </div>\n        <div className=\"flex gap-x-2\">\n          <Button>Send Login Link</Button>\n        </div>\n      </PopoverContent>\n    </Popover>\n  )\n}\n",
    "type": "docs"
  },
  "overlays/modal-demo": {
    "component": "@/components/docs/overlays/modal-demo",
    "raw": "'use client'\n\nimport {\n  Button,\n  Form,\n  Modal,\n  ModalClose,\n  ModalContent,\n  ModalDescription,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n  ModalTitle,\n  TextField\n} from 'ui'\n\nexport default function App() {\n  return (\n    <Modal>\n      <Button>Turn on 2FA</Button>\n      <ModalOverlay>\n        <ModalContent>\n          <ModalHeader>\n            <ModalTitle>Nice! Let's beef up your account.</ModalTitle>\n            <ModalDescription>\n              2FA beefs up your account's defense. Pop in your password to keep going.\n            </ModalDescription>\n          </ModalHeader>\n          <Form onSubmit={() => {}}>\n            <TextField isRequired label=\"Password\" type=\"password\" placeholder=\"Enter your password\" />\n            <ModalFooter className=\"pt-4\">\n              <ModalClose>Cancel</ModalClose>\n              <Button type=\"submit\">Turn on 2FA</Button>\n            </ModalFooter>\n          </Form>\n        </ModalContent>\n      </ModalOverlay>\n    </Modal>\n  )\n}\n",
    "type": "docs"
  },
  "navigation/tabs-demo": {
    "component": "@/components/docs/navigation/tabs-demo",
    "raw": "'use client'\n\nimport { Tab, TabList, TabPanel, Tabs } from 'ui'\n\nexport default function TabsDemo() {\n  return (\n    <Tabs aria-label=\"Packages\">\n      <TabList>\n        <Tab id=\"t1\">Tab 1</Tab>\n        <Tab id=\"t2\">Tab 2</Tab>\n        <Tab id=\"t3\">Tab 3</Tab>\n      </TabList>\n      <TabPanel id=\"t1\">Tab 1 content</TabPanel>\n      <TabPanel id=\"t2\">Tab 2 content</TabPanel>\n      <TabPanel id=\"t3\">Tab 3 content</TabPanel>\n    </Tabs>\n  )\n}\n",
    "type": "docs"
  },
  "navigation/pagination-dynamic-demo": {
    "component": "@/components/docs/navigation/pagination-dynamic-demo",
    "raw": "'use client'\n\nimport { Collection } from 'react-aria-components'\nimport {\n  Pagination,\n  PaginationContent,\n  PaginationFirst,\n  PaginationItem,\n  PaginationLabel,\n  PaginationLast,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n  PaginationSeparator\n} from 'ui'\n\nconst pages = Array.from({ length: 6 }, (_, i) => ({ value: i + 1 }))\nexport default function PaginationDynamicDemo() {\n  return (\n    <Pagination>\n      <PaginationContent>\n        <PaginationItem>\n          <PaginationFirst href=\"#\" />\n        </PaginationItem>\n        <PaginationItem>\n          <PaginationPrevious href=\"#\" />\n        </PaginationItem>\n        <PaginationItem className=\"lg:hidden\">\n          <PaginationContent className=\"rounded-lg border\">\n            <PaginationLabel className=\"font-semibold\">1</PaginationLabel>\n            <PaginationSeparator />\n            <PaginationLabel className=\"text-muted-fg\">6</PaginationLabel>\n          </PaginationContent>\n        </PaginationItem>\n        <PaginationItem className=\"hidden lg:inline\">\n          <PaginationContent>\n            <Collection items={pages}>\n              {(item) => (\n                <PaginationItem id={item.value.toString()}>\n                  <PaginationLink isActive={item.value === 4} href=\"#\">\n                    {item.value}\n                  </PaginationLink>\n                </PaginationItem>\n              )}\n            </Collection>\n          </PaginationContent>\n        </PaginationItem>\n        <PaginationItem>\n          <PaginationNext href=\"#\" />\n        </PaginationItem>\n        <PaginationItem>\n          <PaginationLast href=\"#\" />\n        </PaginationItem>\n      </PaginationContent>\n    </Pagination>\n  )\n}\n",
    "type": "docs"
  },
  "navigation/pagination-demo": {
    "component": "@/components/docs/navigation/pagination-demo",
    "raw": "'use client'\n\nimport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationFirst,\n  PaginationItem,\n  PaginationLast,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious\n} from 'ui'\n\nexport default function PaginationDemo() {\n  return (\n    <Pagination>\n      <PaginationContent>\n        <PaginationItem>\n          <PaginationFirst href=\"#\" />\n        </PaginationItem>\n        <PaginationItem>\n          <PaginationPrevious href=\"#\" />\n        </PaginationItem>\n        <PaginationItem>\n          <PaginationLink href=\"#\">1</PaginationLink>\n        </PaginationItem>\n        <PaginationItem>\n          <PaginationLink href=\"#\" isActive>\n            2\n          </PaginationLink>\n        </PaginationItem>\n        <PaginationItem>\n          <PaginationEllipsis />\n        </PaginationItem>\n        <PaginationItem>\n          <PaginationNext href=\"#\" />\n        </PaginationItem>\n        <PaginationItem>\n          <PaginationLast href=\"#\" />\n        </PaginationItem>\n      </PaginationContent>\n    </Pagination>\n  )\n}\n",
    "type": "docs"
  },
  "navigation/simple-pagination-demo": {
    "component": "@/components/docs/navigation/simple-pagination-demo",
    "raw": "'use client'\n\nimport {\n  Pagination,\n  PaginationContent,\n  PaginationFirst,\n  PaginationItem,\n  PaginationLabel,\n  PaginationLast,\n  PaginationNext,\n  PaginationPrevious,\n  PaginationSeparator\n} from 'ui'\n\nexport default function SimplePaginationDemo() {\n  return (\n    <Pagination>\n      <PaginationContent>\n        <PaginationItem>\n          <PaginationFirst href=\"#\" />\n        </PaginationItem>\n\n        <PaginationItem>\n          <PaginationPrevious href=\"#\" />\n        </PaginationItem>\n        <PaginationItem>\n          <PaginationContent className=\"rounded-lg border\">\n            <PaginationItem>\n              <PaginationLabel className=\"font-semibold\">1</PaginationLabel>\n            </PaginationItem>\n            <PaginationItem>\n              <PaginationSeparator />\n            </PaginationItem>\n            <PaginationItem>\n              <PaginationLabel className=\"text-muted-fg\">10</PaginationLabel>\n            </PaginationItem>\n          </PaginationContent>\n        </PaginationItem>\n        <PaginationItem>\n          <PaginationNext href=\"#\" />\n        </PaginationItem>\n        <PaginationItem>\n          <PaginationLast href=\"#\" />\n        </PaginationItem>\n      </PaginationContent>\n    </Pagination>\n  )\n}\n",
    "type": "docs"
  },
  "navigation/tabs-orientation-demo": {
    "component": "@/components/docs/navigation/tabs-orientation-demo",
    "raw": "'use client'\n\nimport { Tab, TabList, TabPanel, Tabs } from 'ui'\n\nexport default function TabsOrientationDemo() {\n  return (\n    <Tabs orientation=\"vertical\" aria-label=\"Packages\">\n      <TabList>\n        <Tab id=\"t1\">Tab 1</Tab>\n        <Tab id=\"t2\">Tab 2</Tab>\n        <Tab id=\"t3\">Tab 3</Tab>\n      </TabList>\n      <TabPanel id=\"t1\">Tab 1 content</TabPanel>\n      <TabPanel id=\"t2\">Tab 2 content</TabPanel>\n      <TabPanel id=\"t3\">Tab 3 content</TabPanel>\n    </Tabs>\n  )\n}\n",
    "type": "docs"
  },
  "navigation/link-demo": {
    "component": "@/components/docs/navigation/link-demo",
    "raw": "'use client'\n\nimport { Link } from 'ui'\n\nexport default function LinkDemo() {\n  return <Link href=\"/\">Link</Link>\n}\n",
    "type": "docs"
  },
  "navigation/breadcrumbs-demo": {
    "component": "@/components/docs/navigation/breadcrumbs-demo",
    "raw": "'use client'\n\nimport { Breadcrumb, Breadcrumbs } from 'ui'\n\nexport default function BreadcrumbsDemo() {\n  return (\n    <Breadcrumbs onAction={() => {}}>\n      <Breadcrumb href=\"/\">Home</Breadcrumb>\n      <Breadcrumb href=\"/design-system\">Design System</Breadcrumb>\n      <Breadcrumb>Collections</Breadcrumb>\n    </Breadcrumbs>\n  )\n}\n",
    "type": "docs"
  },
  "docs-c/option-preview": {
    "component": "@/components/docs/docs-c/option-preview",
    "raw": "'use client'\n\nimport React from 'react'\nimport { cn } from 'ui'\n\nexport function OptionPreview({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {\n  return <div className={cn('absolute left-4 top-4 inline-flex min-w-32 flex-col gap-1', className)} {...props} />\n}\n",
    "type": "docs"
  },
  "docs-c/table-of-buttons": {
    "component": "@/components/docs/docs-c/table-of-buttons",
    "raw": "'use client'\n\nimport { Badge, Card, Table, TableBody, TableCell, TableColumn, TableHeader, TableRow } from 'ui'\n\nexport function TableOfButtons() {\n  return (\n    <Card className=\"not-prose\">\n      <Table aria-label=\"The list of button variations\">\n        <TableHeader>\n          <TableColumn>Variant</TableColumn>\n          <TableColumn>Options</TableColumn>\n        </TableHeader>\n        <TableBody>\n          <TableRow>\n            <TableCell>Intent</TableCell>\n            <TableCell className=\"flex gap-1\">\n              <Badge>primary</Badge>\n              <Badge>secondary</Badge>\n              <Badge>success</Badge>\n              <Badge>light/dark</Badge>\n              <Badge>dark</Badge>\n              <Badge>light</Badge>\n              <Badge>info</Badge>\n              <Badge>warning</Badge>\n              <Badge>danger</Badge>\n            </TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell>Appearance</TableCell>\n            <TableCell className=\"flex gap-1\">\n              <Badge>solid</Badge>\n              <Badge>outline</Badge>\n              <Badge>plain</Badge>\n            </TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell>Size</TableCell>\n            <TableCell>square-petite, extra-small, small, medium, large</TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell>Shape</TableCell>\n            <TableCell className=\"flex gap-1\">\n              <Badge>square</Badge>\n              <Badge>circle</Badge>\n            </TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell>Default Variants</TableCell>\n            <TableCell>intent: primary, appearance: solid, size: medium, shape: square</TableCell>\n          </TableRow>\n        </TableBody>\n      </Table>\n    </Card>\n  )\n}\n",
    "type": "docs"
  },
  "drag-and-drop/drop-zone-and-file-trigger-demo": {
    "component": "@/components/docs/drag-and-drop/drop-zone-and-file-trigger-demo",
    "raw": "'use client'\n\nimport React from 'react'\nimport { FileDropItem } from 'react-aria'\nimport { DropZone, FileTrigger, Label } from 'ui'\n\nexport default function DropZoneAndFileTriggerDemo() {\n  const [files, setFiles] = React.useState<string[] | null>(null)\n\n  const handleDrop = (e: { items: any[] }) => {\n    const files = e.items.filter((file) => file.kind === 'file') as FileDropItem[]\n    const filenames = files.map((file) => file.name)\n    if (filenames.length > 0) {\n      setFiles(filenames)\n    }\n  }\n\n  const handleSelect = (files: FileList | null) => {\n    let fileArray = Array.from(files ?? [])\n    let filenames = fileArray.map((file) => file.name)\n    setFiles(filenames)\n  }\n  return (\n    <DropZone onDrop={handleDrop}>\n      <FileTrigger allowsMultiple onSelect={(e) => handleSelect(e)}>\n        Select files\n      </FileTrigger>\n      <Label slot=\"label\">{files ? files.join(', ') : 'Toss your stuff here'}</Label>\n    </DropZone>\n  )\n}\n",
    "type": "docs"
  },
  "drag-and-drop/drop-zone-demo": {
    "component": "@/components/docs/drag-and-drop/drop-zone-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { DropZone, Label } from 'ui'\n\nexport default function DropZoneDemo() {\n  let [dropped, setDropped] = React.useState(false)\n\n  return (\n    <DropZone onDrop={() => setDropped(true)}>\n      <Label>{dropped ? 'Drop nailed' : 'Toss your stuff here'}</Label>\n    </DropZone>\n  )\n}\n",
    "type": "docs"
  },
  "rehype/source-code": {
    "component": "@/components/docs/rehype/source-code",
    "raw": "'use client'\n\nimport jsonPreviews from '@/components/docs/generated/previews.json'\nimport { Code } from '@/components/docs/rehype/code'\nimport { cn } from '@/lib/utils'\nimport { Collapsible, CollapsibleContent, CollapsibleTrigger } from '@radix-ui/react-collapsible'\nimport * as React from 'react'\nimport { Button } from 'ui'\n\ninterface SourceCodeProps extends React.HTMLAttributes<HTMLDivElement> {\n  toShow: string\n}\n\nexport function SourceCode({ toShow, ...props }: SourceCodeProps) {\n  const [codeString, setCodeString] = React.useState('')\n  const [isOpened, setIsOpened] = React.useState(false)\n  React.useMemo(() => {\n    // @ts-ignore\n    const componentData = jsonPreviews[toShow]\n    if (componentData) {\n      const updatedRawContent = componentData.raw.replace(\n        /export default function \\w+\\(\\) \\{/g,\n        'export default function App() {'\n      )\n      setCodeString(updatedRawContent)\n    } else {\n      console.error('Component not found:', toShow)\n    }\n  }, [toShow])\n  return (\n    <section className=\"my-6 not-prose\">\n      <p className=\"mb-4 -mt-2\">\n        And next, you can copy the code below and paste it into your dopest component folder.\n      </p>\n      <div className={cn('overflow-hidden rounded-md')}>\n        <Collapsible open={isOpened} onOpenChange={setIsOpened}>\n          <div className={'relative overflow-hidden'} {...props}>\n            <CollapsibleContent forceMount className={cn('overflow-hidden', !isOpened && 'h-32')}>\n              <div\n                className={cn(\n                  '[&_pre]:my-0 [&_pre]:max-h-[32rem] [&_pre]:pb-[100px]',\n                  !isOpened ? '[&_pre]:overflow-hidden' : '[&_pre]:overflow-auto]'\n                )}\n              >\n                <Code code={codeString} />\n              </div>\n            </CollapsibleContent>\n            <div\n              className={cn(\n                'absolute flex items-center justify-center bg-gradient-to-b from-popover/50 to-background',\n                isOpened ? 'inset-x-0 bottom-0 h-12' : 'inset-0'\n              )}\n            >\n              <CollapsibleTrigger asChild>\n                <Button intent=\"secondary\" size=\"small\">\n                  {isOpened ? 'Collapse' : 'Expand'}\n                </Button>\n              </CollapsibleTrigger>\n            </div>\n          </div>\n        </Collapsible>\n      </div>\n    </section>\n  )\n}\n",
    "type": "docs"
  },
  "rehype/code": {
    "component": "@/components/docs/rehype/code",
    "raw": "'use client'\n\nimport { IconCircleInfo } from '@irsyadadl/paranoid'\nimport React from 'react'\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter'\nimport { nightOwl as theme } from 'react-syntax-highlighter/dist/esm/styles/prism'\nimport { cn, CopyButton } from 'ui'\nimport { copyToClipboard } from 'usemods'\n\nfunction Code({ lang = 'tsx', code }: { lang?: string; code: string }) {\n  const [copied, setCopied] = React.useState<string>('')\n\n  function copyImportsToClipboard(): void {\n    const importRegex = /import[\\s\\S]+?from\\s+['\"][\\s\\S]+?['\"];?\\n*/g\n    const _imports = code.match(importRegex) || []\n    const imports = _imports.map((importStatement: string) => importStatement.trim()).join('\\n')\n    copyToClipboard(imports)\n      .then(() => {\n        setCopied('imports')\n        setTimeout(() => setCopied(''), 2000)\n      })\n      .catch((err) => console.error('Copy failed: ', err))\n  }\n\n  return (\n    <div className=\"dfakdpxe2941 not-prose group relative max-h-96 overflow-y-auto rounded-lg [&_pre]:!bg-[#0e0e10] [&_pre_code]:!leading-loose [&_pre]:!m-0 [&_pre]:!p-4 border-zinc-800 border font-mono text-sm\">\n      <div className={cn('absolute z-20 bottom-auto right-3 top-3 flex gap-1.5')}>\n        <CopyRawButton code={code} />\n        <CopyButton initialIcon={<IconCircleInfo />} isCopied={copied === 'imports'} onPress={copyImportsToClipboard} />\n      </div>\n      <SyntaxHighlighter language={lang} style={theme}>\n        {code}\n      </SyntaxHighlighter>\n    </div>\n  )\n}\n\nexport function CopyRawButton({ code }: { className?: string; code: any }) {\n  const [copied, setCopied] = React.useState<string>('')\n  const copyRaw = () => {\n    copyToClipboard(code)\n      .then(() => {\n        setCopied('raw')\n        setTimeout(() => setCopied(''), 2000)\n      })\n      .catch((err) => {\n        console.error('Copy failed: ', err)\n      })\n  }\n  return <CopyButton isCopied={copied === 'raw'} onPress={copyRaw} />\n}\n\nexport { Code }\n",
    "type": "docs"
  },
  "rehype/plain-code": {
    "component": "@/components/docs/rehype/plain-code",
    "raw": "'use client'\n\nimport { Code } from '@/components/docs/rehype/code'\nimport { cn } from '@/lib/utils'\nimport { Collapsible, CollapsibleContent, CollapsibleTrigger } from '@radix-ui/react-collapsible'\nimport * as React from 'react'\nimport { Button } from 'ui'\n\ninterface PlainCodeProps extends React.HTMLAttributes<HTMLDivElement> {\n  code: string\n  lang?: string\n}\n\nexport function PlainCode({ lang = 'tsx', code, ...props }: PlainCodeProps) {\n  const [isOpened, setIsOpened] = React.useState(false)\n  return (\n    <section className=\"my-6 not-prose\">\n      <div className={cn('overflow-hidden rounded-md')}>\n        <Collapsible open={isOpened} onOpenChange={setIsOpened}>\n          <div className={'relative overflow-hidden'} {...props}>\n            <CollapsibleContent forceMount className={cn('overflow-hidden', !isOpened && 'h-32')}>\n              <div\n                className={cn(\n                  '[&_pre]:my-0 [&_pre]:max-h-[32rem] [&_pre]:pb-[120px]',\n                  !isOpened ? '[&_pre]:overflow-hidden' : '[&_pre]:overflow-auto]'\n                )}\n              >\n                <Code lang={lang} code={code} />\n              </div>\n            </CollapsibleContent>\n            <div\n              className={cn(\n                'absolute flex items-center justify-center bg-gradient-to-b from-popover/50 to-background',\n                isOpened ? 'inset-x-0 bottom-0 h-12' : 'inset-0'\n              )}\n            >\n              <CollapsibleTrigger asChild>\n                <Button intent=\"secondary\" size=\"small\">\n                  {isOpened ? 'Collapse' : 'Expand'}\n                </Button>\n              </CollapsibleTrigger>\n            </div>\n          </div>\n        </Collapsible>\n      </div>\n    </section>\n  )\n}\n",
    "type": "docs"
  },
  "toc": {
    "component": "@/components/docs/toc",
    "raw": "'use client'\n\nimport React, { Suspense } from 'react'\nimport { Heading, Menu, MenuItem } from 'react-aria-components'\nimport { cn, Skeleton } from 'ui'\n\nexport function Toc({ items }: { items: any[] }) {\n  const ids = items.map((item) => item.url.split('#')[1])\n  const activeId = useActiveItem(ids)\n  return (\n    <div>\n      <aside className=\"hidden xl:sticky xl:top-[1.75rem] xl:-mr-6 xl:block xl:h-[calc(100vh-4.75rem)] xl:flex-none xl:overflow-y-auto xl:py-16 xl:pr-6\">\n        <nav aria-labelledby=\"on-this-page-title\" className=\"w-56\">\n          <Suspense\n            fallback={\n              <div className=\"space-y-2\">\n                <Skeleton className=\"h-3 w-20 animate-pulse\" />\n                <Skeleton className=\"h-3 w-32 animate-pulse\" />\n                <Skeleton className=\"h-3 w-12 animate-pulse bg-fg/50\" />\n                <Skeleton className=\"h-3 w-16 animate-pulse\" />\n                <Skeleton className=\"h-3 w-8 animate-pulse\" />\n                <Skeleton className=\"h-3 w-24 animate-pulse\" />\n              </div>\n            }\n          >\n            <>\n              <Heading level={2} className=\"text-base lg:text-lg font-semibold leading-7 mb-6 text-fg\">\n                On this page\n              </Heading>\n              <Menu className=\"flex flex-col gap-y-2\">\n                {items.map((item) => (\n                  <MenuItem\n                    key={item.title}\n                    className={cn('outline-none text-muted-fg lg:text-sm', {\n                      'text-primary font-medium': item.url.split('#')[1] === activeId\n                    })}\n                    id={item.title}\n                    href={item.url}\n                  >\n                    {item.title}\n                  </MenuItem>\n                ))}\n              </Menu>\n            </>\n          </Suspense>\n        </nav>\n      </aside>\n    </div>\n  )\n}\n\nfunction useActiveItem(itemIds: string[]) {\n  const [activeId, setActiveId] = React.useState<string | null>(null)\n\n  React.useEffect(() => {\n    const observer = new IntersectionObserver(\n      (entries) => {\n        let bestCandidate: IntersectionObserverEntry | null = null\n        entries.forEach((entry) => {\n          if (entry.isIntersecting && (!bestCandidate || bestCandidate.intersectionRatio < entry.intersectionRatio)) {\n            bestCandidate = entry\n          }\n        })\n        if (bestCandidate) {\n          // @ts-ignore\n          setActiveId(bestCandidate.target.id)\n        }\n      },\n      { rootMargin: '0% 0% -80% 0%', threshold: 0.5 }\n    )\n\n    itemIds.forEach((id) => {\n      const element = document.getElementById(id)\n      if (element) observer.observe(element)\n    })\n\n    return () => {\n      itemIds.forEach((id) => {\n        const element = document.getElementById(id)\n        if (element) observer.unobserve(element)\n      })\n    }\n  }, [itemIds, activeId])\n\n  return activeId\n}\n",
    "type": "docs"
  },
  "pickers/select-disabled-demo": {
    "component": "@/components/docs/pickers/select-disabled-demo",
    "raw": "'use client'\n\nimport { Select, SelectItem } from 'ui'\n\nconst software = [\n  { id: 1, name: 'Adobe Photoshop' }\n  //...\n]\n\nexport default function SelectDisabledDemo() {\n  return (\n    <Select label=\"Design software\" isDisabled placeholder=\"Select a software\" items={software}>\n      {(item) => (\n        <SelectItem id={item.id} textValue={item.name}>\n          {item.name}\n        </SelectItem>\n      )}\n    </Select>\n  )\n}\n",
    "type": "docs"
  },
  "pickers/combo-box-demo": {
    "component": "@/components/docs/pickers/combo-box-demo",
    "raw": "'use client'\n\nimport { ComboBox, ComboBoxItem } from 'ui'\n\nconst users = [\n  { id: 1, name: 'Barbara Kirlin Sr.', image_url: 'https://i.pravatar.cc/150?img=1' },\n  { id: 2, name: 'Rosemarie Koch', image_url: 'https://i.pravatar.cc/150?img=2' },\n  { id: 3, name: 'Mrs. Reva Heaney Jr.', image_url: 'https://i.pravatar.cc/150?img=3' },\n  { id: 4, name: 'Ms. Ettie Abshire DVM', image_url: 'https://i.pravatar.cc/150?img=4' },\n  { id: 5, name: 'Bria Ziemann', image_url: 'https://i.pravatar.cc/150?img=5' },\n  { id: 6, name: 'Heloise Borer Sr.', image_url: 'https://i.pravatar.cc/150?img=6' },\n  { id: 7, name: 'Miss Jacinthe Gerlach DVM', image_url: 'https://i.pravatar.cc/150?img=7' },\n  { id: 8, name: 'Miss Stephania Schaefer Sr.', image_url: 'https://i.pravatar.cc/150?img=8' },\n  { id: 9, name: 'Kevon Hackett MD', image_url: 'https://i.pravatar.cc/150?img=9' },\n  { id: 10, name: 'Tom Ledner', image_url: 'https://i.pravatar.cc/150?img=10' }\n]\n\nexport default function ComboBoxDemo() {\n  return (\n    <ComboBox placeholder=\"Select a user\" label=\"Users\" isRequired items={users}>\n      {(item) => (\n        <ComboBoxItem key={item.id} id={item.id} textValue={item.name}>\n          {item.name}\n        </ComboBoxItem>\n      )}\n    </ComboBox>\n  )\n}\n",
    "type": "docs"
  },
  "pickers/select-demo": {
    "component": "@/components/docs/pickers/select-demo",
    "raw": "'use client'\n\nimport { Select, SelectItem } from 'ui'\n\nconst software = [\n  { id: 1, name: 'Adobe Photoshop' },\n  { id: 2, name: 'Sketch' },\n  { id: 3, name: 'Figma' },\n  { id: 4, name: 'Adobe XD' },\n  { id: 5, name: 'InVision' }\n]\nexport default function SelectDemo() {\n  return (\n    <Select label=\"Design software\" placeholder=\"Select a software\" items={software}>\n      {(item) => (\n        <SelectItem key={item.id} id={item.id} textValue={item.name}>\n          {item.name}\n        </SelectItem>\n      )}\n    </Select>\n  )\n}\n",
    "type": "docs"
  },
  "pickers/combo-box-avatar-demo": {
    "component": "@/components/docs/pickers/combo-box-avatar-demo",
    "raw": "'use client'\n\nimport { Avatar, ComboBox, ComboBoxItem } from 'ui'\n\nconst users = [\n  { id: 1, name: 'Barbara Kirlin Sr.', image_url: 'https://i.pravatar.cc/150?img=1' },\n  { id: 2, name: 'Rosemarie Koch', image_url: 'https://i.pravatar.cc/150?img=2' },\n  { id: 3, name: 'Mrs. Reva Heaney Jr.', image_url: 'https://i.pravatar.cc/150?img=3' },\n  { id: 4, name: 'Ms. Ettie Abshire DVM', image_url: 'https://i.pravatar.cc/150?img=4' },\n  { id: 5, name: 'Bria Ziemann', image_url: 'https://i.pravatar.cc/150?img=5' },\n  { id: 6, name: 'Heloise Borer Sr.', image_url: 'https://i.pravatar.cc/150?img=6' },\n  { id: 7, name: 'Miss Jacinthe Gerlach DVM', image_url: 'https://i.pravatar.cc/150?img=7' },\n  { id: 8, name: 'Miss Stephania Schaefer Sr.', image_url: 'https://i.pravatar.cc/150?img=8' },\n  { id: 9, name: 'Kevon Hackett MD', image_url: 'https://i.pravatar.cc/150?img=9' },\n  { id: 10, name: 'Tom Ledner', image_url: 'https://i.pravatar.cc/150?img=10' }\n]\n\nexport default function ComboBoxAvatarDemo() {\n  return (\n    <ComboBox placeholder=\"Select a user\" label=\"Users\" isRequired items={users}>\n      {(item) => (\n        <ComboBoxItem key={item.id} id={item.id} textValue={item.name}>\n          <Avatar src={item.image_url} />\n          {item.name}\n        </ComboBoxItem>\n      )}\n    </ComboBox>\n  )\n}\n",
    "type": "docs"
  },
  "pickers/select-invalid-demo": {
    "component": "@/components/docs/pickers/select-invalid-demo",
    "raw": "'use client'\n\nimport { Select, SelectItem } from 'ui'\n\nconst software = [\n  { id: 1, name: 'Adobe Photoshop' }\n  //...\n]\n\nexport default function SelectInvalidDemo() {\n  return (\n    <Select label=\"Design software\" isInvalid placeholder=\"Select a software\" items={software}>\n      {(item) => (\n        <SelectItem id={item.id} textValue={item.name}>\n          {item.name}\n        </SelectItem>\n      )}\n    </Select>\n  )\n}\n",
    "type": "docs"
  },
  "pickers/combo-box-invalid-demo": {
    "component": "@/components/docs/pickers/combo-box-invalid-demo",
    "raw": "'use client'\n\nimport { Avatar, ComboBox, ComboBoxItem } from 'ui'\n\nconst users = [\n  { id: 1, name: 'Barbara Kirlin Sr.', image_url: 'https://i.pravatar.cc/150?img=1' }\n  //...\n]\nexport default function ComboBoxInvalidDemo() {\n  return (\n    <ComboBox placeholder=\"Select a user\" label=\"Users\" isRequired items={users}>\n      {(item) => (\n        <ComboBoxItem key={item.id} id={item.id} textValue={item.name}>\n          <Avatar src={item.image_url} />\n          {item.name}\n        </ComboBoxItem>\n      )}\n    </ComboBox>\n  )\n}\n",
    "type": "docs"
  },
  "pickers/combo-box-disabled-demo": {
    "component": "@/components/docs/pickers/combo-box-disabled-demo",
    "raw": "'use client'\n\nimport { Avatar, ComboBox, ComboBoxItem } from 'ui'\n\nconst users = [\n  { id: 1, name: 'Barbara Kirlin Sr.', image_url: 'https://i.pravatar.cc/150?img=1' }\n  //...\n]\nexport default function ComboBoxDisabledDemo() {\n  return (\n    <ComboBox placeholder=\"Select a user\" label=\"Users\" isRequired items={users}>\n      {(item) => (\n        <ComboBoxItem key={item.id} id={item.id} textValue={item.name}>\n          <Avatar src={item.image_url} />\n          {item.name}\n        </ComboBoxItem>\n      )}\n    </ComboBox>\n  )\n}\n",
    "type": "docs"
  },
  "statuses/table-of-badges": {
    "component": "@/components/docs/statuses/table-of-badges",
    "raw": "'use client'\n\nimport { Badge, badgeIntents, Table, TableBody, TableCell, TableColumn, TableHeader, TableRow } from 'ui'\n\nexport default function TableOfBadges() {\n  const colors = Object.keys(badgeIntents).map((i) => {\n    return {\n      color: i\n    }\n  })\n  return (\n    <div className=\"not-prose rounded-xl border\">\n      <Table aria-label=\"Available Badge Colors\">\n        <TableHeader>\n          <TableColumn id=\"props\">Props</TableColumn>\n          <TableColumn id=\"name\">Name</TableColumn>\n          <TableColumn />\n        </TableHeader>\n        <TableBody items={colors}>\n          {(item) => (\n            <TableRow id={item.color}>\n              <TableCell>\n                <code>color</code>\n              </TableCell>\n              <TableCell>\n                <code>{item.color}</code>\n              </TableCell>\n              <TableCell>\n                <Badge intent={item.color as any}>Label</Badge>\n              </TableCell>\n            </TableRow>\n          )}\n        </TableBody>\n      </Table>\n    </div>\n  )\n}\n",
    "type": "docs"
  },
  "statuses/badge-demo": {
    "component": "@/components/docs/statuses/badge-demo",
    "raw": "'use client'\n\nimport { Badge } from 'ui'\n\nexport default function BadgeDemo() {\n  return <Badge>Label</Badge>\n}\n",
    "type": "docs"
  },
  "statuses/progress-bar-demo": {
    "component": "@/components/docs/statuses/progress-bar-demo",
    "raw": "'use client'\n\nimport React from 'react'\nimport { ProgressBar } from 'ui'\n\nexport default function ProgressBarDemo() {\n  const [value, setValue] = React.useState(1)\n\n  React.useEffect(() => {\n    const interval = setInterval(() => {\n      setValue((prev) => (prev < 100 ? prev + 1 : 100))\n    }, 50)\n\n    return () => clearInterval(interval)\n  }, [])\n\n  return <ProgressBar label=\"Loading…\" value={60} />\n}\n",
    "type": "docs"
  },
  "statuses/indeterminate-progress-bar-demo": {
    "component": "@/components/docs/statuses/indeterminate-progress-bar-demo",
    "raw": "'use client'\n\nimport React from 'react'\nimport { ProgressBar } from 'ui'\n\nexport default function ProgressBarDemo() {\n  const [value, setValue] = React.useState(1)\n\n  React.useEffect(() => {\n    const interval = setInterval(() => {\n      setValue((prev) => (prev < 100 ? prev + 1 : 100))\n    }, 50)\n\n    return () => clearInterval(interval)\n  }, [])\n\n  return <ProgressBar label=\"Loading…\" isIndeterminate value={60} />\n}\n",
    "type": "docs"
  },
  "statuses/badge-shape-demo": {
    "component": "@/components/docs/statuses/badge-shape-demo",
    "raw": "'use client'\n\nimport { Badge } from 'ui'\n\nexport default function BadgeShapeDemo() {\n  return <Badge shape=\"circle\">Label</Badge>\n}\n",
    "type": "docs"
  },
  "statuses/note-demo": {
    "component": "@/components/docs/statuses/note-demo",
    "raw": "'use client'\n\nimport { OptionPreview } from '@/components/docs/docs-c/option-preview'\nimport React from 'react'\nimport { Note, NoteDescription, NoteTitle, Select, SelectItem } from 'ui'\n\nconst notes = ['info', 'primary', 'secondary', 'warning', 'danger', 'success'].map((n) => ({\n  name: n\n}))\nexport default function NoteDemo() {\n  const [selected, setSelected] = React.useState<any>('secondary')\n  return (\n    <>\n      <OptionPreview>\n        <Select\n          className=\"[&_button]:h-9\"\n          selectedKey={selected}\n          onSelectionChange={setSelected}\n          placeholder=\"Choose an intent\"\n          items={notes}\n        >\n          {(item) => (\n            <SelectItem id={item.name} textValue={item.name}>\n              {item.name}\n            </SelectItem>\n          )}\n        </Select>\n      </OptionPreview>\n      <Note intent={selected as any}>\n        <NoteTitle>Note Title</NoteTitle>\n        <NoteDescription>Note Description</NoteDescription>\n      </Note>\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "statuses/meter-demo": {
    "component": "@/components/docs/statuses/meter-demo",
    "raw": "'use client'\n\nimport React from 'react'\nimport { Meter } from 'ui'\n\nexport default function MeterDemo() {\n  const [value, setValue] = React.useState(1)\n\n  React.useEffect(() => {\n    const interval = setInterval(() => {\n      setValue((prev) => (prev < 100 ? prev + 1 : 100))\n    }, 50)\n\n    return () => clearInterval(interval)\n  }, [])\n  return <Meter label=\"Storage space\" value={value} />\n}\n",
    "type": "docs"
  },
  "collections/single-menu-demo": {
    "component": "@/components/docs/collections/single-menu-demo",
    "raw": "'use client'\n\nimport { Placement } from '@react-types/overlays'\nimport { Selection } from '@react-types/shared'\nimport React from 'react'\nimport { Button, Menu, MenuContent, MenuRadioItem } from 'ui'\n\nexport const placements = [\n  'bottom',\n  'bottom left',\n  'bottom right',\n  'bottom start',\n  'bottom end',\n  'top',\n  'top left',\n  'top right',\n  'top start',\n  'top end',\n  'left',\n  'left top',\n  'left bottom',\n  'start',\n  'start top',\n  'start bottom',\n  'right',\n  'right top',\n  'right bottom',\n  'end',\n  'end top',\n  'end bottom'\n].map((item, i) => ({ id: i, name: item }))\n\nexport default function SingleMenuDemo() {\n  let [selected, setSelected] = React.useState<Selection>(new Set(['bottom']))\n  return (\n    <Menu>\n      <Button appearance=\"outline\">Placement</Button>\n      <MenuContent\n        placement={Array.from(selected)[0] as Placement}\n        selectionMode=\"single\"\n        selectedKeys={selected}\n        onSelectionChange={setSelected}\n        items={placements}\n        className=\"max-h-72 min-w-52\"\n      >\n        {(item) => <MenuRadioItem id={item.name}>{item.name}</MenuRadioItem>}\n      </MenuContent>\n    </Menu>\n  )\n}\n",
    "type": "docs"
  },
  "collections/multiple-menu-demo": {
    "component": "@/components/docs/collections/multiple-menu-demo",
    "raw": "'use client'\n\nimport { Selection } from '@react-types/shared'\nimport React from 'react'\nimport { Button, Menu, MenuCheckboxItem, MenuContent, MenuHeader, MenuSection } from 'ui'\n\nexport default function MultipleMenuDemo() {\n  const [selected, setSelected] = React.useState<Selection>(new Set(['status']))\n  return (\n    <Menu>\n      <Button appearance=\"outline\">Open</Button>\n      <MenuContent\n        placement=\"bottom\"\n        selectionMode=\"single\"\n        selectedKeys={selected}\n        onSelectionChange={setSelected}\n        className=\"w-56\"\n        disabledKeys={['activity']}\n      >\n        <MenuSection>\n          <MenuHeader separator>Appearance</MenuHeader>\n          <MenuCheckboxItem id=\"status\">Status Bar</MenuCheckboxItem>\n          <MenuCheckboxItem id=\"activity\">Activity Bar</MenuCheckboxItem>\n          <MenuCheckboxItem id=\"panel\">Panel</MenuCheckboxItem>\n        </MenuSection>\n      </MenuContent>\n    </Menu>\n  )\n}\n",
    "type": "docs"
  },
  "collections/list-box-demo": {
    "component": "@/components/docs/collections/list-box-demo",
    "raw": "'use client'\n\nimport { ListBox, ListBoxItem } from 'ui'\n\nconst rockPopBands = [\n  { id: '1', name: 'Nirvana' },\n  { id: '2', name: 'Radiohead' },\n  { id: '3', name: 'Foo Fighters' },\n  { id: '4', name: 'Arctic Monkeys' },\n  { id: '5', name: 'The Strokes' }\n]\n\nexport default function ListBoxDemo() {\n  return (\n    <ListBox items={rockPopBands} aria-label=\"Bands\" selectionMode=\"multiple\">\n      {(item) => <ListBoxItem key={item.id}>{item.name}</ListBoxItem>}\n    </ListBox>\n  )\n}\n",
    "type": "docs"
  },
  "collections/table-demo": {
    "component": "@/components/docs/collections/table-demo",
    "raw": "'use client'\n\nimport { Card, Table, TableBody, TableCell, TableColumn, TableHeader, TableRow } from 'ui'\n\nconst bands = [\n  { id: '1', name: 'Nirvana', genre: 'Grunge', latestAlbum: 'In Utero' },\n  { id: '2', name: 'Radiohead', genre: 'Alternative Rock', latestAlbum: 'A Moon Shaped Pool' },\n  { id: '3', name: 'Foo Fighters', genre: 'Rock', latestAlbum: 'Medicine at Midnight' },\n  { id: '4', name: 'Arctic Monkeys', genre: 'Indie Rock', latestAlbum: 'Tranquility Base Hotel & Casino' },\n  { id: '5', name: 'The Strokes', genre: 'Indie Rock', latestAlbum: 'The New Abnormal' },\n  { id: '6', name: 'Red Hot Chili Peppers', genre: 'Funk Rock', latestAlbum: 'Unlimited Love' },\n  { id: '7', name: 'Green Day', genre: 'Punk Rock', latestAlbum: 'Father of All...' }\n]\n\nexport default function TableDemo() {\n  return (\n    <Card>\n      <Table aria-label=\"Bands\" selectionMode=\"multiple\">\n        <TableHeader>\n          <TableColumn>#</TableColumn>\n          <TableColumn>Name</TableColumn>\n          <TableColumn>Genre</TableColumn>\n          <TableColumn>Latest Album</TableColumn>\n        </TableHeader>\n        <TableBody items={bands}>\n          {(item) => (\n            <TableRow key={item.id}>\n              <TableCell>{item.id}</TableCell>\n              <TableCell>{item.name}</TableCell>\n              <TableCell>{item.genre}</TableCell>\n              <TableCell>{item.latestAlbum}</TableCell>\n            </TableRow>\n          )}\n        </TableBody>\n      </Table>\n    </Card>\n  )\n}\n",
    "type": "docs"
  },
  "collections/tag-group-demo": {
    "component": "@/components/docs/collections/tag-group-demo",
    "raw": "'use client'\n\nimport { Tag, TagGroup } from 'ui'\n\nconst androidBrands = [\n  { id: '1', name: 'Samsung', available: false },\n  { id: '2', name: 'OnePlus', available: true },\n  { id: '3', name: 'Google', available: true },\n  { id: '4', name: 'Xiaomi', available: false }\n]\n\nexport default function TagGroupDemo() {\n  return (\n    <TagGroup label=\"Android Brands\" selectionMode=\"multiple\" items={androidBrands}>\n      {(item) => <Tag isDisabled={!item.available}>{item.name}</Tag>}\n    </TagGroup>\n  )\n}\n",
    "type": "docs"
  },
  "collections/menu-with-icon-demo": {
    "component": "@/components/docs/collections/menu-with-icon-demo",
    "raw": "'use client'\n\nimport { OptionPreview } from '@/components/docs/docs-c/option-preview'\nimport {\n  IconBrandBluesky,\n  IconBrandTelegram,\n  IconBrandTwitter,\n  IconChevronsY,\n  IconHashtag,\n  IconHeadphones,\n  IconLogout,\n  IconMail,\n  IconMessage,\n  IconPersonAdd,\n  IconPlus,\n  IconSettings\n} from '@irsyadadl/paranoid'\nimport { Placement } from '@react-types/overlays'\nimport React, { useState } from 'react'\nimport {\n  Avatar,\n  Menu,\n  MenuContent,\n  MenuHeader,\n  MenuItem,\n  MenuKeyboard,\n  MenuSection,\n  MenuSeparator,\n  MenuTrigger,\n  Select,\n  SelectItem,\n  SubmenuTrigger,\n  Switch\n} from 'ui'\nimport { placements } from './single-menu-demo'\n\nexport default function MenuWithIconDemo() {\n  const [showArrow, setShowArrow] = useState(false)\n  let [selected, setSelected] = React.useState<Placement>('bottom')\n  return (\n    <>\n      <OptionPreview className=\"space-y-2\">\n        <Switch isSelected={showArrow} onChange={() => setShowArrow(!showArrow)}>\n          Show arrow\n        </Switch>\n        <Select\n          className=\"[&>.btr]:h-8\"\n          selectedKey={selected}\n          onSelectionChange={(v) => setSelected(v as Placement)}\n          items={placements}\n        >\n          {(item) => <SelectItem id={item.name}>{item.name}</SelectItem>}\n        </Select>\n      </OptionPreview>\n      <Menu>\n        <MenuTrigger>\n          <Avatar className=\"size-10\" src=\"https://github.com/irsyadadl.png\" />\n        </MenuTrigger>\n        <MenuContent showArrow={showArrow} placement={selected} className=\"min-w-64\">\n          <MenuSection>\n            <MenuHeader separator>\n              <span className=\"block\">Irsyad A. Panjaitan</span>\n              <span className=\"font-normal text-muted-fg\">@irsyadadl</span>\n            </MenuHeader>\n          </MenuSection>\n          <MenuItem onAction={() => setShowArrow(!showArrow)}>\n            <IconChevronsY />\n            {showArrow ? 'Hide' : 'Show'} Arrow\n          </MenuItem>\n          <MenuItem>\n            <IconSettings />\n            Settings\n          </MenuItem>\n          <MenuItem href=\"#\">\n            <IconPlus />\n            Create Team\n          </MenuItem>\n          <MenuItem href=\"#\">\n            <IconHashtag />\n            Command Menu\n            <MenuKeyboard keys=\"⌘K\" />\n          </MenuItem>\n          <SubmenuTrigger>\n            <MenuItem>\n              <IconPersonAdd />\n              <span>Invite users</span>\n            </MenuItem>\n            <MenuContent offset={8}>\n              <MenuItem>\n                <IconMail />\n                <span>Email</span>\n              </MenuItem>\n              <MenuItem>\n                <IconMessage />\n                <span>Message</span>\n              </MenuItem>\n              <MenuSeparator />\n              <SubmenuTrigger>\n                <MenuItem>\n                  <IconPersonAdd />\n                  <span>Others</span>\n                </MenuItem>\n                <MenuContent offset={8}>\n                  <MenuItem>\n                    <IconBrandTelegram />\n                    <span>Telegram</span>\n                  </MenuItem>\n                  <MenuItem>\n                    <IconBrandBluesky />\n                    <span>Bluesky</span>\n                  </MenuItem>\n                  <MenuItem>\n                    <IconBrandTwitter />\n                    <span>Twitter</span>\n                  </MenuItem>\n                </MenuContent>\n              </SubmenuTrigger>\n            </MenuContent>\n          </SubmenuTrigger>\n          <MenuSeparator />\n          <MenuItem href=\"#\">\n            <IconHeadphones />\n            Contact Support\n          </MenuItem>\n          <MenuSeparator />\n          <MenuItem>\n            <IconLogout />\n            Log out\n          </MenuItem>\n        </MenuContent>\n      </Menu>\n    </>\n  )\n}\n",
    "type": "docs"
  },
  "collections/list-box-rearrange-demo": {
    "component": "@/components/docs/collections/list-box-rearrange-demo",
    "raw": "'use client'\n\nimport { useDragAndDrop } from 'react-aria-components'\nimport { useListData } from 'react-stately'\nimport { ListBox, ListBoxItem } from 'ui'\n\nexport default function ListBoxRearrangeDemo() {\n  let list = useListData({\n    initialItems: [\n      { id: '1', name: 'Nirvana' },\n      { id: '2', name: 'Radiohead' },\n      { id: '3', name: 'Foo Fighters' },\n      { id: '4', name: 'Arctic Monkeys' },\n      { id: '5', name: 'The Strokes' }\n    ]\n  })\n  let { dragAndDropHooks } = useDragAndDrop({\n    getItems: (keys) => [...keys].map((key) => ({ 'text/plain': list.getItem(key).name })),\n    onReorder(e) {\n      if (e.target.dropPosition === 'before') {\n        list.moveBefore(e.target.key, e.keys)\n      } else if (e.target.dropPosition === 'after') {\n        list.moveAfter(e.target.key, e.keys)\n      }\n    }\n  })\n  return (\n    <ListBox items={list.items} aria-label=\"Bands\" selectionMode=\"multiple\" dragAndDropHooks={dragAndDropHooks}>\n      {(item) => <ListBoxItem key={item.id}>{item.name}</ListBoxItem>}\n    </ListBox>\n  )\n}\n",
    "type": "docs"
  },
  "collections/command-basic-demo": {
    "component": "@/components/docs/collections/command-basic-demo",
    "raw": "'use client'\n\nimport React, { useState } from 'react'\n\nexport default function CommandBasicDemo() {\n  const [open, setOpen] = useState(false)\n  React.useEffect(() => {\n    const down = (e: KeyboardEvent) => {\n      if (e.key === 'e') {\n        e.preventDefault()\n        setOpen((open: boolean) => !open)\n      }\n    }\n\n    document.addEventListener('keydown', down)\n\n    return () => document.removeEventListener('keydown', down)\n  }, [])\n  return <>{/*  */}</>\n}\n",
    "type": "docs"
  },
  "collections/tag-group-with-remove-demo": {
    "component": "@/components/docs/collections/tag-group-with-remove-demo",
    "raw": "'use client'\n\nimport { useListData } from 'react-stately'\nimport { Tag, TagGroup } from 'ui'\n\nexport default function TagGroupWithRemoveDemo() {\n  let list = useListData({\n    initialItems: [\n      { id: '1', name: 'Samsung', available: false },\n      { id: '2', name: 'OnePlus', available: true },\n      { id: '3', name: 'Google', available: true },\n      { id: '4', name: 'Xiaomi', available: false }\n    ]\n  })\n\n  return (\n    <TagGroup\n      label=\"Android Brands\"\n      selectionMode=\"multiple\"\n      items={list.items}\n      onRemove={(keys) => list.remove(...keys)}\n    >\n      {(item) => <Tag>{item.name}</Tag>}\n    </TagGroup>\n  )\n}\n",
    "type": "docs"
  },
  "collections/menu-basic-demo": {
    "component": "@/components/docs/collections/menu-basic-demo",
    "raw": "'use client'\n\nimport { Menu, MenuContent, MenuItem, MenuTrigger } from 'ui'\n\nexport default function MenuBasicDemo() {\n  return (\n    <Menu>\n      <MenuTrigger>Open</MenuTrigger>\n      <MenuContent placement=\"bottom\">\n        <MenuItem>Inbox</MenuItem>\n        <MenuItem>Sent</MenuItem>\n        <MenuItem>New Message</MenuItem>\n        <MenuItem isDanger>Spam</MenuItem>\n        <MenuItem isDisabled>Dang</MenuItem>\n      </MenuContent>\n    </Menu>\n  )\n}\n",
    "type": "docs"
  },
  "collections/grid-list-demo": {
    "component": "@/components/docs/collections/grid-list-demo",
    "raw": "'use client'\n\nimport { GridList, GridListItem } from 'ui'\n\nconst items = [\n  { id: '1', name: 'The Beatles' },\n  { id: '2', name: 'Led Zeppelin' },\n  { id: '3', name: 'Pink Floyd' },\n  { id: '4', name: 'Queen' },\n  { id: '5', name: 'The Rolling Stones' }\n]\nexport default function GridListDemo() {\n  return (\n    <GridList items={items} aria-label=\"you make it\" selectionMode=\"multiple\" className=\"min-w-64\">\n      {(item) => <GridListItem id={item.id}>{item.name}</GridListItem>}\n    </GridList>\n  )\n}\n",
    "type": "docs"
  },
  "note": {
    "component": "@/components/ui/note",
    "raw": "'use client'\n\nimport { IconCircleInfoFill, IconTriangleInfoFill } from '@irsyadadl/paranoid'\nimport * as React from 'react'\nimport { Heading, type HeadingProps, Text, type TextProps } from 'react-aria-components'\nimport { tv, type VariantProps } from 'tailwind-variants'\nimport { cn } from './primitive'\n\nconst noteStyles = tv({\n  base: [\n    'relative rounded-lg ring-1 dark:ring-inset ring-border p-4 [&_a]:font-medium [&_a:hover]:underline',\n    '[&_svg]:absolute [&_svg]:right-4 [&_svg]:top-4 [&_svg]:size-6'\n  ],\n  variants: {\n    intent: {\n      primary: [\n        'ring-primary-500/20 [&_a]:text-primary-600 text-primary-900 bg-primary-50/50 [&_svg]:text-primary-600 leading-4',\n        'dark:bg-primary-500/5 dark:text-primary-200 dark:[&_a]:text-primary-50 dark:[&_svg]:text-primary-400'\n      ],\n      secondary: [\n        'ring-zinc-500/20 [&_a]:text-zinc-600 text-zinc-900 bg-zinc-50/50 [&_svg]:text-zinc-500 leading-4',\n        'dark:bg-zinc-500/5 dark:text-zinc-200 dark:[&_a]:text-zinc-50 dark:[&_svg]:text-zinc-50'\n      ],\n      info: [\n        'ring-lime-500/20 [&_a]:text-lime-600 text-lime-900 bg-lime-50/50 [&_svg]:text-lime-500 leading-4',\n        'dark:bg-lime-500/5 dark:text-lime-200 dark:[&_a]:text-lime-50 dark:[&_svg]:text-lime-400'\n      ],\n      warning: [\n        'ring-amber-500/20 [&_a]:text-amber-600 text-amber-900 bg-amber-50/50 [&_svg]:text-amber-500 leading-4',\n        'dark:bg-amber-500/5 dark:text-amber-200 dark:[&_a]:text-amber-50 dark:[&_svg]:text-amber-400'\n      ],\n      danger: [\n        'ring-red-500/20 [&_a]:text-red-600 text-red-900 bg-red-50/50 [&_svg]:text-red-500 leading-4',\n        'dark:bg-red-500/5 dark:text-red-200 dark:[&_a]:text-red-50 dark:[&_svg]:text-red-400'\n      ],\n      success: [\n        'ring-emerald-500/20 [&_a]:text-emerald-600 text-emerald-900 bg-emerald-50/50 [&_svg]:text-emerald-600 leading-4',\n        'dark:bg-emerald-500/5 dark:text-emerald-200 dark:[&_a]:text-emerald-50 dark:[&_svg]:text-emerald-400'\n      ]\n    }\n  },\n  defaultVariants: {\n    intent: 'secondary'\n  }\n})\n\ninterface NoteProps extends React.HtmlHTMLAttributes<HTMLDivElement>, VariantProps<typeof noteStyles> {}\n\nconst Note = ({ intent = 'primary', className, ...props }: NoteProps) => {\n  return (\n    <div className={noteStyles({ intent, className })} {...props}>\n      {['info', 'primary', 'secondary'].includes(intent) ? <IconCircleInfoFill /> : <IconTriangleInfoFill />}\n      {props.children}\n    </div>\n  )\n}\n\nconst NoteTitle = ({ className, ...props }: HeadingProps) => {\n  return <Heading className={cn('mb-1 pr-2 sm:text-base font-medium', className)} level={3} {...props} />\n}\n\nconst NoteDescription = ({ className, ...props }: TextProps) => {\n  return <Text slot=\"description\" {...props} className={cn('text-sm nd', className)} />\n}\n\nexport { Note, NoteDescription, NoteTitle }\n",
    "type": "ui"
  },
  "list-box": {
    "component": "@/components/ui/list-box",
    "raw": "'use client'\n\nimport { IconHamburger } from '@irsyadadl/paranoid'\nimport {\n  ListBoxItem as ListBoxItemPrimitive,\n  ListBox as ListBoxPrimitive,\n  type ListBoxItemProps,\n  type ListBoxProps\n} from 'react-aria-components'\n\nimport { tv } from 'tailwind-variants'\nimport { DropdownSection } from './dropdown'\nimport { cn } from './primitive'\n\nconst listBox = tv({\n  slots: {\n    root: 'border-surface-2 flex max-h-96 w-full min-w-72 flex-col overflow-auto overflow-y-auto rounded-xl border p-1 shadow-xl outline-none',\n    item: [\n      'my-0.5 cursor-pointer rounded-md p-2 text-base outline-none transition lg:text-sm',\n      'hover:bg-secondary', // hover\n      'focus:bg-secondary', // focus\n      'dragging:cursor-grab dragging:bg-secondary', // dragging\n      'selected:bg-primary selected:text-primary-fg' // selected\n    ]\n  }\n})\n\nconst { root, item } = listBox()\n\nconst ListBox = <T extends object>({ children, className, ...props }: ListBoxProps<T> & { className?: string }) => (\n  <ListBoxPrimitive {...props} className={root({ className: className })}>\n    {children}\n  </ListBoxPrimitive>\n)\n\nconst ListBoxItem = <T extends object>({\n  children,\n  className,\n  ...props\n}: ListBoxItemProps<T> & {\n  className?: string\n}) => {\n  const textValue = typeof children === 'string' ? children : undefined\n\n  return (\n    <ListBoxItemPrimitive textValue={textValue} {...props} className={item({ className })}>\n      {(values) => (\n        <div className=\"flex items-center gap-2\">\n          <>\n            {values.allowsDragging && (\n              <IconHamburger\n                className={cn(\n                  'size-4 shrink-0 text-muted-fg transition',\n                  values.isFocused && 'text-fg',\n                  values.isDragging && 'text-fg',\n                  values.isSelected && 'text-primary-fg/70'\n                )}\n              />\n            )}\n            <div className=\"flex flex-col\">\n              {typeof children === 'function' ? children(values) : children}\n              {/*{children}*/}\n            </div>\n          </>\n        </div>\n      )}\n    </ListBoxItemPrimitive>\n  )\n}\n\nconst ListBoxSection = DropdownSection\n\ninterface ListBoxPickerProps<T> extends ListBoxProps<T> {}\n\nconst ListBoxPicker = <T extends object>({ className, ...props }: ListBoxPickerProps<T>) => {\n  return (\n    <ListBoxPrimitive\n      className={cn('max-h-72 overflow-auto p-1 outline-none [clip-path:inset(0_0_0_0_round_.75rem)]', className)}\n      {...props}\n    />\n  )\n}\n\nexport { ListBox, listBox, ListBoxItem, ListBoxPicker, ListBoxSection }\n",
    "type": "ui"
  },
  "pagination": {
    "component": "@/components/ui/pagination",
    "raw": "'use client'\n\nimport {\n  IconChevronLgLeft,\n  IconChevronLgRight,\n  IconChevronsLgLeft,\n  IconChevronsLgRight,\n  IconDotsHorizontal\n} from '@irsyadadl/paranoid'\nimport Link from 'next/link'\nimport * as React from 'react'\nimport { LabelProps } from 'react-aria-components'\nimport { ButtonProps, buttonStyles } from './button'\nimport { Label } from './field'\nimport { cn } from './primitive'\nimport { Separator } from './separator'\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<'nav'>) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn('mx-auto flex w-full justify-center', className)}\n    {...props}\n  />\n)\nPagination.displayName = 'Pagination'\n\nconst PaginationContent = React.forwardRef<HTMLUListElement, React.ComponentProps<'ul'>>(\n  ({ className, ...props }, ref) => (\n    <ul ref={ref} className={cn('flex flex-row items-center gap-1', className)} {...props} />\n  )\n)\nPaginationContent.displayName = 'PaginationContent'\n\nconst PaginationItem = React.forwardRef<HTMLLIElement, React.ComponentProps<'li'>>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(className)} {...props} />\n))\nPaginationItem.displayName = 'PaginationItem'\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, 'size'> &\n  Omit<React.ComponentProps<typeof Link>, 'size'>\n\nconst PaginationLink = ({ className, isActive, size = 'square-petite', ...props }: PaginationLinkProps) => (\n  <Link\n    scroll={false}\n    aria-current={isActive ? 'page' : undefined}\n    className={cn(\n      buttonStyles({\n        appearance: isActive ? 'solid' : 'outline',\n        size,\n        className: 'rounded-lg'\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = 'PaginationLink'\n\nconst PaginationPrevious = ({ className, ...props }: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink aria-label=\"Go to previous page\" size=\"square-petite\" className={cn('gap-1', className)} {...props}>\n    <IconChevronLgLeft />\n\n    <span className=\"sr-only\">Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = 'PaginationPrevious'\n\nconst PaginationNext = ({ className, ...props }: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink aria-label=\"Go to next page\" size=\"square-petite\" className={cn('gap-1', className)} {...props}>\n    <span className=\"sr-only\">Next</span>\n    <IconChevronLgRight />\n  </PaginationLink>\n)\nPaginationNext.displayName = 'PaginationNext'\n\nconst PaginationLast = ({ className, ...props }: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink aria-label=\"Go to next page\" size=\"square-petite\" className={cn('gap-1', className)} {...props}>\n    <span className=\"sr-only\">Last</span>\n    <IconChevronsLgRight />\n  </PaginationLink>\n)\nPaginationLast.displayName = 'PaginationLast'\n\nconst PaginationFirst = ({ className, ...props }: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink aria-label=\"Go to previous page\" size=\"square-petite\" className={cn('gap-1', className)} {...props}>\n    <IconChevronsLgLeft />\n\n    <span className=\"sr-only\">First</span>\n  </PaginationLink>\n)\nPaginationFirst.displayName = 'PaginationFirst'\n\nconst PaginationEllipsis = ({ className, ...props }: React.ComponentProps<'span'>) => (\n  <span aria-hidden className={cn('flex size-9 items-center justify-center', className)} {...props}>\n    <IconDotsHorizontal className=\"size-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = 'PaginationEllipsis'\n\nconst PaginationLabel = ({ className, ...props }: LabelProps) => (\n  <Label aria-hidden className={cn('grid h-9 place-content-center px-3 text-sm font-normal', className)} {...props} />\n)\nPaginationLabel.displayName = 'PaginationLabel'\n\nconst PaginationSeparator = ({ className, ...props }: React.ComponentProps<'span'>) => (\n  <Separator aria-hidden className={cn('mx-1 h-5 w-px rotate-[14deg] self-center', className)} {...props}></Separator>\n)\nPaginationSeparator.displayName = 'PaginationSeparator'\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationFirst,\n  PaginationItem,\n  PaginationLabel,\n  PaginationLast,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n  PaginationSeparator\n}\n",
    "type": "ui"
  },
  "link": {
    "component": "@/components/ui/link",
    "raw": "'use client'\n\nimport { composeRenderProps, Link as LinkPrimitive, type LinkProps as LinkPrimitiveProps } from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\ninterface LinkProps extends LinkPrimitiveProps {\n  intent?: 'primary' | 'secondary'\n}\n\nconst styles = tv({\n  base: 'rounded transition focus:outline-none disabled:cursor-default disabled:no-underline forced-colors:disabled:text-[GrayText]',\n  variants: {\n    intent: {\n      unstyled: 'text-fg',\n      primary: 'text-primary hover:text-primary-500 dark:text-primary-500 dark:hover:text-primary-400',\n      secondary:\n        'text-zinc-700 underline decoration-zinc-700/50 hover:decoration-zinc-700 dark:text-zinc-300 dark:decoration-zinc-300/70 dark:hover:decoration-zinc-300'\n    }\n  },\n  defaultVariants: {\n    intent: 'unstyled'\n  }\n})\n\nfunction Link(props: LinkProps) {\n  return (\n    <LinkPrimitive\n      {...props}\n      className={composeRenderProps(props.className, (className, renderProps) =>\n        styles({\n          ...renderProps,\n          className,\n          intent: props.href ? props.intent : 'secondary'\n        })\n      )}\n    />\n  )\n}\n\nexport { Link, LinkPrimitive }\nexport type { LinkPrimitiveProps, LinkProps }\n",
    "type": "ui"
  },
  "tabs": {
    "component": "@/components/ui/tabs",
    "raw": "'use client'\n\nimport { LayoutGroup, motion } from 'framer-motion'\nimport { useId } from 'react'\nimport {\n  composeRenderProps,\n  TabList as TabListPrimitive,\n  type TabListProps,\n  TabPanel as TabPanelPrimitive,\n  type TabPanelProps,\n  Tab as TabPrimitive,\n  type TabProps,\n  Tabs as TabsPrimitive,\n  type TabsProps\n} from 'react-aria-components'\nimport { twJoin } from 'tailwind-merge'\nimport { tv } from 'tailwind-variants'\nimport { cn } from './primitive'\n\nconst tabsStyles = tv({\n  base: 'group flex gap-4',\n  variants: {\n    orientation: {\n      horizontal: 'flex-col',\n      vertical: 'w-[800px] flex-row'\n    }\n  }\n})\n\nfunction Tabs(props: TabsProps) {\n  return (\n    <TabsPrimitive\n      {...props}\n      className={composeRenderProps(props.className, (className, renderProps) =>\n        tabsStyles({\n          ...renderProps,\n          className\n        })\n      )}\n    />\n  )\n}\n\nconst tabListStyles = tv({\n  base: 'flex',\n  variants: {\n    orientation: {\n      horizontal: 'flex-row gap-x-5 border-b',\n      vertical: 'flex-col items-start gap-y-4 border-l'\n    }\n  }\n})\n\nfunction TabList<T extends object>(props: TabListProps<T>) {\n  const id = useId()\n  return (\n    <LayoutGroup id={id}>\n      <TabListPrimitive\n        {...props}\n        className={composeRenderProps(props.className, (className, renderProps) =>\n          tabListStyles({ ...renderProps, className })\n        )}\n      />\n    </LayoutGroup>\n  )\n}\n\nconst tabProps = tv({\n  base: [\n    'relative flex cursor-default items-center rounded-full text-sm font-medium outline-none transition forced-color-adjust-none hover:text-fg',\n    // hor\n    'group-orientation-vertical:w-full group-orientation-vertical:py-0',\n    // ver\n    'group-orientation-horizontal:pb-3 group-orientation-vertical:pl-4 group-orientation-vertical:pr-2'\n  ],\n  variants: {\n    isSelected: {\n      false: 'text-muted-fg',\n      true: 'text-fg forced-colors:bg-[Highlight] forced-colors:text-[HighlightText]'\n    },\n    isFocused: { false: 'ring-0', true: 'text-fg' },\n    isDisabled: {\n      true: 'text-muted-fg/50 forced-colors:text-[GrayText] forced-colors:selected:bg-[GrayText] forced-colors:selected:text-[HighlightText]'\n    }\n  }\n})\n\nfunction Tab({ children, ...props }: TabProps) {\n  return (\n    <TabPrimitive\n      {...props}\n      className={composeRenderProps(props.className, (_className, renderProps) =>\n        tabProps({\n          ...renderProps,\n          className: twJoin('href' in props && 'cursor-pointer', _className)\n        })\n      )}\n    >\n      {({ isSelected }) => (\n        <>\n          {children}\n          {isSelected && (\n            <motion.span\n              className={cn(\n                'absolute rounded bg-fg',\n                // horizontal\n                'group-orientation-horizontal:inset-x-0 group-orientation-horizontal:-bottom-px group-orientation-horizontal:h-0.5 group-orientation-horizontal:w-full',\n                // vertical\n                'group-orientation-vertical:left-0 group-orientation-vertical:h-[calc(100%-10%)] group-orientation-vertical:w-0.5 group-orientation-vertical:transform'\n              )}\n              layoutId=\"current-selected\"\n              transition={{ type: 'spring', stiffness: 500, damping: 30 }}\n            />\n          )}\n        </>\n      )}\n    </TabPrimitive>\n  )\n}\n\nconst tabPanelStyles = tv({\n  base: 'flex-1 text-sm text-fg'\n})\n\nfunction TabPanel(props: TabPanelProps) {\n  return (\n    <TabPanelPrimitive\n      {...props}\n      className={composeRenderProps(props.className, (className, renderProps) =>\n        tabPanelStyles({ ...renderProps, className })\n      )}\n    />\n  )\n}\n\nexport { Tab, TabList, TabPanel, Tabs }\n",
    "type": "ui"
  },
  "card": {
    "component": "@/components/ui/card",
    "raw": "'use client'\nimport * as React from 'react'\nimport { Heading, HeadingProps, TextProps } from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\nimport { Description } from './field'\n\nconst card = tv({\n  slots: {\n    root: 'rounded-lg xkd2 border bg-card text-fg shadow-sm [&:has(.larhy3):not(:has(.yahnba))>.ccvgs8x]:pt-6 [&:has(.larhy3)]:overflow-hidden [&_table]:overflow-hidden',\n    header: 'flex flex-col space-y-1.5 px-6 py-5',\n    title: 'text-xl font-semibold leading-none tracking-tight',\n    description: 'text-base text-muted-fg sm:text-sm',\n    content:\n      'yahnba px-6 pb-6 has-[.t-hea]:bg-secondary/40 has-[table]:p-0 [&:has(table)+.ccvgs8x]:py-5 [&:has(table)]:border-t [&_.t-cel]:px-6 [&_.t-col]:px-6',\n    footer: 'ccvgs8x flex items-center p-6 pt-0'\n  }\n})\n\nconst { root, header, title, description, content, footer } = card()\n\nconst Card = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(({ className, ...props }, ref) => (\n  <div ref={ref} className={root({ className })} {...props} />\n))\nCard.displayName = 'Card'\n\nconst CardHeader = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(\n  ({ className, ...props }, ref) => <div ref={ref} className={header({ className })} {...props} />\n)\nCardHeader.displayName = 'CardHeader'\n\nfunction CardTitle(props: HeadingProps) {\n  return <Heading className={title({ className: props.className })} {...props} />\n}\n\nfunction CardDescription(props: TextProps) {\n  return <Description className={description({ className: props.className })} {...props} />\n}\n\nconst CardContent = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(\n  ({ className, ...props }, ref) => <div ref={ref} className={content({ className })} {...props} />\n)\nCardContent.displayName = 'CardContent'\n\nconst CardFooter = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(\n  ({ className, ...props }, ref) => <div ref={ref} className={footer({ className })} {...props} />\n)\nCardFooter.displayName = 'CardFooter'\n\nexport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle }\n",
    "type": "ui"
  },
  "slider": {
    "component": "@/components/ui/slider",
    "raw": "'use client'\n\nimport { useSlotId } from '@react-aria/utils'\nimport * as React from 'react'\nimport {\n  composeRenderProps,\n  type LabelProps,\n  SliderOutput as SliderOutputPrimitive,\n  type SliderOutputProps as SliderOutputPrimitiveProps,\n  Slider as SliderPrimitive,\n  type SliderProps as SliderPrimitiveProps,\n  SliderStateContext as SliderStateContextPrimitive,\n  SliderThumb as SliderThumbPrimitive,\n  type SliderThumbProps as SliderThumbPrimitiveProps,\n  SliderTrack as SliderTrackPrimitive,\n  type SliderTrackProps as SliderTrackPrimitiveProps,\n  TextContext as TextContextPrimitive,\n  type TextProps\n} from 'react-aria-components'\nimport { tv, type VariantProps } from 'tailwind-variants'\nimport { Description, Label } from './field'\n\nconst sliderStyles = tv({\n  slots: {\n    root: 'flex disabled:opacity-50 flex-col gap-2 orientation-horizontal:w-full orientation-vertical:h-64 orientation-vertical:items-center',\n    track: [\n      'relative group/track rounded-full bg-zinc-200 dark:bg-zinc-800 cursor-pointer disabled:cursor-default disabled:bg-bg-disabled',\n      'grow orientation-vertical:flex-1 orientation-vertical:w-2 orientation-horizontal:w-full orientation-horizontal:h-2'\n    ],\n    filler: [\n      'rounded-full bg-primary group-disabled/track:bg-bg-disabled',\n      'pointer-events-none absolute group-orientation-horizontal/top-0 group-orientation-vertical/track:w-full group-orientation-vertical/track:bottom-0 group-orientation-horizontal/track:h-full'\n    ],\n    thumb: [\n      'outline-none focus:ring-4 focus:ring-primary/20 focus:outline-none forced-colors:outline-[Highlight]',\n      'rounded-full bg-white shadow-md transition-[width,height]',\n      'absolute left-[50%] top-[50%] block !-translate-x-1/2 !-translate-y-1/2',\n      'disabled:bg-bg-disabled disabled:border disabled:border-bg',\n      'orientation-vertical:w-2 orientation-horizontal:h-2',\n      'size-4 dragging:size-5'\n    ],\n    valueLabel: 'text-muted-fg text-sm'\n  }\n})\n\nconst { filler, thumb, root } = sliderStyles()\n\ninterface SliderProps extends SliderRootProps, VariantProps<typeof sliderStyles> {\n  label?: LabelProps['children']\n  description?: TextProps['children']\n  showValue?: boolean | ((value: number[]) => string)\n}\nconst Slider = React.forwardRef<React.ElementRef<typeof SliderPrimitive>, SliderProps>(\n  ({ label, description, showValue = true, ...props }, ref) => (\n    <SliderRoot ref={ref} {...props}>\n      <div className=\"flex items-center justify-between gap-2\">\n        {label && <Label>{label}</Label>}\n        {(showValue || typeof showValue === 'function') && (\n          <SliderValueLabel>\n            {({ state }) => (typeof showValue === 'function' ? showValue(state.values) : undefined)}\n          </SliderValueLabel>\n        )}\n      </div>\n      <SliderControls />\n      {description && <Description>{description}</Description>}\n    </SliderRoot>\n  )\n)\nSlider.displayName = 'Slider'\n\ntype SliderRootProps = SliderPrimitiveProps\nconst SliderRoot = React.forwardRef((props: SliderRootProps, ref: React.Ref<HTMLDivElement>) => {\n  const descriptionId = useSlotId()\n  return (\n    <TextContextPrimitive.Provider value={{ slots: { description: { id: descriptionId } } }}>\n      <SliderPrimitive\n        ref={ref}\n        aria-describedby={descriptionId}\n        {...props}\n        className={composeRenderProps(props.className, (className) => root({ className }))}\n      />\n    </TextContextPrimitive.Provider>\n  )\n})\nSliderRoot.displayName = 'SliderRoot'\n\ntype SliderControlsProps = SliderTrackProps & VariantProps<typeof sliderStyles>\nconst SliderControls = (props: SliderControlsProps) => {\n  const { values } = React.useContext(SliderStateContextPrimitive)\n  return (\n    <SliderTrack {...props}>\n      <SliderFiller />\n      {values.map((_, i) => (\n        <SliderThumb key={i} index={i} />\n      ))}\n    </SliderTrack>\n  )\n}\n\ntype SliderTrackProps = SliderTrackPrimitiveProps & VariantProps<typeof sliderStyles>\nconst SliderTrack = (props: SliderTrackProps) => {\n  const { track } = sliderStyles()\n  return (\n    <SliderTrackPrimitive\n      {...props}\n      className={composeRenderProps(props.className, (className) => track({ className }))}\n    />\n  )\n}\n\ntype SliderFillerProps = React.HTMLAttributes<HTMLDivElement>\nconst SliderFiller = (props: SliderFillerProps) => {\n  const { orientation, getThumbPercent, values } = React.useContext(SliderStateContextPrimitive)\n  return (\n    <div\n      {...props}\n      style={\n        values.length === 1\n          ? orientation === 'horizontal'\n            ? {\n                width: `${getThumbPercent(0) * 100}%`\n              }\n            : { height: `${getThumbPercent(0) * 100}%` }\n          : orientation === 'horizontal'\n            ? {\n                left: `${getThumbPercent(0) * 100}%`,\n                width: `${Math.abs(getThumbPercent(0) - getThumbPercent(1)) * 100}%`\n              }\n            : {\n                bottom: `${getThumbPercent(0) * 100}%`,\n                height: `${Math.abs(getThumbPercent(0) - getThumbPercent(1)) * 100}%`\n              }\n      }\n      className={filler({ className: props.className })}\n    />\n  )\n}\n\ntype SliderThumbProps = SliderThumbPrimitiveProps & VariantProps<typeof sliderStyles>\nconst SliderThumb = (props: SliderThumbProps) => {\n  return (\n    <SliderThumbPrimitive\n      {...props}\n      className={composeRenderProps(props.className, (className) => thumb({ className }))}\n    />\n  )\n}\n\ntype SliderValueLabelProps = SliderOutputPrimitiveProps\nconst SliderValueLabel = (props: SliderValueLabelProps) => {\n  const { valueLabel } = sliderStyles()\n  return (\n    <SliderOutputPrimitive\n      {...props}\n      className={composeRenderProps(props.className, (className) => valueLabel({ className }))}\n    >\n      {composeRenderProps(\n        props.children,\n        (children, { state }) => children ?? state.values.map((_, i) => state.getThumbValueLabel(i)).join(' - ')\n      )}\n    </SliderOutputPrimitive>\n  )\n}\n\nexport { Slider, SliderControls, SliderFiller, SliderRoot, SliderThumb, SliderTrack, SliderValueLabel }\n",
    "type": "ui"
  },
  "popover": {
    "component": "@/components/ui/popover",
    "raw": "'use client'\n\nimport React from 'react'\nimport {\n  Button,\n  composeRenderProps,\n  DialogTrigger,\n  OverlayArrow,\n  PopoverContext,\n  Popover as PopoverPrimitive,\n  type PopoverProps as PopoverPrimitiveProps,\n  useSlottedContext\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\nimport { ModalBody, ModalClose, ModalDescription, ModalFooter, ModalHeader, ModalOverlay, ModalTitle } from './modal'\n\nexport interface PopoverProps extends Omit<PopoverPrimitiveProps, 'children'> {\n  showArrow?: boolean\n  children: React.ReactNode\n}\n\nconst styles = tv({\n  base: 'max-w-xs rounded-xl border bg-popover bg-clip-padding p-4 text-popover-fg shadow-lg dark:backdrop-blur-2xl dark:backdrop-saturate-200 sm:max-w-3xl forced-colors:bg-[Canvas]',\n  variants: {\n    isEntering: {\n      true: 'duration-200 ease-out animate-in fade-in placement-left:slide-in-from-right-1 placement-right:slide-in-from-left-1 placement-top:slide-in-from-bottom-1 placement-bottom:slide-in-from-top-1'\n    },\n    isExiting: {\n      true: 'duration-150 ease-in animate-out fade-out placement-left:slide-out-to-right-1 placement-right:slide-out-to-left-1 placement-top:slide-out-to-bottom-1 placement-bottom:slide-out-to-top-1'\n    }\n  }\n})\n\nconst Popover = DialogTrigger\nconst PopoverTrigger = Button\nconst PopoverClose = ModalClose\nconst PopoverOverlay = ModalOverlay\nconst PopoverFooter = ModalFooter\nconst PopoverHeader = ModalHeader\nconst PopoverTitle = ModalTitle\nconst PopoverDescription = ModalDescription\nconst PopoverBody = ModalBody\n\nconst PopoverContent = ({ children, showArrow = true, className, ...props }: PopoverProps) => {\n  const popoverContext = useSlottedContext(PopoverContext)!\n  const isSubmenu = popoverContext?.trigger === 'SubmenuTrigger'\n  let offset = showArrow ? 12 : 8\n  offset = isSubmenu ? offset - 6 : offset\n  return (\n    <PopoverPrimitive\n      offset={offset}\n      {...props}\n      className={composeRenderProps(className, (className, renderProps) => styles({ ...renderProps, className }))}\n    >\n      {showArrow && (\n        <OverlayArrow className=\"group\">\n          <svg\n            width={12}\n            height={12}\n            viewBox=\"0 0 12 12\"\n            className=\"block fill-popover stroke-border group-placement-left:-rotate-90 group-placement-right:rotate-90 group-placement-bottom:rotate-180 forced-colors:fill-[Canvas] forced-colors:stroke-[ButtonBorder]\"\n          >\n            <path d=\"M0 0 L6 6 L12 0\" />\n          </svg>\n        </OverlayArrow>\n      )}\n      {children}\n    </PopoverPrimitive>\n  )\n}\n\nconst PopoverPicker = ({ showArrow = false, children, ...props }: PopoverProps) => {\n  return (\n    <PopoverContent showArrow={showArrow} className=\"max-h-72 min-w-[--trigger-width] p-0\" {...props}>\n      {children}\n    </PopoverContent>\n  )\n}\n\nconst PopoverContentPrimitive = PopoverPrimitive\n\nexport {\n  Popover,\n  PopoverBody,\n  PopoverClose,\n  PopoverContent,\n  PopoverContentPrimitive,\n  PopoverDescription,\n  PopoverFooter,\n  PopoverHeader,\n  PopoverOverlay,\n  PopoverPicker,\n  PopoverTitle,\n  PopoverTrigger\n}\n",
    "type": "ui"
  },
  "text-field": {
    "component": "@/components/ui/text-field",
    "raw": "'use client'\n\nimport { IconLoader } from '@irsyadadl/paranoid'\nimport * as React from 'react'\nimport {\n  TextField as TextFieldPrimitive,\n  type TextFieldProps as TextFieldPrimitiveProps,\n  type ValidationResult\n} from 'react-aria-components'\nimport { Description, FieldError, FieldGroup, Input, Label } from './field'\nimport { ctr } from './primitive'\n\ninterface TextFieldProps extends TextFieldPrimitiveProps {\n  label?: string\n  placeholder?: string\n  description?: string\n  errorMessage?: string | ((validation: ValidationResult) => string)\n  prefix?: React.ReactNode\n  suffix?: React.ReactNode\n  isLoading?: boolean\n  indicatorPlace?: 'prefix' | 'suffix'\n}\n\nconst TextField = ({\n  label,\n  description,\n  errorMessage,\n  placeholder,\n  prefix,\n  suffix,\n  isLoading,\n  indicatorPlace,\n  ...props\n}: TextFieldProps) => {\n  return (\n    <TextFieldPrimitive {...props} className={ctr(props.className, 'group flex flex-col gap-1')}>\n      {label && <Label>{label}</Label>}\n      <FieldGroup\n        data-loading={isLoading ? 'true' : undefined}\n        className=\"flex group-invalid:border-danger group-disabled:bg-secondary group-disabled:opacity-50 items-center group-invalid:focus-within:ring-danger/20\"\n      >\n        {isLoading && indicatorPlace === 'prefix' ? (\n          <IconLoader className=\"animate-spin isPfx\" />\n        ) : prefix ? (\n          <span className=\"atrs isPfx\">{prefix}</span>\n        ) : null}\n        <Input className=\"px-2.5\" placeholder={placeholder} />\n        {isLoading && indicatorPlace === 'suffix' ? (\n          <IconLoader className=\"animate-spin isSfx\" />\n        ) : suffix ? (\n          <span className=\"atrs isSfx\">{suffix}</span>\n        ) : null}\n      </FieldGroup>\n      {description && <Description>{description}</Description>}\n      <FieldError>{errorMessage}</FieldError>\n    </TextFieldPrimitive>\n  )\n}\n\nexport { TextField, TextFieldPrimitive }\nexport type { TextFieldProps }\n",
    "type": "ui"
  },
  "radio": {
    "component": "@/components/ui/radio",
    "raw": "'use client'\n\nimport { type ReactNode } from 'react'\nimport {\n  RadioGroup as RadioGroupPrimitive,\n  Radio as RadioPrimitive,\n  type RadioGroupProps as RACRadioGroupProps,\n  type RadioProps,\n  type ValidationResult\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\nimport { Description, FieldError, Label } from './field'\nimport { ctr } from './primitive'\n\ninterface RadioGroupProps extends Omit<RACRadioGroupProps, 'children'> {\n  label?: string\n  children?: ReactNode\n  description?: string\n  errorMessage?: string | ((validation: ValidationResult) => string)\n}\n\nfunction RadioGroup(props: RadioGroupProps) {\n  return (\n    <RadioGroupPrimitive {...props} className={ctr(props.className, 'group flex flex-col gap-2')}>\n      <Label>{props.label}</Label>\n      <div className=\"flex gap-2 group-orientation-horizontal:gap-4 group-orientation-vertical:flex-col\">\n        {props.children}\n      </div>\n      {props.description && <Description>{props.description}</Description>}\n      <FieldError>{props.errorMessage}</FieldError>\n    </RadioGroupPrimitive>\n  )\n}\n\nconst styles = tv({\n  base: 'size-4 rounded-full border bg-secondary transition',\n  variants: {\n    isSelected: {\n      false: 'border-toggle',\n      true: 'border-[4.5px] border-primary'\n    },\n    isFocused: {\n      true: [\n        'border-primary bg-primary/20 ring-4 ring-primary/20',\n        'group-invalid:border-danger/70 group-invalid:bg-danger/20 group-invalid:ring-danger/20'\n      ]\n    },\n    isInvalid: {\n      true: 'border-danger/70 bg-danger/20'\n    },\n    isDisabled: {\n      true: 'opacity-50'\n    }\n  }\n})\n\nfunction Radio(props: RadioProps) {\n  return (\n    <RadioPrimitive\n      {...props}\n      className={ctr(\n        props.className,\n        'group flex items-center gap-2 text-sm text-fg transition disabled:text-fg/50 forced-colors:disabled:text-[GrayText]'\n      )}\n    >\n      {(renderProps) => (\n        <>\n          <div className={styles(renderProps)} />\n          {props.children}\n        </>\n      )}\n    </RadioPrimitive>\n  )\n}\n\nexport { Radio, RadioGroup }\n",
    "type": "ui"
  },
  "date-field": {
    "component": "@/components/ui/date-field",
    "raw": "'use client'\nimport {\n  composeRenderProps,\n  DateField as DateFieldPrimitive,\n  type DateFieldProps as DateFieldPrimitiveProps,\n  DateInput as DateInputPrimitive,\n  type DateInputProps,\n  DateSegment,\n  type DateValue,\n  type ValidationResult\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\nimport { Description, FieldError, fieldGroupStyles, Label } from './field'\nimport { cn, ctr } from './primitive'\n\ninterface DateFieldProps<T extends DateValue> extends DateFieldPrimitiveProps<T> {\n  label?: string\n  description?: string\n  errorMessage?: string | ((validation: ValidationResult) => string)\n}\n\nconst DateField = <T extends DateValue>({ label, description, errorMessage, ...props }: DateFieldProps<T>) => {\n  return (\n    <DateFieldPrimitive {...props} className={ctr(props.className, 'flex flex-col gap-1')}>\n      {label && <Label>{label}</Label>}\n      <DateInput />\n      {description && <Description>{description}</Description>}\n      <FieldError>{errorMessage}</FieldError>\n    </DateFieldPrimitive>\n  )\n}\n\nconst segmentStyles = tv({\n  base: 'inline rounded p-0.5 tracking-wider text-fg caret-transparent outline outline-0 forced-color-adjust-none type-literal:px-0 lg:text-sm forced-colors:text-[ButtonText]',\n  variants: {\n    isPlaceholder: {\n      true: 'text-muted-fg'\n    },\n    isDisabled: {\n      true: 'text-fg/50 forced-colors:text-[GrayText]'\n    },\n    isFocused: {\n      true: 'bg-primary text-primary-fg forced-colors:bg-[Highlight] forced-colors:text-[HighlightText]'\n    }\n  }\n})\n\nconst DateInput = (props: Omit<DateInputProps, 'children'>) => {\n  return (\n    <DateInputPrimitive\n      className={composeRenderProps(props.className, (className, renderProps) =>\n        fieldGroupStyles({\n          ...renderProps,\n          className: cn(\n            'min-w-sm block font-mono disabled:bg-secondary uppercase w-full py-2 px-2 text-base lg:text-sm',\n            className\n          )\n        })\n      )}\n      {...props}\n    >\n      {(segment) => <DateSegment segment={segment} className={segmentStyles} />}\n    </DateInputPrimitive>\n  )\n}\n\nexport { DateField, DateInput, segmentStyles, type DateFieldProps }\n",
    "type": "ui"
  },
  "primitive": {
    "component": "@/components/ui/primitive",
    "raw": "'use client'\n\nimport { ClassValue, clsx } from 'clsx'\nimport * as React from 'react'\nimport { composeRenderProps } from 'react-aria-components'\nimport { twMerge } from 'tailwind-merge'\nimport { tv } from 'tailwind-variants'\n\nconst cn = (...inputs: ClassValue[]) => twMerge(clsx(inputs))\n\nfunction composeTailwindRenderProps<T>(\n  className: string | ((v: T) => string) | undefined,\n  tw: string\n): string | ((v: T) => string) {\n  return composeRenderProps(className, (className) => twMerge(tw, className))\n}\n\nconst focusRing = tv({\n  base: 'outline-none focus:outline-none forced-colors:outline-[Highlight]',\n  variants: {\n    isFocused: { false: 'ring-0', true: 'ring-4 ring-primary/20' },\n    isInvalid: { true: 'ring-4 ring-danger/20' }\n  }\n})\n\nconst focusStyles = tv({\n  extend: focusRing,\n  variants: {\n    isFocused: { true: 'border-primary' },\n    isInvalid: { true: 'border-danger' }\n  }\n})\n\nfunction pickBy<T extends object>(\n  object: T,\n  predicate: (value: T[keyof T], key: keyof T) => boolean = (value) => value !== undefined && value !== ''\n): Partial<T> {\n  return Object.keys(object).reduce((acc: Partial<T>, key: string) => {\n    const typedKey = key as keyof T\n    if (predicate(object[typedKey], typedKey)) {\n      acc[typedKey] = object[typedKey]\n    }\n    return acc\n  }, {})\n}\n\nfunction useMediaQuery(query: string) {\n  const [value, setValue] = React.useState(false)\n\n  React.useEffect(() => {\n    function onChange(event: MediaQueryListEvent) {\n      setValue(event.matches)\n    }\n\n    const result = matchMedia(query)\n    result.addEventListener('change', onChange)\n    setValue(result.matches)\n\n    return () => result.removeEventListener('change', onChange)\n  }, [query])\n\n  return value\n}\n\nconst ctr = composeTailwindRenderProps\nconst tm = twMerge\nconst cr = composeRenderProps\n\nexport { cn, composeTailwindRenderProps, cr, ctr, focusRing, focusStyles, pickBy, tm, twMerge, useMediaQuery }\n",
    "type": "ui"
  },
  "date-picker": {
    "component": "@/components/ui/date-picker",
    "raw": "'use client'\nimport { IconCalendar } from '@irsyadadl/paranoid'\nimport {\n  DatePicker as DatePickerPrimitive,\n  type DatePickerProps as DatePickerPrimitiveProps,\n  DateRangePicker as DateRangePickerPrimitive,\n  type DateRangePickerProps as DateRangePickerPrimitiveProps,\n  type DateValue,\n  type ValidationResult\n} from 'react-aria-components'\nimport { Dialog } from './dialog'\n\nimport { Button } from './button'\nimport { Calendar, RangeCalendar } from './calendar'\nimport { DateInput } from './date-field'\nimport { Description, FieldError, FieldGroup, Label } from './field'\nimport { PopoverContentPrimitive } from './popover'\nimport { ctr } from './primitive'\n\ninterface DatePickerProps<T extends DateValue> extends DatePickerPrimitiveProps<T> {\n  label?: string\n  description?: string\n  errorMessage?: string | ((validation: ValidationResult) => string)\n}\n\nfunction DatePicker<T extends DateValue>({ label, description, errorMessage, ...props }: DatePickerProps<T>) {\n  return (\n    <DatePickerPrimitive {...props} className={ctr(props.className, 'group flex flex-col gap-1')}>\n      {label && <Label>{label}</Label>}\n      <FieldGroup className=\"min-w-40\">\n        <DateInput className=\"w-full px-2 font-mono uppercase min-w-[inherit] text-base lg:text-sm\" />\n        <Button\n          size=\"square-petite\"\n          appearance=\"plain\"\n          className=\"group mr-1 h-7 w-8 rounded outline-offset-0 hover:bg-transparent pressed:bg-transparent\"\n        >\n          <IconCalendar aria-hidden className=\"size-4 text-muted-fg group-open:text-fg\" />\n        </Button>\n      </FieldGroup>\n      {description && <Description>{description}</Description>}\n      <FieldError>{errorMessage}</FieldError>\n      <PopoverContentPrimitive className=\"rounded-xl border bg-popover\">\n        <Dialog>\n          <Calendar />\n        </Dialog>\n      </PopoverContentPrimitive>\n    </DatePickerPrimitive>\n  )\n}\n\ninterface DateRangePickerProps<T extends DateValue> extends DateRangePickerPrimitiveProps<T> {\n  label?: string\n  description?: string\n  errorMessage?: string | ((validation: ValidationResult) => string)\n}\n\nfunction DateRangePicker<T extends DateValue>({ label, description, errorMessage, ...props }: DateRangePickerProps<T>) {\n  return (\n    <DateRangePickerPrimitive {...props} className={ctr(props.className, 'group flex flex-col gap-1')}>\n      {label && <Label>{label}</Label>}\n      <FieldGroup className=\"w-auto min-w-[208px]\">\n        <DateInput slot=\"start\" className=\"px-2 font-mono uppercase min-w-[ineherit]\" />\n        <span\n          aria-hidden=\"true\"\n          className=\"text-gray-800 group-disabled:text-gray-200 dark:text-zinc-200 group-disabled:dark:text-zinc-600 forced-colors:text-[ButtonText] group-disabled:forced-colors:text-[GrayText]\"\n        >\n          –\n        </span>\n        <DateInput slot=\"end\" className=\"flex-1 px-2 py-1.5 font-mono uppercase text-base lg:text-sm\" />\n        <Button\n          size=\"square-petite\"\n          appearance=\"plain\"\n          className=\"group mr-1 h-7 w-8 rounded outline-offset-0 hover:bg-transparent pressed:bg-transparent\"\n        >\n          <IconCalendar aria-hidden className=\"size-4 text-muted-fg group-open:text-fg\" />\n        </Button>\n      </FieldGroup>\n      {description && <Description>{description}</Description>}\n      <FieldError>{errorMessage}</FieldError>\n      <PopoverContentPrimitive className=\"rounded-xl border bg-popover\">\n        <Dialog>\n          <RangeCalendar />\n        </Dialog>\n      </PopoverContentPrimitive>\n    </DateRangePickerPrimitive>\n  )\n}\n\nexport {\n  DatePicker,\n  DateRangePicker,\n  type DatePickerProps,\n  type DateRangePickerProps,\n  type DateValue,\n  type ValidationResult\n}\n",
    "type": "ui"
  },
  "toaster": {
    "component": "@/components/ui/toaster",
    "raw": "'use client'\n\nimport { useTheme } from 'next-themes'\nimport { Toaster as Sonner } from 'sonner'\n\ntype ToasterProps = React.ComponentProps<typeof Sonner>\n\nconst Toaster = ({ ...props }: ToasterProps) => {\n  const { theme = 'system' } = useTheme()\n  return (\n    <Sonner\n      theme={theme as ToasterProps['theme']}\n      className=\"toaster group\"\n      toastOptions={{\n        classNames: {\n          toast:\n            '[&>[data-icon]>svg]:size-[1.1rem] [&>[data-icon]>svg]:text-muted-fg rounded-xl group toast group-[.toaster]:bg-background group-[.toaster]:text-fg border group-[.toaster]:border-border group-[.toaster]:shadow-lg',\n          description: 'group-[.toast]:text-muted-fg',\n          actionButton: 'group-[.toast]:bg-primary group-[.toast]:text-primary-fg',\n          cancelButton: 'group-[.toast]:bg-muted group-[.toast]:text-muted-fg'\n        }\n      }}\n      {...props}\n    />\n  )\n}\n\nexport { Toaster }\n",
    "type": "ui"
  },
  "container": {
    "component": "@/components/ui/container",
    "raw": "'use client'\nimport React from 'react'\n\nconst Container = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(\n  ({ className, ...props }, ref) => <div className=\"mx-auto max-w-7xl px-4 sm:px-6 lg:px-8\" {...props} ref={ref} />\n)\nContainer.displayName = 'Container'\n\nexport { Container }\n",
    "type": "ui"
  },
  "input-otp": {
    "component": "@/components/ui/input-otp",
    "raw": "'use client'\n\nimport { OTPInput, OTPInputContext } from 'input-otp'\nimport * as React from 'react'\n\nimport { IconBulletFill } from '@irsyadadl/paranoid'\nimport { cn } from './primitive'\n\nconst InputOTP = React.forwardRef<React.ElementRef<typeof OTPInput>, React.ComponentPropsWithoutRef<typeof OTPInput>>(\n  ({ className, containerClassName, ...props }, ref) => (\n    <OTPInput\n      data-1p-ignore\n      ref={ref}\n      containerClassName={cn('flex items-center gap-2 has-[:disabled]:opacity-50', containerClassName)}\n      className={cn('disabled:cursor-not-allowed', className)}\n      {...props}\n    />\n  )\n)\nInputOTP.displayName = 'InputOTP'\n\nconst InputOTPGroup = React.forwardRef<React.ElementRef<'div'>, React.ComponentPropsWithoutRef<'div'>>(\n  ({ className, ...props }, ref) => (\n    <div ref={ref} className={cn('flex items-center gap-x-1.5', className)} {...props} />\n  )\n)\nInputOTPGroup.displayName = 'InputOTPGroup'\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<'div'>,\n  React.ComponentPropsWithoutRef<'div'> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        'relative flex size-10 items-center justify-center rounded-md border border-input text-sm transition-all',\n        isActive && 'z-10 border-primary/70 ring-4 ring-primary/20',\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-fg duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = 'InputOTPSlot'\n\nconst InputOTPSeparator = React.forwardRef<React.ElementRef<'div'>, React.ComponentPropsWithoutRef<'div'>>(\n  ({ ...props }, ref) => (\n    <div ref={ref} role=\"separator\" {...props}>\n      <IconBulletFill className=\"size-2\" />\n    </div>\n  )\n)\nInputOTPSeparator.displayName = 'InputOTPSeparator'\n\nexport { InputOTP, InputOTPGroup, InputOTPSeparator, InputOTPSlot }\n",
    "type": "ui"
  },
  "tag-group": {
    "component": "@/components/ui/tag-group",
    "raw": "'use client'\n\nimport { IconX } from '@irsyadadl/paranoid'\nimport { createContext, useContext } from 'react'\nimport {\n  Button,\n  composeRenderProps,\n  TagGroup as TagGroupPrimitive,\n  type TagGroupProps as TagGroupPrimitiveProps,\n  TagList,\n  type TagListProps,\n  Tag as TagPrimitive,\n  type TagProps as TagPrimitiveProps,\n  Text\n} from 'react-aria-components'\nimport { twMerge } from 'tailwind-merge'\nimport { tv } from 'tailwind-variants'\nimport { badgeIntents, badgeStyles } from './badge'\nimport { Description, Label } from './field'\nimport { cn, focusRing } from './primitive'\n\ntype Intent = keyof typeof badgeIntents\nconst IntentContext = createContext<Intent>('primary')\n\nconst emptyColors = Object.keys(badgeIntents).reduce(\n  (acc, key) => {\n    acc[key] = ''\n    return acc\n  },\n  {} as Record<string, string>\n)\nconst tagStyles = tv({\n  base: [badgeStyles.base, 'cursor-pointer focus:outline-none select-none disabled:cursor-default'],\n  variants: {\n    intent: {\n      ...emptyColors\n    },\n    shape: {\n      ...badgeStyles.variants.shape\n    },\n    allowsRemoving: {\n      true: 'pr-1'\n    },\n    isSelected: {\n      true: 'border-transparent bg-primary-600 text-white forced-color-adjust-none forced-badgeIntents:bg-[Highlight] forced-badgeIntents:text-[HighlightText]'\n    },\n    isDisabled: {\n      true: 'opacity-60 forced-badgeIntents:text-[GrayText]'\n    }\n  },\n\n  defaultVariants: {\n    shape: 'square'\n  },\n  compoundVariants: (Object.keys(badgeIntents) as Intent[]).map((intent) => ({\n    isSelected: false,\n    intent,\n    className: badgeIntents[intent]\n  }))\n})\n\nexport interface TagGroupProps<T>\n  extends Omit<TagGroupPrimitiveProps, 'children'>,\n    Pick<TagListProps<T>, 'items' | 'children' | 'renderEmptyState'> {\n  intent?: Intent\n  label?: string\n  description?: string\n  errorMessage?: string\n}\n\nexport interface TagProps extends TagPrimitiveProps {\n  intent?: Intent\n}\n\nexport function TagGroup<T extends object>({\n  label,\n  description,\n  errorMessage,\n  items,\n  children,\n  renderEmptyState,\n  ...props\n}: TagGroupProps<T>) {\n  return (\n    <TagGroupPrimitive {...props} className={twMerge('flex flex-col gap-1', props.className)}>\n      <Label>{label}</Label>\n      <IntentContext.Provider value={props.intent || 'primary'}>\n        <TagList items={items} renderEmptyState={renderEmptyState} className=\"flex flex-wrap gap-1\">\n          {children}\n        </TagList>\n      </IntentContext.Provider>\n      {description && <Description>{description}</Description>}\n      {errorMessage && (\n        <Text slot=\"errorMessage\" className=\"text-sm text-danger\">\n          {errorMessage}\n        </Text>\n      )}\n    </TagGroupPrimitive>\n  )\n}\n\nconst removeButtonStyles = tv({\n  extend: focusRing,\n  base: 'flex cursor-default items-center justify-center rounded-full p-0.5 transition-[background-color] hover:bg-black/10 pressed:bg-black/20 dark:hover:bg-white/10 dark:pressed:bg-white/20'\n})\n\nexport function Tag({ children, intent, ...props }: TagProps) {\n  let textValue = typeof children === 'string' ? children : undefined\n  let groupIntent = useContext(IntentContext)\n  return (\n    <TagPrimitive\n      textValue={textValue}\n      {...props}\n      className={composeRenderProps(props.className, (className, renderProps) =>\n        tagStyles({\n          ...renderProps,\n          className: cn('href' in props ? '' : 'focus:ring-1 focus:ring-primary-400', className),\n          intent: intent || groupIntent\n        })\n      )}\n    >\n      {({ allowsRemoving }) => (\n        <>\n          {children}\n          {allowsRemoving && (\n            <Button slot=\"remove\" className={removeButtonStyles}>\n              <IconX aria-hidden className=\"h-3 w-3\" />\n            </Button>\n          )}\n        </>\n      )}\n    </TagPrimitive>\n  )\n}\n",
    "type": "ui"
  },
  "sheet": {
    "component": "@/components/ui/sheet",
    "raw": "'use client'\n\nimport * as React from 'react'\nimport {\n  Button,\n  type DialogProps,\n  DialogTrigger as DialogTriggerPrimitive,\n  Modal,\n  ModalOverlay,\n  type ModalOverlayProps\n} from 'react-aria-components'\nimport { tv, type VariantProps } from 'tailwind-variants'\nimport { Dialog } from './dialog'\nimport { CloseButtonIndicator, ModalClose, ModalDescription, ModalFooter, ModalHeader, ModalTitle } from './modal'\nimport { cn } from './primitive'\n\nconst Sheet = DialogTriggerPrimitive\nconst SheetTrigger = Button\nconst SheetClose = ModalClose\nconst SheetFooter = ModalFooter\nconst SheetHeader = ModalHeader\nconst SheetTitle = ModalTitle\nconst SheetDescription = ModalDescription\n\nconst generateCompoundVariants = (sides: Array<'top' | 'bottom' | 'left' | 'right'>) => {\n  return sides.map((side) => ({\n    side,\n    isStack: true,\n    className:\n      side === 'top'\n        ? 'top-2 inset-x-2 rounded-lg border'\n        : side === 'bottom'\n          ? 'bottom-2 inset-x-2 rounded-lg border'\n          : side === 'left'\n            ? 'left-2 inset-y-2 rounded-lg border'\n            : 'right-2 inset-y-2 rounded-lg border'\n  }))\n}\n\nconst sheetVariants = tv({\n  base: 'fixed z-50 grid gap-4 bg-popover text-popover-fg shadow-lg transition ease-in-out entering:duration-300 entering:animate-in exiting:duration-200 exiting:animate-out',\n  variants: {\n    side: {\n      top: 'inset-x-0 top-0 rounded-b-2xl border-b entering:slide-in-from-top exiting:slide-out-to-top',\n      bottom: 'inset-x-0 bottom-0 rounded-t-2xl border-t entering:slide-in-from-bottom exiting:slide-out-to-bottom',\n      left: 'inset-y-0 left-0 h-auto w-72 sm:w-3/4 overflow-y-auto border-r entering:slide-in-from-left exiting:slide-out-to-left sm:max-w-xs',\n      right:\n        'inset-y-0 right-0 h-auto w-72 sm:w-3/4 overflow-y-auto border-l entering:slide-in-from-right exiting:slide-out-to-right sm:max-w-xs'\n    },\n    isStack: {\n      true: '',\n      false: ''\n    }\n  },\n  compoundVariants: generateCompoundVariants(['top', 'bottom', 'left', 'right'])\n})\n\nconst SheetOverlay = ({ className, isDismissable = true, ...props }: ModalOverlayProps) => (\n  <ModalOverlay\n    isDismissable={isDismissable}\n    className={(values) =>\n      cn(\n        'fixed inset-0 z-50 bg-black/50 entering:animate-in entering:fade-in-0 exiting:duration-300 exiting:animate-out exiting:fade-out-0',\n        typeof className === 'function' ? className(values) : className\n      )\n    }\n    {...props}\n  />\n)\n\nexport interface SheetContentProps\n  extends Omit<React.ComponentProps<typeof Modal>, 'children'>,\n    VariantProps<typeof sheetVariants> {\n  children?: DialogProps['children']\n  role?: DialogProps['role']\n  closeButton?: boolean\n  isStack?: boolean\n}\n\nconst SheetContent = (props: SheetContentProps) => {\n  const { className, children, side = 'right', role, closeButton = true, isStack = true } = props\n  return (\n    <Modal className={cn(sheetVariants({ side, isStack }), className)} {...props}>\n      <Dialog aria-label=\"Sheet\" role={role} className=\"h-full outline-none\">\n        {(values) => (\n          <>\n            {typeof children === 'function' ? children(values) : children}\n            {closeButton && <CloseButtonIndicator className=\"top-2.5 right-2.5\" close={values.close} />}\n          </>\n        )}\n      </Dialog>\n    </Modal>\n  )\n}\n\nexport {\n  Sheet,\n  SheetClose,\n  SheetContent,\n  SheetDescription,\n  SheetFooter,\n  SheetHeader,\n  SheetOverlay,\n  SheetTitle,\n  SheetTrigger\n}\n",
    "type": "ui"
  },
  "field": {
    "component": "@/components/ui/field",
    "raw": "'use client'\n\nimport {\n  composeRenderProps,\n  FieldError as FieldErrorPrimitive,\n  type FieldErrorProps,\n  Group,\n  type GroupProps,\n  Input as InputPrimitive,\n  type InputProps,\n  Label as LabelPrimitive,\n  type LabelProps,\n  Text,\n  type TextProps\n} from 'react-aria-components'\nimport { twMerge } from 'tailwind-merge'\nimport { tv } from 'tailwind-variants'\nimport { ctr } from './primitive'\n\nconst fieldBorderStyles = tv({\n  base: 'group-focus-within:border-primary forced-colors:border-[Highlight]',\n  variants: {\n    isInvalid: {\n      true: 'border-danger/70 group-focus-within:border-danger/70 forced-colors:border-[Mark]'\n    }\n  }\n})\n\nconst Label = (props: LabelProps) => {\n  return (\n    <LabelPrimitive\n      {...props}\n      className={twMerge('w-fit cursor-default font-medium text-secondary-fg text-sm', props.className)}\n    />\n  )\n}\n\nconst Description = (props: TextProps) => {\n  return <Text {...props} slot=\"description\" className={twMerge('text-sm text-muted-fg', props.className)} />\n}\n\nconst FieldError = (props: FieldErrorProps) => {\n  return (\n    <FieldErrorPrimitive {...props} className={ctr(props.className, 'text-sm text-danger forced-colors:text-[Mark]')} />\n  )\n}\n\nconst fieldGroupStyles = tv({\n  base: [\n    'group flex h-10 items-center overflow-hidden rounded-lg border border-input bg-background transition disabled:opacity-50 disabled:bg-secondary forced-colors:bg-[Field]',\n    'focus-within:border-primary focus-within:ring-4 focus-within:ring-primary/20',\n    'focus-within:invalid:border-danger focus-within:invalid:ring-4 focus-within:invalid:ring-danger/20',\n    'invalid:border-danger',\n    'has-[.isPfx]:pl-2.5 has-[.isSfx]:pr-2.5 [&_[data-slot=icon]]:size-4 has-[.atrs]:shrink-0 has-[.atrs]:text-muted-fg'\n  ]\n})\n\nconst FieldGroup = (props: GroupProps) => {\n  return (\n    <Group\n      {...props}\n      className={composeRenderProps(props.className, (className, renderProps) =>\n        fieldGroupStyles({ ...renderProps, className })\n      )}\n    />\n  )\n}\n\nconst Input = (props: InputProps) => {\n  return (\n    <InputPrimitive\n      {...props}\n      className={ctr(\n        props.className,\n        'w-full min-w-0 bg-transparent p-2 text-base text-fg placeholder-muted-fg focus:outline-none lg:text-sm'\n      )}\n    />\n  )\n}\n\nexport { Description, fieldBorderStyles, FieldError, FieldGroup, fieldGroupStyles, Input, InputPrimitive, Label }\n",
    "type": "ui"
  },
  "drop-zone": {
    "component": "@/components/ui/drop-zone",
    "raw": "'use client'\nimport { DropZone as DropPrimitiveZone, type DropZoneProps } from 'react-aria-components'\n\nimport { cn } from './primitive'\n\nconst DropZone = ({ className, ...props }: DropZoneProps) => (\n  <DropPrimitiveZone\n    className={(values) =>\n      cn(\n        'flex h-[150px] w-[300px] flex-col items-center justify-center gap-2 rounded-md border border-dashed text-sm data-[drop-target]:border-solid data-[drop-target]:border-primary data-[drop-target]:bg-accent',\n        typeof className === 'function' ? className(values) : className\n      )\n    }\n    {...props}\n  />\n)\n\nexport { DropZone }\n",
    "type": "ui"
  },
  "grid": {
    "component": "@/components/ui/grid",
    "raw": "'use client'\n\nimport React from 'react'\nimport { tv, VariantProps } from 'tailwind-variants'\nimport { cn } from './primitive'\n\nconst gridCols = {\n  1: 'grid-cols-1',\n  2: 'grid-cols-2',\n  3: 'grid-cols-3',\n  4: 'grid-cols-4',\n  5: 'grid-cols-5',\n  6: 'grid-cols-6',\n  7: 'grid-cols-7',\n  8: 'grid-cols-8',\n  9: 'grid-cols-9',\n  10: 'grid-cols-10',\n  11: 'grid-cols-11',\n  12: 'grid-cols-12',\n  none: 'grid-cols-none',\n  subgrid: 'grid-cols-subgrid'\n}\n\nconst colSpan = {\n  auto: 'col-auto\t',\n  1: 'col-span-1',\n  2: 'col-span-2',\n  3: 'col-span-3',\n  4: 'col-span-4',\n  5: 'col-span-5',\n  6: 'col-span-6',\n  7: 'col-span-7',\n  8: 'col-span-8',\n  9: 'col-span-9',\n  10: 'col-span-10',\n  11: 'col-span-11',\n  12: 'col-span-12',\n  full: 'col-span-full'\n}\n\nconst colStart = {\n  1: 'col-start-1',\n  2: 'col-start-2',\n  3: 'col-start-3',\n  4: 'col-start-4',\n  5: 'col-start-5',\n  6: 'col-start-6',\n  7: 'col-start-7',\n  8: 'col-start-8',\n  9: 'col-start-9',\n  10: 'col-start-10',\n  11: 'col-start-11',\n  12: 'col-start-12',\n  13: 'col-start-13',\n  auto: 'col-start-auto'\n}\n\nconst colEnd = {\n  1: 'col-end-1',\n  2: 'col-end-2',\n  3: 'col-end-3',\n  4: 'col-end-4',\n  5: 'col-end-5',\n  6: 'col-end-6',\n  7: 'col-end-7',\n  8: 'col-end-8',\n  9: 'col-end-9',\n  10: 'col-end-10',\n  11: 'col-end-11',\n  12: 'col-end-12',\n  13: 'col-end-13',\n  auto: 'col-end-auto'\n}\n\nconst gridRows = {\n  1: 'grid-rows-1',\n  2: 'grid-rows-2',\n  3: 'grid-rows-3',\n  4: 'grid-rows-4',\n  5: 'grid-rows-5',\n  6: 'grid-rows-6',\n  7: 'grid-rows-7',\n  8: 'grid-rows-8',\n  9: 'grid-rows-9',\n  10: 'grid-rows-10',\n  11: 'grid-rows-11',\n  12: 'grid-rows-12',\n  none: 'grid-rows-none',\n  subgrid: 'grid-rows-subgrid'\n}\n\nconst rowSpan = {\n  auto: 'row-auto',\n  1: 'row-span-1',\n  2: 'row-span-2',\n  3: 'row-span-3',\n  4: 'row-span-4',\n  5: 'row-span-5',\n  6: 'row-span-6',\n  7: 'row-span-7',\n  8: 'row-span-8',\n  9: 'row-span-9',\n  10: 'row-span-10',\n  11: 'row-span-11',\n  12: 'row-span-12',\n  full: 'row-span-full'\n}\n\nconst rowStart = {\n  1: 'row-start-1',\n  2: 'row-start-2',\n  3: 'row-start-3',\n  4: 'row-start-4',\n  5: 'row-start-5',\n  6: 'row-start-6',\n  7: 'row-start-7',\n  8: 'row-start-8',\n  9: 'row-start-9',\n  10: 'row-start-10',\n  11: 'row-start-11',\n  12: 'row-start-12',\n  13: 'row-start-13',\n  auto: 'row-start-auto'\n}\n\nconst rowEnd = {\n  1: 'row-end-1',\n  2: 'row-end-2',\n  3: 'row-end-3',\n  4: 'row-end-4',\n  5: 'row-end-5',\n  6: 'row-end-6',\n  7: 'row-end-7',\n  8: 'row-end-8',\n  9: 'row-end-9',\n  10: 'row-end-10',\n  11: 'row-end-11',\n  12: 'row-end-12',\n  13: 'row-end-13',\n  auto: 'row-end-auto'\n}\n\nconst gridFlow = {\n  row: 'grid-flow-row',\n  col: 'grid-flow-col',\n  rowDense: 'grid-flow-row-dense',\n  colDense: 'grid-flow-col-dense',\n  dense: 'grid-flow-dense'\n}\n\nconst autoCols = {\n  auto: 'auto-cols-auto',\n  min: 'auto-cols-min',\n  max: 'auto-cols-max',\n  fr: 'auto-cols-fr'\n}\n\nconst autoRows = {\n  auto: 'auto-rows-auto',\n  min: 'auto-rows-min',\n  max: 'auto-rows-max',\n  fr: 'auto-rows-fr'\n}\n\nconst gap = {\n  0: 'gap-0',\n  x: 'gap-x-0',\n  y: 'gap-y-0',\n  px: 'gap-px',\n  0.5: 'gap-0.5',\n  x0_5: 'gap-x-0.5',\n  y0_5: 'gap-y-0.5',\n  1: 'gap-1',\n  x1: 'gap-x-1',\n  y1: 'gap-y-1',\n  1_5: 'gap-1.5',\n  x1_5: 'gap-x-1.5',\n  y1_5: 'gap-y-1.5',\n  2: 'gap-2',\n  x2: 'gap-x-2',\n  y2: 'gap-y-2',\n  2_5: 'gap-2.5',\n  x2_5: 'gap-x-2.5',\n  y2_5: 'gap-y-2.5',\n  3: 'gap-3',\n  x3: 'gap-x-3',\n  y3: 'gap-y-3',\n  3_5: 'gap-3.5',\n  x3_5: 'gap-x-3.5',\n  y3_5: 'gap-y-3.5',\n  4: 'gap-4',\n  x4: 'gap-x-4',\n  y4: 'gap-y-4',\n  5: 'gap-5',\n  x5: 'gap-x-5',\n  y5: 'gap-y-5',\n  6: 'gap-6',\n  x6: 'gap-x-6',\n  y6: 'gap-y-6',\n  7: 'gap-7',\n  x7: 'gap-x-7',\n  y7: 'gap-y-7',\n  8: 'gap-8',\n  x8: 'gap-x-8',\n  y8: 'gap-y-8',\n  9: 'gap-9',\n  x9: 'gap-x-9',\n  y9: 'gap-y-9',\n  10: 'gap-10',\n  x10: 'gap-x-10',\n  y10: 'gap-y-10',\n  11: 'gap-11',\n  x11: 'gap-x-11',\n  y11: 'gap-y-11',\n  12: 'gap-12',\n  x12: 'gap-x-12',\n  y12: 'gap-y-12',\n  14: 'gap-14',\n  x14: 'gap-x-14',\n  y14: 'gap-y-14',\n  16: 'gap-16',\n  x16: 'gap-x-16',\n  y16: 'gap-y-16',\n  20: 'gap-20',\n  x20: 'gap-x-20',\n  y20: 'gap-y-20',\n  24: 'gap-24',\n  x24: 'gap-x-24',\n  y24: 'gap-y-24',\n  28: 'gap-28',\n  x28: 'gap-x-28',\n  y28: 'gap-y-28',\n  32: 'gap-32',\n  x32: 'gap-x-32',\n  y32: 'gap-y-32',\n  36: 'gap-36',\n  x36: 'gap-x-36',\n  y36: 'gap-y-36',\n  40: 'gap-40',\n  x40: 'gap-x-40',\n  y40: 'gap-y-40',\n  44: 'gap-44',\n  x44: 'gap-x-44',\n  y44: 'gap-y-44',\n  48: 'gap-48',\n  x48: 'gap-x-48',\n  y48: 'gap-y-48',\n  52: 'gap-52',\n  x52: 'gap-x-52',\n  y52: 'gap-y-52',\n  56: 'gap-56',\n  x56: 'gap-x-56',\n  y56: 'gap-y-56',\n  60: 'gap-60',\n  x60: 'gap-x-60',\n  y60: 'gap-y-60',\n  64: 'gap-64',\n  x64: 'gap-x-64',\n  y64: 'gap-y-64',\n  72: 'gap-72',\n  x72: 'gap-x-72',\n  y72: 'gap-y-72',\n  80: 'gap-80',\n  x80: 'gap-x-80',\n  y80: 'gap-y-80',\n  96: 'gap-96',\n  x96: 'gap-x-96',\n  y96: 'gap-y-96'\n}\n\nconst gridVariants = tv({\n  base: ['grid'],\n  variants: {\n    cols: gridCols,\n    rows: gridRows,\n    flow: gridFlow,\n    gap: gap,\n    autoCols: autoCols,\n    autoRows: autoRows\n  },\n\n  defaultVariants: {\n    cols: 1\n  },\n  compoundVariants: [\n    {\n      cols: 1,\n      class: 'grid-cols-1 sm:grid-cols-1 md:grid-cols-1 lg:grid-cols-1 xl:grid-cols-1'\n    },\n    {\n      cols: 2,\n      class: 'grid-cols-1 sm:grid-cols-2 md:grid-cols-2 lg:grid-cols-2 xl:grid-cols-2'\n    },\n    {\n      cols: 3,\n      class: 'grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-3 xl:grid-cols-3'\n    },\n    {\n      cols: 4,\n      class: 'grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-4'\n    },\n    {\n      cols: 5,\n      class: 'grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5'\n    },\n    {\n      cols: 6,\n      class: 'grid-cols-1 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 xl:grid-cols-6'\n    }\n  ]\n})\n\nexport interface GridProps extends React.HTMLAttributes<HTMLDivElement>, VariantProps<typeof gridVariants> {}\n\nconst Grid: React.FC<GridProps> = ({ className, cols, rows, flow, gap, autoCols, autoRows, ...props }) => {\n  return <div className={cn(gridVariants({ cols, rows, flow, gap, autoCols, autoRows }), className)} {...props} />\n}\n\nGrid.displayName = 'Grid'\n\nconst gridCellVariants = tv({\n  base: [],\n  variants: {\n    colSpan: colSpan,\n    rowSpan: rowSpan,\n    colStart: colStart,\n    colEnd: colEnd,\n    rowStart: rowStart,\n    rowEnd: rowEnd\n  },\n  defaultVariants: {\n    colSpan: 1,\n    rowSpan: 1\n  }\n})\n\nexport interface GridCellProps extends React.HTMLAttributes<HTMLDivElement>, VariantProps<typeof gridCellVariants> {}\n\nconst GridCell: React.FC<GridCellProps> = ({\n  className,\n  colSpan,\n  rowSpan,\n  colStart,\n  colEnd,\n  rowStart,\n  rowEnd,\n  ...props\n}) => {\n  return (\n    <div\n      className={cn(\n        gridCellVariants({\n          colSpan,\n          rowSpan,\n          colStart,\n          colEnd,\n          rowStart,\n          rowEnd\n        }),\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nGridCell.displayName = 'GridCell'\n\nexport { Grid, GridCell, gridCellVariants, gridVariants }\n",
    "type": "ui"
  },
  "meter": {
    "component": "@/components/ui/meter",
    "raw": "'use client'\n\nimport { IconTriangleInfoFill } from '@irsyadadl/paranoid'\nimport { motion } from 'framer-motion'\nimport { MeterProps as AriaMeterProps, Meter as MeterPrimitive } from 'react-aria-components'\nimport { Label } from './field'\nimport { ctr } from './primitive'\n\nexport interface MeterProps extends AriaMeterProps {\n  label?: string\n}\n\nexport function Meter({ label, ...props }: MeterProps) {\n  return (\n    <MeterPrimitive {...props} className={ctr(props.className, 'flex flex-col gap-1')}>\n      {({ percentage, valueText }) => (\n        <>\n          <div className=\"flex w-full justify-between gap-2\">\n            <Label>{label}</Label>\n            <span className={`text-sm ${percentage >= 80 ? 'text-danger' : 'text-muted-fg'}`}>\n              {percentage >= 80 && (\n                <IconTriangleInfoFill aria-label=\"Alert\" className=\"inline-block size-4 align-text-bottom\" />\n              )}\n              {' ' + valueText}\n            </span>\n          </div>\n          <div className=\"relative h-2 min-w-64 rounded-full bg-muted outline outline-1 -outline-offset-1 outline-transparent\">\n            <motion.div\n              className=\"absolute left-0 top-0 h-full rounded-full forced-colors:bg-[Highlight]\"\n              initial={{ width: '0%', backgroundColor: getColor(0) }}\n              animate={{\n                width: `${percentage}%`,\n                backgroundColor: getColor(percentage)\n              }}\n              transition={{ duration: 0.5 }}\n            />\n          </div>\n        </>\n      )}\n    </MeterPrimitive>\n  )\n}\n\nfunction getColor(percentage: number) {\n  if (percentage < 30) {\n    return '#0d6efd' // Blue\n  }\n\n  if (percentage < 50) {\n    return '#198754' // Green\n  }\n\n  if (percentage < 70) {\n    return '#ffc107' // Yellow\n  }\n\n  if (percentage < 80) {\n    return '#f97316' // Orange\n  }\n\n  return '#e11d48' // Red\n}\n",
    "type": "ui"
  },
  "time-field": {
    "component": "@/components/ui/time-field",
    "raw": "'use client'\n\nimport {\n  TimeField as TimeFieldPrimitive,\n  TimeFieldProps as TimeFieldPrimitiveProps,\n  TimeValue,\n  ValidationResult\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\nimport { DateInput } from './date-field'\nimport { Description, FieldError, fieldGroupStyles, Label } from './field'\nimport { ctr } from './primitive'\n\nexport interface TimeFieldProps<T extends TimeValue> extends TimeFieldPrimitiveProps<T> {\n  label?: string\n  description?: string\n  errorMessage?: string | ((validation: ValidationResult) => string)\n}\n\nconst timeFieldStyles = tv({\n  extend: fieldGroupStyles,\n  base: 'flex w-fit font-mono min-w-28 justify-around whitespace-nowrap p-2 lg:text-sm'\n})\n\nexport function TimeField<T extends TimeValue>({ label, description, errorMessage, ...props }: TimeFieldProps<T>) {\n  return (\n    <TimeFieldPrimitive {...props} className={ctr(props.className, 'flex flex-col gap-1')}>\n      <Label>{label}</Label>\n      <DateInput className={timeFieldStyles} />\n      {description && <Description>{description}</Description>}\n      <FieldError>{errorMessage}</FieldError>\n    </TimeFieldPrimitive>\n  )\n}\n",
    "type": "ui"
  },
  "breadcrumbs": {
    "component": "@/components/ui/breadcrumbs",
    "raw": "'use client'\nimport { IconChevronRight } from '@irsyadadl/paranoid'\nimport {\n  Breadcrumb as BreadcrumbPrimitive,\n  BreadcrumbProps,\n  Breadcrumbs as BreadcrumbsPrimitive,\n  BreadcrumbsProps,\n  type LinkProps\n} from 'react-aria-components'\nimport { Link } from './link'\nimport { cn } from './primitive'\n\nfunction Breadcrumbs<T extends object>(props: BreadcrumbsProps<T>) {\n  return <BreadcrumbsPrimitive {...props} className={cn('flex gap-1', props.className)} />\n}\n\nfunction Breadcrumb(props: BreadcrumbProps & LinkProps) {\n  return (\n    <BreadcrumbPrimitive {...props} className={cn('flex items-center gap-1', props.className)}>\n      <Link href={props.href} {...props} />\n      {props.href && <IconChevronRight className=\"size-4 shrink-0 text-muted-fg\" />}\n    </BreadcrumbPrimitive>\n  )\n}\n\nexport { Breadcrumb, Breadcrumbs }\n",
    "type": "ui"
  },
  "drawer": {
    "component": "@/components/ui/drawer",
    "raw": "'use client'\nimport {\n  animate,\n  AnimatePresence,\n  type Inertia,\n  motion,\n  useMotionTemplate,\n  useMotionValue,\n  useTransform\n} from 'framer-motion'\nimport React from 'react'\nimport {\n  Button,\n  type ButtonProps,\n  Dialog,\n  type DialogProps,\n  Heading,\n  type HeadingProps,\n  Modal,\n  ModalOverlay\n} from 'react-aria-components'\nimport { ModalClose, ModalDescription } from './modal'\nimport { cn } from './primitive'\n\nconst MotionModal = motion(Modal)\nconst MotionModalOverlay = motion(ModalOverlay)\n\nconst inertiaTransition: Inertia = {\n  type: 'inertia',\n  bounceStiffness: 300,\n  bounceDamping: 40,\n  timeConstant: 300\n}\n\nconst staticTransition = {\n  duration: 0.5,\n  ease: [0.32, 0.72, 0, 1]\n}\n\nconst DRAWER_MARGIN = 34\nconst DRAWER_RADIUS = 12\n\ninterface DrawerContextType {\n  isOpen: boolean\n  openDrawer: () => void\n  closeDrawer: () => void\n  withNotch?: boolean\n}\n\nconst DrawerContext = React.createContext<DrawerContextType | undefined>(undefined)\n\nconst useDrawerContext = () => {\n  const context = React.useContext(DrawerContext)\n  if (context === undefined) {\n    throw new Error('useDrawerContext must be used within a Drawer')\n  }\n  return context\n}\n\nconst DrawerTrigger = (props: ButtonProps) => {\n  const { openDrawer } = useDrawerContext()\n\n  return <Button onPress={openDrawer} {...props} />\n}\n\ninterface DrawerProps {\n  children: React.ReactNode\n  isOpen?: boolean\n  withNotch?: boolean\n  onOpenChange?: (isOpen: boolean) => void\n}\n\nconst Drawer = ({ children, withNotch = true, isOpen: controlledIsOpen, onOpenChange }: DrawerProps) => {\n  const [internalIsOpen, setInternalIsOpen] = React.useState(false)\n\n  const isControlled = controlledIsOpen !== undefined\n  const isOpen = isControlled ? controlledIsOpen : internalIsOpen\n\n  React.useEffect(() => {\n    if (isControlled && onOpenChange) {\n      onOpenChange(isOpen)\n    }\n  }, [isOpen, isControlled, onOpenChange])\n\n  const openDrawer = () => {\n    if (isControlled && onOpenChange) {\n      onOpenChange(true)\n    } else {\n      setInternalIsOpen(true)\n    }\n  }\n\n  const closeDrawer = () => {\n    if (isControlled && onOpenChange) {\n      onOpenChange(false)\n    } else {\n      setInternalIsOpen(false)\n    }\n  }\n\n  if (typeof window === 'undefined') {\n    return null\n  }\n\n  return (\n    <DrawerContext.Provider value={{ isOpen, openDrawer, closeDrawer, withNotch }}>{children}</DrawerContext.Provider>\n  )\n}\n\ninterface DrawerContentProps extends Omit<React.ComponentProps<typeof Modal>, 'children'> {\n  children?: DialogProps['children']\n}\n\nconst DrawerContent = ({ children, className, ...props }: DrawerContentProps) => {\n  const { isOpen, closeDrawer, withNotch } = useDrawerContext()\n\n  const h = window.innerHeight - DRAWER_MARGIN\n  const y = useMotionValue(h)\n  const bgOpacity = useTransform(y, [0, h], [0.5, 0])\n  const bg = useMotionTemplate`rgba(0, 0, 0, ${bgOpacity})`\n\n  const bodyScale = useTransform(y, [0, h], [(window.innerWidth - DRAWER_MARGIN) / window.innerWidth, 1])\n  const bodyTranslate = useTransform(y, [0, h], [DRAWER_MARGIN - DRAWER_RADIUS, 0])\n  const bodyBorderRadius = useTransform(y, [0, h], [DRAWER_RADIUS, 0])\n  return (\n    <motion.div\n      style={{\n        scale: bodyScale,\n        borderRadius: bodyBorderRadius,\n        y: bodyTranslate,\n        transformOrigin: 'center 0'\n      }}\n    >\n      <AnimatePresence>\n        {isOpen && (\n          <MotionModalOverlay\n            isOpen // Force the modal to be open when AnimatePresence renders it.\n            onOpenChange={closeDrawer}\n            className=\"fixed inset-0 z-50\"\n            style={{ backgroundColor: bg as any }}\n          >\n            <MotionModal\n              className={cn(\n                'absolute bottom-0 w-full rounded-t-2xl bg-tertiary shadow-lg ring-1 ring-fg/10',\n                className\n              )}\n              initial={{ y: h }}\n              animate={{ y: 0 }}\n              exit={{ y: h }}\n              transition={staticTransition}\n              style={{\n                y,\n                top: DRAWER_MARGIN,\n                paddingBottom: window.screen.height // Extra padding at the bottom to account for rubber band scrolling.\n              }}\n              drag=\"y\"\n              dragConstraints={{ top: 0 }}\n              onDragEnd={(e, { offset, velocity }) => {\n                if (offset.y > window.innerHeight * 0.75 || velocity.y > 10) {\n                  closeDrawer()\n                } else {\n                  animate(y, 0, { ...inertiaTransition, min: 0, max: 0 })\n                }\n              }}\n              {...props}\n            >\n              {/* drag affordance / notch */}\n              {withNotch && <div className=\"notch mx-auto mt-2 h-1.5 w-10 rounded-full bg-fg/20\" />}\n              <Dialog className=\"mx-auto flex h-[calc(var(--visual-viewport-height)-4.5rem)] max-w-3xl flex-col justify-between overflow-y-auto px-4 pt-4 outline-none\">\n                {(values) => <>{typeof children === 'function' ? children(values) : children}</>}\n              </Dialog>\n            </MotionModal>\n          </MotionModalOverlay>\n        )}\n      </AnimatePresence>\n    </motion.div>\n  )\n}\n\nconst DrawerHeader = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n  <div className={cn('flex flex-col gap-y-1 text-center sm:text-left', className)} {...props} />\n)\n\nconst DrawerBody = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n  <div className={cn('flex-1 overflow-y-auto overflow-x-hidden py-4', className)} {...props} />\n)\n\nconst DrawerFooter = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      'flex shrink-0 flex-col-reverse gap-2 sm:flex-row sm:justify-between [&_button:first-child:nth-last-child(1)]:w-full',\n      className\n    )}\n    {...props}\n  />\n)\n\nconst DrawerTitle = ({ className, ...props }: HeadingProps) => (\n  <Heading slot=\"title\" className={cn('text-lg font-semibold leading-none tracking-tight', className)} {...props} />\n)\n\nconst DrawerDescription = ModalDescription\nconst DrawerClose = ModalClose\n\nexport {\n  Drawer,\n  DrawerBody,\n  DrawerClose,\n  DrawerContent,\n  DrawerDescription,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerTitle,\n  DrawerTrigger\n}\n",
    "type": "ui"
  },
  "tooltip": {
    "component": "@/components/ui/tooltip",
    "raw": "'use client'\n\nimport React from 'react'\nimport {\n  Button,\n  composeRenderProps,\n  OverlayArrow,\n  Tooltip as TooltipPrimitive,\n  type TooltipProps as TooltipPrimitiveProps,\n  TooltipTrigger as TooltipTriggerPrimitive\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nexport interface TooltipProps extends Omit<TooltipPrimitiveProps, 'children'> {\n  children: React.ReactNode\n}\n\nconst styles = tv({\n  base: [\n    'group rounded-lg border bg-tertiary px-1.5 py-1 text-sm text-tertiary-fg will-change-transform dark:shadow-none',\n    // Placement\n    'placement-left:slide-in-from-right-1 placement-right:slide-in-from-left-1 placement-top:slide-in-from-bottom-1 placement-bottom:slide-in-from-top-1'\n  ],\n  variants: {\n    isEntering: {\n      true: 'animate-in fade-in'\n    },\n    isExiting: {\n      true: 'animate-in fade-in direction-reverse'\n    }\n  }\n})\n\nconst TooltipTrigger = Button\nconst Tooltip = TooltipTriggerPrimitive\n\nconst TooltipContent = ({ children, ...props }: TooltipProps) => {\n  return (\n    <TooltipPrimitive\n      {...props}\n      offset={10}\n      className={composeRenderProps(props.className, (className, renderProps) =>\n        styles({\n          ...renderProps,\n          className\n        })\n      )}\n    >\n      <OverlayArrow>\n        <svg\n          width={8}\n          height={8}\n          viewBox=\"0 0 8 8\"\n          className=\"fill-tertiary stroke-border group-placement-left:-rotate-90 group-placement-right:rotate-90 group-placement-bottom:rotate-180 forced-colors:fill-[Canvas] forced-colors:stroke-[ButtonBorder]\"\n        >\n          <path d=\"M0 0 L4 4 L8 0\" />\n        </svg>\n      </OverlayArrow>\n      {children}\n    </TooltipPrimitive>\n  )\n}\n\nexport { Tooltip, TooltipContent, TooltipTrigger }\n",
    "type": "ui"
  },
  "file-trigger": {
    "component": "@/components/ui/file-trigger",
    "raw": "'use client'\n\nimport { IconCamera, IconFolder, IconPaperclip } from '@irsyadadl/paranoid'\nimport React from 'react'\nimport {\n  FileTrigger as FileTriggerPrimitive,\n  type FileTriggerProps as FileTriggerPrimitiveProps\n} from 'react-aria-components'\nimport { type VariantProps } from 'tailwind-variants'\nimport { Button, type buttonStyles } from './button'\n\ninterface FileTriggerProps extends FileTriggerPrimitiveProps, VariantProps<typeof buttonStyles> {\n  withIcon?: boolean\n  isDisabled?: boolean\n}\n\nconst FileTrigger: React.FC<FileTriggerProps> = ({\n  intent = 'primary',\n  appearance = 'outline',\n  withIcon = true,\n  ...props\n}) => {\n  return (\n    <>\n      <FileTriggerPrimitive {...props}>\n        <Button isDisabled={props.isDisabled} intent={intent} appearance={appearance}>\n          {withIcon && (\n            <>\n              {props.defaultCamera ? (\n                <IconCamera />\n              ) : props.acceptDirectory ? (\n                <IconFolder />\n              ) : (\n                <IconPaperclip className=\"rotate-45\" />\n              )}\n            </>\n          )}\n          {props.children ? (\n            props.children\n          ) : (\n            <>\n              {props.allowsMultiple ? 'Browse a files' : props.acceptDirectory ? 'Browse' : 'Browse a file'}\n              ...\n            </>\n          )}\n        </Button>\n      </FileTriggerPrimitive>\n    </>\n  )\n}\n\nexport { FileTrigger }\n",
    "type": "ui"
  },
  "heading": {
    "component": "@/components/ui/heading",
    "raw": "'use client'\n\nimport { Heading as HeadingPrimitive, type HeadingProps } from 'react-aria-components'\nimport { cn } from './primitive'\n\nexport function Heading({ className, level = 1, ...props }: HeadingProps) {\n  return (\n    <HeadingPrimitive\n      level={level}\n      className={cn('font-semibold text-zinc-950 dark:text-white sm:text-xl', className)}\n      {...props}\n    />\n  )\n}\n\nexport function Subheading({ className, level = 2, ...props }: HeadingProps) {\n  return (\n    <HeadingPrimitive\n      level={level}\n      {...props}\n      className={cn(className, 'text-base/7 font-semibold text-zinc-950 dark:text-white sm:text-sm/6')}\n    />\n  )\n}\n",
    "type": "ui"
  },
  "switch": {
    "component": "@/components/ui/switch",
    "raw": "'use client'\n\nimport { Switch as SwitchPrimitive, type SwitchProps as SwitchPrimitiveProps } from 'react-aria-components'\nimport { tv, type VariantProps } from 'tailwind-variants'\nimport { cn, focusRing } from './primitive'\n\nconst trackStyles = tv({\n  extend: focusRing,\n  base: 'mr-2 h-5 w-8 cursor-pointer rounded-full border-2 border-transparent bg-zinc-400 dark:bg-zinc-600 transition duration-200',\n  variants: {\n    intent: {\n      primary: 'group-selected:bg-primary',\n      secondary: 'group-selected:bg-zinc-500',\n      success: 'group-selected:bg-success',\n      danger: 'group-selected:bg-danger',\n      warning: 'group-selected:bg-amber-500',\n      info: 'group-selected:bg-lime-500 dark:group-selected:bg-lime-600'\n    }\n  },\n  defaultVariants: {\n    intent: 'primary'\n  }\n})\n\ninterface SwitchProps extends SwitchPrimitiveProps, VariantProps<typeof trackStyles> {}\n\nconst Switch = ({ children, intent, className, ...props }: SwitchProps) => {\n  return (\n    <SwitchPrimitive\n      {...props}\n      className={(values) =>\n        cn(\n          'group inline-flex touch-none lg:text-sm items-center disabled:opacity-60 forced-colors:disabled:text-[GrayText]',\n          typeof className === 'function' ? className(values) : className\n        )\n      }\n      style={{ WebkitTapHighlightColor: 'transparent' }}\n    >\n      {(values) => (\n        <>\n          <span className={trackStyles({ intent: intent })}>\n            <span className=\"forced-colors:disabled:outline-[GrayText] group-selected:ml-3 group-selected:group-data-[pressed]:ml-2 group-pressed:w-5 block size-4 origin-right rounded-full bg-white shadow transition-all duration-200\" />\n          </span>\n          {typeof children === 'function' ? children(values) : children}\n        </>\n      )}\n    </SwitchPrimitive>\n  )\n}\n\nexport { Switch }\n",
    "type": "ui"
  },
  "calendar": {
    "component": "@/components/ui/calendar",
    "raw": "'use client'\nimport { IconChevronLeft, IconChevronLgLeft, IconChevronRight } from '@irsyadadl/paranoid'\nimport {\n  Calendar as AriaCalendar,\n  CalendarGridHeader as AriaCalendarGridHeader,\n  type CalendarProps as AriaCalendarProps,\n  RangeCalendar as AriaRangeCalendar,\n  type RangeCalendarProps as AriaRangeCalendarProps,\n  CalendarCell,\n  CalendarGrid,\n  CalendarGridBody,\n  CalendarHeaderCell,\n  type DateValue,\n  Heading,\n  Text,\n  useLocale\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\nimport { Button } from './button'\nimport { focusRing } from './primitive'\n\nconst cellStyles = tv({\n  extend: focusRing,\n  base: 'flex size-9 cursor-default items-center justify-center rounded-full text-sm forced-color-adjust-none',\n  variants: {\n    isSelected: {\n      false: 'text-fg hover:bg-gray-100 pressed:bg-gray-200 dark:hover:bg-zinc-700 dark:pressed:bg-zinc-600',\n      true: 'bg-primary text-primary-fg invalid:bg-danger invalid:text-danger-fg forced-colors:bg-[Highlight] forced-colors:text-[HighlightText] forced-colors:invalid:bg-[Mark]'\n    },\n    isDisabled: {\n      true: 'text-gray-300 dark:text-zinc-600 forced-colors:text-[GrayText]'\n    }\n  }\n})\n\ninterface CalendarProps<T extends DateValue> extends Omit<AriaCalendarProps<T>, 'visibleDuration'> {\n  errorMessage?: string\n}\n\nfunction Calendar<T extends DateValue>({ errorMessage, ...props }: CalendarProps<T>) {\n  return (\n    <AriaCalendar {...props}>\n      <CalendarHeader />\n      <CalendarGrid>\n        <CalendarGridHeader />\n        <CalendarGridBody>{(date) => <CalendarCell date={date} className={cellStyles} />}</CalendarGridBody>\n      </CalendarGrid>\n      {errorMessage && (\n        <Text slot=\"errorMessage\" className=\"text-sm text-red-600\">\n          {errorMessage}\n        </Text>\n      )}\n    </AriaCalendar>\n  )\n}\n\nfunction CalendarHeader() {\n  const { direction } = useLocale()\n\n  return (\n    <header className=\"flex w-full items-center gap-1 px-1 pb-4\">\n      <Button size=\"square-petite\" className=\"[&_[data-slot=icon]]:text-fg\" appearance=\"outline\" slot=\"previous\">\n        {direction === 'rtl' ? <IconChevronRight aria-hidden /> : <IconChevronLeft aria-hidden />}\n      </Button>\n      <Heading className=\"mx-2 flex-1 text-center text-base font-medium text-fg\" />\n      <Button size=\"square-petite\" className=\"[&_[data-slot=icon]]:text-fg\" appearance=\"outline\" slot=\"next\">\n        {direction === 'rtl' ? <IconChevronLgLeft aria-hidden /> : <IconChevronRight aria-hidden />}\n      </Button>\n    </header>\n  )\n}\n\nfunction CalendarGridHeader() {\n  return (\n    <AriaCalendarGridHeader>\n      {(day) => <CalendarHeaderCell className=\"text-xs font-semibold text-gray-500\">{day}</CalendarHeaderCell>}\n    </AriaCalendarGridHeader>\n  )\n}\n\ninterface RangeCalendarProps<T extends DateValue> extends Omit<AriaRangeCalendarProps<T>, 'visibleDuration'> {\n  errorMessage?: string\n}\n\nconst cell = tv({\n  extend: focusRing,\n  base: 'flex h-full w-full items-center justify-center rounded-full text-zinc-900 forced-color-adjust-none dark:text-zinc-200',\n  variants: {\n    selectionState: {\n      none: 'group-hover:bg-gray-100 group-pressed:bg-gray-200 dark:group-hover:bg-zinc-700 dark:group-pressed:bg-zinc-600',\n      middle: [\n        'group-hover:bg-primary-200 dark:group-hover:bg-primary-900 forced-colors:group-hover:bg-[Highlight]',\n        'group-invalid:group-hover:bg-red-200 dark:group-invalid:group-hover:bg-red-900 forced-colors:group-invalid:group-hover:bg-[Mark]',\n        'group-pressed:bg-primary-300 dark:group-pressed:bg-primary-800 forced-colors:text-[HighlightText] forced-colors:group-pressed:bg-[Highlight]',\n        'group-invalid:group-pressed:bg-red-300 dark:group-invalid:group-pressed:bg-red-800 forced-colors:group-invalid:group-pressed:bg-[Mark]'\n      ],\n      cap: 'bg-primary text-primary-fg group-invalid:bg-danger group-invalid:text-danger-fg forced-colors:bg-[Highlight] forced-colors:text-[HighlightText] forced-colors:group-invalid:bg-[Mark]'\n    },\n    isDisabled: {\n      true: 'text-gray-300 dark:text-zinc-600 forced-colors:text-[GrayText]'\n    }\n  }\n})\n\nfunction RangeCalendar<T extends DateValue>({ errorMessage, ...props }: RangeCalendarProps<T>) {\n  return (\n    <AriaRangeCalendar {...props}>\n      <CalendarHeader />\n      <CalendarGrid className=\"[&_td]:px-0\">\n        <CalendarGridHeader />\n        <CalendarGridBody>\n          {(date) => (\n            <CalendarCell\n              date={date}\n              className=\"group size-9 cursor-default text-sm outline outline-0 outside-month:text-gray-300 selected:bg-primary-100 invalid:selected:bg-red-100 selection-start:rounded-s-full selection-end:rounded-e-full dark:selected:bg-primary-700/30 dark:invalid:selected:bg-red-700/30 forced-colors:selected:bg-[Highlight] forced-colors:invalid:selected:bg-[Mark] [td:first-child_&]:rounded-s-full [td:last-child_&]:rounded-e-full\"\n            >\n              {({ formattedDate, isSelected, isSelectionStart, isSelectionEnd, isFocusVisible, isDisabled }) => (\n                <span\n                  className={cell({\n                    selectionState:\n                      isSelected && (isSelectionStart || isSelectionEnd) ? 'cap' : isSelected ? 'middle' : 'none',\n                    isDisabled\n                  })}\n                >\n                  {formattedDate}\n                </span>\n              )}\n            </CalendarCell>\n          )}\n        </CalendarGridBody>\n      </CalendarGrid>\n      {errorMessage && (\n        <Text slot=\"errorMessage\" className=\"text-sm text-red-600\">\n          {errorMessage}\n        </Text>\n      )}\n    </AriaRangeCalendar>\n  )\n}\n\nexport { Calendar, CalendarGridHeader, CalendarHeader, RangeCalendar, type RangeCalendarProps }\n",
    "type": "ui"
  },
  "grid-list": {
    "component": "@/components/ui/grid-list",
    "raw": "'use client'\n\nimport {\n  Button,\n  GridListItem as GridListItemPrimitive,\n  GridList as GridListPrimitive,\n  type GridListItemProps,\n  type GridListProps\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\nimport { Checkbox } from './checkbox'\nimport { composeTailwindRenderProps, focusRing } from './primitive'\n\nconst GridList = <T extends object>({ children, ...props }: GridListProps<T>) => (\n  <GridListPrimitive\n    {...props}\n    className={composeTailwindRenderProps(props.className, 'relative overflow-auto rounded-lg border')}\n  >\n    {children}\n  </GridListPrimitive>\n)\n\nconst itemStyles = tv({\n  extend: focusRing,\n  base: 'relative -mb-px flex cursor-default select-none gap-3 border-y px-3 py-2 text-sm text-fg -outline-offset-2 first:rounded-t-md first:border-t-0 last:mb-0 last:rounded-b-md last:border-b-0',\n  variants: {\n    isSelected: {\n      false: 'hover:bg-secondary',\n      true: 'z-20 border-y-primary/50 bg-primary/20'\n    },\n    isDisabled: {\n      true: 'z-10 text-muted-fg forced-colors:text-[GrayText]'\n    }\n  }\n})\n\nconst GridListItem = ({ children, ...props }: GridListItemProps) => {\n  let textValue = typeof children === 'string' ? children : undefined\n  return (\n    <GridListItemPrimitive textValue={textValue} {...props} className={itemStyles}>\n      {({ selectionMode, selectionBehavior, allowsDragging }) => (\n        <>\n          {/* Add elements for drag and drop and selection. */}\n          {allowsDragging && <Button slot=\"drag\">≡</Button>}\n          {selectionMode === 'multiple' && selectionBehavior === 'toggle' && <Checkbox slot=\"selection\" />}\n          {children}\n        </>\n      )}\n    </GridListItemPrimitive>\n  )\n}\n\nexport { GridList, GridListItem }\n",
    "type": "ui"
  },
  "command": {
    "component": "@/components/ui/command",
    "raw": "'use client'\nimport { IconSearch } from '@irsyadadl/paranoid'\nimport { Command as CommandPrimitive } from 'cmdk'\nimport * as React from 'react'\nimport { Button, Dialog, Modal } from 'react-aria-components'\nimport { twJoin } from 'tailwind-merge'\nimport { ModalOverlay, ModalOverlayProps } from './modal'\nimport { cn, useMediaQuery } from './primitive'\n\ntype CommandComponent = React.ForwardRefExoticComponent<\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive> & React.RefAttributes<HTMLElement>\n>\n\nconst Command: CommandComponent = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      [\n        'flex h-svh w-full flex-col overflow-hidden rounded-md bg-popover text-popover-fg sm:h-full',\n        '[&_[cmdk-group-heading]]:ml-1 [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-fg [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-0 [&_[cmdk-input-wrapper]_svg]:size-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:py-[0.70rem] [&_[cmdk-item]]:pl-3 [&_[cmdk-item]]:pr-4 [&_[cmdk-item]_svg]:mr-2 [&_[cmdk-item]_svg]:size-[1.10rem]'\n      ],\n      className\n    )}\n    {...props}\n  />\n)) as any\nCommand.displayName = CommandPrimitive.displayName\n\ninterface CommandModalProps extends ModalOverlayProps {\n  children: React.ReactNode\n}\n\nconst CommandModal = ({ children, ...props }: CommandModalProps) => {\n  const isDesktop = useMediaQuery('(min-width: 1024px)')\n  return (\n    <ModalOverlay {...props}>\n      <Modal\n        className={twJoin(\n          'fixed bottom-0 left-[50%] top-auto z-50 grid h-[calc(100vh-35%)] w-full max-w-full translate-x-[-50%] gap-4 overflow-hidden rounded-t-xl bg-background p-0 shadow-lg ring-1 ring-border sm:bottom-auto sm:top-[6rem] sm:h-auto sm:w-full sm:max-w-2xl sm:rounded-xl',\n          'sm:entering:slide-in-from-bottom-auto entering:duration-300 entering:animate-in entering:fade-in-0 entering:slide-in-from-bottom-1/2 entering:slide-in-from-left-1/2 entering:[transition-timing-function:ease-out] sm:entering:duration-300 sm:entering:slide-in-from-top-[2rem]',\n          'exiting:duration-300 exiting:animate-out exiting:fade-out-0 exiting:slide-out-to-bottom-1/2 exiting:slide-out-to-left-1/2 exiting:[transition-timing-function:ease] sm:exiting:slide-out-to-top-[4rem]'\n        )}\n      >\n        <Dialog>\n          {({ close }) => (\n            <>\n              <Command>{children}</Command>\n              <Button\n                autoFocus={!isDesktop}\n                onPress={close}\n                className=\"absolute right-3 top-3.5 rounded-full border bg-secondary/50 px-2.5 py-0.5 text-xs transition-opacity data-[state=open]:bg-secondary data-[state=open]:text-muted-fg focus:border-fg/70 focus:outline-none focus:ring-2 focus:ring-ring disabled:pointer-events-none\"\n              >\n                Esc\n              </Button>\n            </>\n          )}\n        </Dialog>\n      </Modal>\n    </ModalOverlay>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <div className=\"flex items-center border-b px-3\">\n      <IconSearch className=\"mr-2 size-5 shrink-0 opacity-50\" />\n      <CommandPrimitive.Input\n        ref={ref}\n        className={cn(\n          'flex h-11 w-full rounded-md bg-transparent py-3 text-base outline-none placeholder:text-muted-fg focus:outline-none disabled:cursor-not-allowed disabled:opacity-50',\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn('overflow-y-auto overflow-x-hidden px-2 md:max-h-[456px]', className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => <CommandPrimitive.Empty ref={ref} className=\"py-6 text-center text-sm text-muted-fg\" {...props} />)\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandSection = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      'overflow-hidden px-0 py-2 text-fg [&_[cmdk-group-heading]]:ml-0 [&_[cmdk-group-heading]]:select-none [&_[cmdk-group-heading]]:py-2 [&_[cmdk-group-heading]]:text-[0.8rem] [&_[cmdk-group-heading]]:text-muted-fg',\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandSection.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator ref={ref} className={cn('-mx-1 h-px bg-border', className)} {...props} />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      'relative flex cursor-default select-none items-center rounded-lg px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected=true]:bg-secondary data-[selected=true]:text-secondary-fg data-[disabled=true]:opacity-50 [&[data-selected=true]_svg]:text-secondary-fg [&_svg]:shrink-0 [&_svg]:text-muted-fg',\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandKeyboard = ({ className, ...props }: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        '-mr-1 ml-auto hidden items-center gap-1 px-1 opacity-60 lg:inline-flex',\n        '[&_kbd]:inline-grid [&_kbd]:min-h-5 [&_kbd]:min-w-5 [&_kbd]:place-content-center [&_kbd]:rounded [&_kbd]:bg-background [&_kbd]:font-sans [&_kbd]:text-[.75rem] [&_kbd]:uppercase [&_kbd]:ring-1 [&_kbd]:ring-fg/10',\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandKeyboard.displayName = 'CommandShortcut'\n\nexport {\n  Command,\n  CommandEmpty,\n  CommandInput,\n  CommandItem,\n  CommandKeyboard,\n  CommandList,\n  CommandModal,\n  CommandSection,\n  CommandSeparator\n}\n",
    "type": "ui"
  },
  "dropdown": {
    "component": "@/components/ui/dropdown",
    "raw": "'use client'\nimport { IconCheck } from '@irsyadadl/paranoid'\nimport {\n  Collection,\n  composeRenderProps,\n  Header,\n  ListBoxItem as ListBoxItemPrimitive,\n  type ListBoxItemProps,\n  Section,\n  type SectionProps\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nconst dropdownItemStyles = tv({\n  base: [\n    'group flex cursor-default select-none items-center gap-x-1.5 rounded-md py-2 pl-2.5 pr-1 text-base outline outline-0 forced-color-adjust-none lg:text-sm',\n    '[&_[data-slot=avatar]]:-mr-0.5 [&_[data-slot=avatar]]:size-6 sm:[&_[data-slot=avatar]]:size-5',\n    '[&_svg]:size-4',\n    'has-submenu:open:data-[danger=true]:bg-danger/20 has-submenu:open:data-[danger=true]:text-danger',\n    'has-submenu:open:bg-primary has-submenu:open:text-primary-fg'\n  ],\n  variants: {\n    isDisabled: {\n      false: 'text-fg',\n      true: 'text-muted-fg forced-colors:text-[GrayText]'\n    },\n    isFocused: {\n      false: 'data-[danger=true]:text-danger',\n      true: [\n        'bg-primary text-primary-fg forced-colors:bg-[Highlight] forced-colors:text-[HighlightText]',\n        'data-[danger=true]:bg-danger data-[danger=true]:text-danger-fg'\n      ]\n    }\n  },\n  compoundVariants: [\n    {\n      isFocused: false,\n      isOpen: true,\n      className: 'bg-gray-100 dark:bg-zinc-700/60'\n    }\n  ]\n})\n\nconst DropdownSection = <T extends object>(props: DropdownSectionProps<T>) => {\n  return (\n    <Section className=\"after:block after:h-[5px] after:content-[''] first:-mt-[5px]\">\n      <Header className=\"dsh mb-0.5 px-2 text-sm text-muted-fg\">{props.title}</Header>\n      <Collection items={props.items}>{props.children}</Collection>\n    </Section>\n  )\n}\n\nconst DropdownItem = (props: ListBoxItemProps) => {\n  let textValue = props.textValue || (typeof props.children === 'string' ? props.children : undefined)\n  return (\n    <ListBoxItemPrimitive\n      {...props}\n      textValue={textValue}\n      className={composeRenderProps(props.className, (className, renderProps) =>\n        dropdownItemStyles({ ...renderProps, className })\n      )}\n    >\n      {composeRenderProps(props.children, (children, { isSelected }) => (\n        <>\n          <span className=\"flex flex-1 items-center gap-2 truncate font-normal group-selected:font-semibold\">\n            {children}\n          </span>\n          <span className=\"flex w-5 items-center\">{isSelected && <IconCheck className=\"h-4 w-4\" />}</span>\n        </>\n      ))}\n    </ListBoxItemPrimitive>\n  )\n}\n\ninterface DropdownSectionProps<T> extends SectionProps<T> {\n  title?: string\n}\n\n// Note: This is not exposed component, but it's used in other components to render dropdowns.\nexport { DropdownItem, dropdownItemStyles, DropdownSection, type DropdownSectionProps }\n",
    "type": "ui"
  },
  "avatar": {
    "component": "@/components/ui/avatar",
    "raw": "'use client'\nimport React from 'react'\nimport { cn } from './primitive'\n\ntype AvatarProps = {\n  src?: string | null\n  square?: boolean\n  initials?: string\n  alt?: string\n  className?: string\n}\n\nconst Avatar = ({\n  src = null,\n  square = false,\n  initials,\n  alt = '',\n  className,\n  ...props\n}: AvatarProps & React.ComponentPropsWithoutRef<'span'>) => {\n  return (\n    <span\n      data-slot=\"avatar\"\n      {...props}\n      className={cn(\n        // Basic layout\n        'inline-grid shrink-0 bg-secondary align-middle [--avatar-radius:20%] [--ring-opacity:20%] *:col-start-1 *:row-start-1',\n        'loo2ppvkxrcah38e outline outline-1 -outline-offset-1 outline-black/[--ring-opacity] dark:outline-white/[--ring-opacity]',\n        // Add the correct border radius\n        square ? 'rounded-[--avatar-radius] *:rounded-[--avatar-radius]' : 'rounded-full *:rounded-full',\n        'size-8',\n        className\n      )}\n    >\n      {initials && (\n        <svg\n          className=\"select-none fill-current text-[48px] font-medium uppercase\"\n          viewBox=\"0 0 100 100\"\n          aria-hidden={alt ? undefined : 'true'}\n        >\n          {alt && <title>{alt}</title>}\n          <text x=\"50%\" y=\"50%\" alignmentBaseline=\"middle\" dominantBaseline=\"middle\" textAnchor=\"middle\" dy=\".125em\">\n            {initials}\n          </text>\n        </svg>\n      )}\n      {src && <img src={src} alt={alt} />}\n    </span>\n  )\n}\n\nexport { Avatar }\n",
    "type": "ui"
  },
  "combo-box": {
    "component": "@/components/ui/combo-box",
    "raw": "'use client'\nimport { IconChevronLgDown } from '@irsyadadl/paranoid'\nimport React from 'react'\nimport {\n  ComboBox as ComboboxPrimitive,\n  type ComboBoxProps as ComboboxPrimitiveProps,\n  type ValidationResult\n} from 'react-aria-components'\nimport { Button } from './button'\nimport { DropdownItem, DropdownSection } from './dropdown'\nimport { Description, FieldError, FieldGroup, Input, Label } from './field'\nimport { ListBoxPicker } from './list-box'\nimport { PopoverPicker } from './popover'\nimport { ctr } from './primitive'\n\ninterface ComboBoxProps<T extends object> extends Omit<ComboboxPrimitiveProps<T>, 'children'> {\n  label?: string\n  placeholder?: string\n  description?: string | null\n  errorMessage?: string | ((validation: ValidationResult) => string)\n  children: React.ReactNode | ((item: T) => React.ReactNode)\n}\n\nconst ComboBox = <T extends object>({\n  label,\n  description,\n  errorMessage,\n  children,\n  placeholder,\n  items,\n  ...props\n}: ComboBoxProps<T>) => {\n  return (\n    <ComboboxPrimitive\n      menuTrigger=\"focus\"\n      {...props}\n      className={ctr(props.className, 'group w-full flex flex-col gap-1')}\n    >\n      <Label>{label}</Label>\n      <FieldGroup className=\"pl-0\">\n        <Input className=\"pl-2.5\" placeholder={placeholder} />\n        <Button\n          size=\"square-petite\"\n          appearance=\"plain\"\n          className=\"h-7 w-8 rounded outline-offset-0 active:bg-transparent hover:bg-transparent pressed:bg-transparent\"\n        >\n          <IconChevronLgDown\n            aria-hidden\n            className=\"text-muted-fg transition duration-200 group-open:rotate-180 group-open:text-fg\"\n          />\n        </Button>\n      </FieldGroup>\n      {description && <Description>{description}</Description>}\n      <FieldError>{errorMessage}</FieldError>\n      <PopoverPicker>\n        <ListBoxPicker items={items}>{children}</ListBoxPicker>\n      </PopoverPicker>\n    </ComboboxPrimitive>\n  )\n}\n\nconst ComboBoxItem = DropdownItem\nconst ComboBoxSection = DropdownSection\n\nexport { ComboBox, ComboBoxItem, ComboBoxSection, type ComboBoxProps }\n",
    "type": "ui"
  },
  "search-field": {
    "component": "@/components/ui/search-field",
    "raw": "'use client'\n\nimport { IconSearch, IconX } from '@irsyadadl/paranoid'\nimport {\n  SearchField as SearchFieldPrimitive,\n  type SearchFieldProps as SearchFieldPrimitiveProps,\n  type ValidationResult\n} from 'react-aria-components'\nimport { Button } from './button'\nimport { Description, FieldError, FieldGroup, Input, Label } from './field'\nimport { ctr } from './primitive'\n\nexport interface SearchFieldProps extends SearchFieldPrimitiveProps {\n  label?: string\n  placeholder?: string\n  description?: string\n  errorMessage?: string | ((validation: ValidationResult) => string)\n}\n\nexport function SearchField({ placeholder = 'Search', label, description, errorMessage, ...props }: SearchFieldProps) {\n  return (\n    <SearchFieldPrimitive {...props} className={ctr(props.className, 'group flex min-w-[40px] flex-col gap-1')}>\n      {label && <Label>{label}</Label>}\n      <FieldGroup>\n        <IconSearch\n          aria-hidden\n          className=\"ml-2 size-4 shrink-0 text-muted-fg group-disabled:text-muted-fg/50 forced-colors:text-[ButtonText] forced-colors:group-disabled:text-[GrayText]\"\n        />\n        <Input placeholder={placeholder} className=\"[&::-webkit-search-cancel-button]:hidden\" />\n        <Button\n          size=\"square-petite\"\n          appearance=\"plain\"\n          className=\"mr-1 size-8 text-muted-fg group-empty:invisible hover:bg-transparent pressed:text-fg\"\n        >\n          <IconX aria-hidden className=\"size-4\" />\n        </Button>\n      </FieldGroup>\n      {description && <Description>{description}</Description>}\n      <FieldError>{errorMessage}</FieldError>\n    </SearchFieldPrimitive>\n  )\n}\n",
    "type": "ui"
  },
  "multi-select": {
    "component": "@/components/ui/multi-select",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { IconCircleXFill } from '@irsyadadl/paranoid'\nimport { Command, CommandGroup, CommandInput, CommandItem, CommandList } from 'cmdk'\nimport { Badge } from './badge'\n\ninterface ItemProps {\n  label: string\n  value: string\n}\n\ninterface Props {\n  items: ItemProps[]\n  placeholder?: string\n  selected: ItemProps[]\n  setSelected: React.Dispatch<React.SetStateAction<ItemProps[]>>\n  max?: number\n}\n\nexport function MultiSelect({ items, placeholder = 'Select items...', max = 5, selected, setSelected }: Props) {\n  const inputRef = React.useRef<HTMLInputElement>(null)\n  const [open, setOpen] = React.useState(false)\n  const [inputValue, setInputValue] = React.useState('')\n  const handleUnselect = React.useCallback((item: ItemProps) => {\n    setSelected((prev) => prev.filter((s) => s.value !== item.value))\n  }, [])\n\n  const handleKeyDown = React.useCallback((e: React.KeyboardEvent<HTMLDivElement>) => {\n    const input = inputRef.current\n    if (input) {\n      if (e.key === 'Delete' || e.key === 'Backspace') {\n        if (input.value === '') {\n          setSelected((prev) => {\n            const newSelected = [...prev]\n            newSelected.pop()\n            return newSelected\n          })\n        }\n      }\n\n      if (e.key === 'Escape') {\n        input.blur()\n      }\n    }\n  }, [])\n  const selectables = items.filter((item) => !selected.includes(item))\n  React.useEffect(() => {\n    if (selected.length >= max) {\n      setOpen(false)\n    }\n  }, [selected, max])\n  return (\n    <Command onKeyDown={handleKeyDown} className=\"overflow-visible bg-transparent\">\n      <div className=\"group rounded-md border border-input bg-background px-2 py-[0.55rem] text-sm transition duration-200 focus-within:border-primary/70 focus-within:ring-[0.20rem] focus-within:ring-primary/20 focus-within:ring-offset-0\">\n        <div className=\"flex flex-wrap gap-1\">\n          {selected.map((item, index) => {\n            return (\n              <Badge key={index} className=\"inline-flex items-center rounded-sm px-1\">\n                <span className=\"text-xs\">{item.label}</span>\n                <button\n                  aria-label={`Remove ${item.label} option`}\n                  aria-roledescription=\"button to remove option\"\n                  type=\"button\"\n                  className=\"inline-grid size-4 place-content-center rounded-full border border-transparent focus:border-fg focus:text-fg focus:outline-none\"\n                  onKeyDown={(e) => {\n                    if (e.key === 'Enter') {\n                      handleUnselect(item)\n                    }\n                  }}\n                  onMouseDown={(e) => {\n                    e.preventDefault()\n                    e.stopPropagation()\n                  }}\n                  onClick={() => handleUnselect(item)}\n                >\n                  <span className=\"sr-only\">Remove {item.label} option</span>\n                  <IconCircleXFill className=\"size-3.5 hover:text-fg\" />\n                </button>\n              </Badge>\n            )\n          })}\n\n          <CommandInput\n            ref={inputRef}\n            value={inputValue}\n            onValueChange={setInputValue}\n            onBlur={() => setOpen(false)}\n            onFocus={() => {\n              if (selected.length < max) {\n                setOpen(true)\n              }\n            }}\n            placeholder={selected.length >= max ? 'Remove one to select more' : placeholder}\n            className=\"ml-0.5 flex-1 bg-transparent outline-none placeholder:text-muted-fg\"\n          />\n        </div>\n      </div>\n      <div className=\"relative\">\n        <CommandList>\n          {open && selectables.length > 0 ? (\n            <div className=\"absolute top-0 z-10 mt-2 max-h-72 w-full overflow-y-auto overflow-x-hidden rounded-lg border bg-popover p-1 text-popover-fg shadow-md outline-none animate-in\">\n              <CommandGroup className=\"h-full overflow-auto p-0\">\n                {selectables.map((item) => (\n                  <CommandItem\n                    disabled={selected.includes(item)}\n                    key={item.value}\n                    onMouseDown={(e) => {\n                      e.preventDefault()\n                      e.stopPropagation()\n                    }}\n                    onSelect={(value) => {\n                      setInputValue('')\n                      setSelected((prev) => [...prev, item])\n                    }}\n                    className=\"relative flex w-full cursor-pointer justify-between rounded-md p-2 text-sm transition-colors data-[selected=true]:bg-primary data-[selected=true]:text-primary-fg\"\n                  >\n                    {item.label}\n                  </CommandItem>\n                ))}\n              </CommandGroup>\n            </div>\n          ) : null}\n        </CommandList>\n      </div>\n    </Command>\n  )\n}\n",
    "type": "ui"
  },
  "dialog": {
    "component": "@/components/ui/dialog",
    "raw": "'use client'\nimport { Dialog as DialogPrimitive, type DialogProps } from 'react-aria-components'\nimport { twMerge } from 'tailwind-merge'\n\nconst Dialog = ({ className, ...props }: DialogProps) => {\n  return (\n    <DialogPrimitive\n      {...props}\n      className={twMerge('relative max-h-[inherit] overflow-y-auto p-4 outline-0 [[data-placement]>&]:p-4', className)}\n    />\n  )\n}\n\nexport { Dialog }\n",
    "type": "ui"
  },
  "menu": {
    "component": "@/components/ui/menu",
    "raw": "'use client'\n\nimport { IconBulletFill, IconCheck, IconChevronLgRight } from '@irsyadadl/paranoid'\nimport { clsx } from 'clsx'\nimport * as React from 'react'\nimport {\n  Button,\n  type ButtonProps,\n  composeRenderProps,\n  Header,\n  Keyboard,\n  MenuItem as MenuItemPrimitive,\n  type MenuItemProps as MenuItemPrimitiveProps,\n  Menu as MenuPrimitive,\n  type MenuProps,\n  MenuTrigger as MenuTriggerPrimitive,\n  OverlayArrow,\n  Popover,\n  PopoverContext,\n  type PopoverProps,\n  Section,\n  Separator,\n  type SeparatorProps,\n  SubmenuTrigger as SubmenuTriggerPrimitive,\n  useSlottedContext\n} from 'react-aria-components'\nimport { VariantProps } from 'tailwind-variants'\nimport { dropdownItemStyles } from './dropdown'\nimport { cn } from './primitive'\n\nconst Menu = MenuTriggerPrimitive\nconst MenuTrigger = ({ className, ...props }: ButtonProps) => (\n  <Button\n    aria-label=\"Open Menu\"\n    className={cn(\n      'inline text-left focus:outline-none focus-visible:ring-1 focus-visible:ring-primary-500 pressed:outline-none',\n      className\n    )}\n    {...props}\n  />\n)\n\nconst SubmenuTrigger = SubmenuTriggerPrimitive\n\nconst MenuSection = Section\n\nexport interface MenuContentProps<T> extends Omit<PopoverProps, 'children' | 'style'>, MenuProps<T> {\n  className?: string\n  popoverClassName?: string\n  showArrow?: boolean\n}\n\nconst MenuContent = <T extends object>({\n  className,\n  showArrow = false,\n  popoverClassName,\n  offset = 4,\n  ...props\n}: MenuContentProps<T>) => {\n  let popoverContext = useSlottedContext(PopoverContext)!\n  let isSubmenu = popoverContext?.trigger === 'SubmenuTrigger'\n  let currentOffset = showArrow ? 12 : 8\n  currentOffset = isSubmenu ? currentOffset - 6 : currentOffset\n  return (\n    <Popover\n      offset={currentOffset}\n      className={cn(\n        'z-50 min-w-40 rounded-xl border bg-popover text-popover-fg outline-none entering:animate-in exiting:animate-out entering:fade-in-0 exiting:fade-out-0 exiting:zoom-out-95 data-[placement=bottom]:slide-in-from-top-2 data-[placement=left]:slide-in-from-right-2 data-[placement=right]:slide-in-from-left-2 data-[placement=top]:slide-in-from-bottom-2',\n        popoverClassName\n      )}\n      {...props}\n    >\n      {showArrow && (\n        <OverlayArrow className=\"group\">\n          <svg\n            width={12}\n            height={12}\n            viewBox=\"0 0 12 12\"\n            className=\"block fill-popover stroke-border group-placement-left:-rotate-90 group-placement-right:rotate-90 group-placement-bottom:rotate-180 forced-colors:fill-[Canvas] forced-colors:stroke-[ButtonBorder]\"\n          >\n            <path d=\"M0 0 L6 6 L12 0\" />\n          </svg>\n        </OverlayArrow>\n      )}\n      <MenuPrimitive\n        className={cn(\n          'z32kk',\n          'max-h-[inherit] overflow-auto rounded-xl p-1 outline outline-0 [clip-path:inset(0_0_0_0_round_calc(var(--radius)-2px))]',\n          className\n        )}\n        {...props}\n      />\n    </Popover>\n  )\n}\n\ninterface MenuItemProps extends Omit<MenuItemPrimitiveProps, 'isDanger'>, VariantProps<typeof dropdownItemStyles> {\n  inset?: boolean\n  isDanger?: boolean\n}\n\nconst MenuItem = ({ className, isDanger = false, inset, children, ...props }: MenuItemProps) => (\n  <MenuItemPrimitive\n    className={composeRenderProps(className, (className, renderProps) =>\n      dropdownItemStyles({\n        ...renderProps,\n        className: cn(inset && 'pl-8', className)\n      })\n    )}\n    data-danger={isDanger ? 'true' : undefined}\n    {...props}\n  >\n    {/*<MenuItemPrimitive className={cn(menuItemVariants({ intent }), className, inset && 'pl-8')} {...props}>*/}\n    {(values) => (\n      <>\n        {typeof children === 'function' ? children(values) : children}\n        {values.hasSubmenu && <IconChevronLgRight className=\"gpfw ml-auto size-3.5\" />}\n      </>\n    )}\n  </MenuItemPrimitive>\n)\n\nexport interface MenuHeaderProps extends React.ComponentProps<typeof Header> {\n  inset?: boolean\n  separator?: boolean\n}\n\nconst MenuHeader = ({ className, inset, separator = false, ...props }: MenuHeaderProps) => (\n  <Header\n    className={cn(\n      'px-2 py-1.5 text-base font-semibold sm:text-sm',\n      inset && 'pl-8',\n      separator && '-mx-1 mb-1 border-b border-b-border px-3 pb-[0.625rem]',\n      className\n    )}\n    {...props}\n  />\n)\n\nconst MenuSeparator = ({ className, ...props }: SeparatorProps) => (\n  <Separator className={cn('-mx-1 my-1 h-px bg-muted', className)} {...props} />\n)\n\ninterface MenuKeyboardProps extends React.HTMLAttributes<HTMLElement> {\n  keys: string | string[]\n}\n\nconst MenuKeyboard = ({ keys, className, ...props }: MenuKeyboardProps) => {\n  return (\n    <Keyboard\n      className={cn('-mr-1 ml-auto hidden items-center gap-[0.170rem] px-1 lg:inline-flex', className)}\n      {...props}\n    >\n      {(Array.isArray(keys) ? keys : keys.split('')).map((char, index) => (\n        <kbd\n          key={index}\n          className={clsx([\n            'min-w-[2ch] text-center font-sans capitalize text-muted-fg group-focus:text-fg forced-colors:group-focus:text-[HighlightText]',\n            'inline-grid min-h-5 min-w-5 place-content-center rounded bg-background font-sans text-[.75rem] uppercase text-fg ring-1 ring-fg/10 group-focus:opacity-60',\n            // Make sure key names that are longer than one character (like \"Tab\") have extra space\n            index > 0 && char.length > 1 && 'pl-1'\n          ])}\n        >\n          {char}\n        </kbd>\n      ))}\n    </Keyboard>\n  )\n}\n\nconst MenuCheckboxItem = ({ className, children, ...props }: MenuItemProps) => (\n  <MenuItem className={className} {...props}>\n    {(values) => (\n      <>\n        <span className=\"absolute right-2 flex size-4 items-center justify-center\">\n          {values.isSelected && <IconCheck className=\"size-4\" />}\n        </span>\n\n        {typeof children === 'function' ? children(values) : children}\n      </>\n    )}\n  </MenuItem>\n)\n\nconst MenuRadioItem = ({ className, children, ...props }: MenuItemProps) => (\n  <MenuItem className={className} {...props}>\n    {(values) => (\n      <>\n        <span className=\"absolute right-2 flex size-2 items-center justify-center\">\n          {values.isSelected && <IconBulletFill className=\"size-2\" />}\n        </span>\n        {typeof children === 'function' ? children(values) : children}\n      </>\n    )}\n  </MenuItem>\n)\n\nexport {\n  Menu,\n  MenuCheckboxItem,\n  MenuContent,\n  MenuHeader,\n  MenuItem,\n  MenuItemPrimitive,\n  MenuKeyboard,\n  MenuPrimitive,\n  MenuRadioItem,\n  MenuSection,\n  MenuSeparator,\n  MenuTrigger,\n  SubmenuTrigger,\n  type MenuItemProps\n}\n",
    "type": "ui"
  },
  "progress-bar": {
    "component": "@/components/ui/progress-bar",
    "raw": "'use client'\n\nimport { motion } from 'framer-motion'\nimport {\n  ProgressBar as ProgressBarPrimitive,\n  type ProgressBarProps as ProgressBarPrimitiveProps\n} from 'react-aria-components'\nimport { Label } from './field'\nimport { ctr } from './primitive'\n\nexport interface ProgressBarProps extends ProgressBarPrimitiveProps {\n  label?: string\n}\n\nexport function ProgressBar({ label, ...props }: ProgressBarProps) {\n  return (\n    <ProgressBarPrimitive {...props} className={ctr(props.className, 'flex flex-col gap-1')}>\n      {({ percentage, valueText, isIndeterminate }) => (\n        <>\n          <div className=\"flex justify-between gap-2\">\n            <Label>{label}</Label>\n            <span className=\"text-sm text-muted-fg\">{valueText}</span>\n          </div>\n          <div className=\"relative h-2 min-w-64 overflow-hidden rounded-full bg-secondary outline outline-1 -outline-offset-1 outline-transparent\">\n            {!isIndeterminate ? (\n              <motion.div\n                className=\"absolute left-0 top-0 h-full rounded-full bg-primary forced-colors:bg-[Highlight]\"\n                initial={{ width: '0%' }}\n                animate={{ width: `${percentage}%` }}\n                transition={{ duration: 0.5, ease: 'easeInOut' }}\n              />\n            ) : (\n              <motion.div\n                className=\"absolute top-0 h-full rounded-full bg-primary forced-colors:bg-[Highlight]\"\n                initial={{ left: '0%', width: '40%' }}\n                animate={{ left: ['0%', '100%', '0%'] }}\n                transition={{\n                  repeat: Infinity,\n                  duration: 2,\n                  ease: 'easeInOut'\n                }}\n              />\n            )}\n          </div>\n        </>\n      )}\n    </ProgressBarPrimitive>\n  )\n}\n",
    "type": "ui"
  },
  "badge": {
    "component": "@/components/ui/badge",
    "raw": "'use client'\n\nimport React from 'react'\nimport { tv, type VariantProps } from 'tailwind-variants'\n\nconst badgeIntents = {\n  primary:\n    'ring-primary-300 dark:ring-primary-400/20 bg-primary-500/15 text-primary-700 hover:bg-primary-500/25 dark:text-primary-400 dark:hover:bg-primary-500/25',\n  secondary:\n    'ring-zinc-300 dark:ring-zinc-400/20 bg-zinc-600/10 text-zinc-700 hover:bg-zinc-600/20 dark:bg-white/5 dark:text-zinc-400 dark:hover:bg-white/10',\n  success:\n    'ring-emerald-300 dark:ring-emerald-400/20 bg-emerald-400/20 text-emerald-700 hover:bg-emerald-400/30 dark:bg-emerald-400/10 dark:text-emerald-300 dark:hover:bg-emerald-400/15',\n  info: 'ring-lime-300 dark:ring-lime-400/20 bg-lime-500/15 text-lime-700 hover:bg-lime-500/25 dark:bg-lime-500/10 dark:text-lime-300 dark:hover:bg-lime-500/20',\n  warning:\n    'ring-amber-300 dark:ring-amber-400/20 bg-amber-400/20 text-amber-700 hover:bg-amber-400/30 dark:bg-amber-400/10 dark:text-amber-400 dark:hover:bg-amber-400/15',\n  danger:\n    'ring-red-300 dark:ring-red-400/20 bg-red-500/15 text-red-700 hover:bg-red-500/25 dark:bg-red-500/10 dark:text-red-400 dark:hover:bg-red-500/20',\n  light:\n    'ring-zinc-300 dark:ring-white bg-white hover:bg-zinc-100 dark:hover:bg-zinc-200 dark:ring-inset text-zinc-900 dark:text-zinc-900',\n  dark: 'bg-zinc-800 hover:bg-zinc-800/90 ring-inset ring-zinc-800 text-white dark:ring-zinc-600',\n  'light/dark':\n    'bg-white ring-zinc-200 text-zinc-900 dark:text-white dark:bg-zinc-800 dark:hover:bg-zinc-800/80 dark:ring-zinc-600'\n}\n\nconst badgeStyles = tv({\n  base: 'inline-flex items-center gap-x-1.5 py-0.5 text-xs/5 font-medium ring-1 ring-white/10 dark:ring-inset forced-colors:outline [&_svg]:size-3.5',\n  variants: {\n    intent: { ...badgeIntents },\n    shape: { square: 'rounded-md px-1.5', circle: 'px-2 rounded-full' }\n  },\n  defaultVariants: {\n    intent: 'primary',\n    shape: 'square'\n  }\n})\n\ninterface BadgeProps extends React.HTMLAttributes<HTMLDivElement>, VariantProps<typeof badgeStyles> {\n  className?: string\n  children: React.ReactNode\n}\n\nfunction Badge({ children, intent, shape, className, ...props }: BadgeProps) {\n  return (\n    <span {...props} className={badgeStyles({ intent, shape, className })}>\n      {children}\n    </span>\n  )\n}\n\nexport { Badge, badgeIntents, badgeStyles }\n",
    "type": "ui"
  },
  "toggle-button": {
    "component": "@/components/ui/toggle-button",
    "raw": "'use client'\n\nimport { composeRenderProps, ToggleButton as ToggleButtonPrimitive, ToggleButtonProps } from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\nimport { focusRing } from './primitive'\n\nlet styles = tv({\n  extend: focusRing,\n  base: [\n    'inline-flex h-10 items-center justify-center whitespace-nowrap rounded-md px-4 py-2 text-base font-medium ring-offset-background transition-colors focus:outline-none focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-1 pressed:outline-none disabled:pointer-events-none disabled:opacity-50 sm:text-sm',\n    '[&_svg]:size-4'\n  ],\n  variants: {\n    isSelected: {\n      false: 'hover:bg-secondary pressed:bg-tertiary forced-colors:!bg-[ButtonFace] forced-colors:!text-[ButtonText]',\n      true: 'bg-secondary hover:bg-secondary/80 pressed:bg-secondary/70 forced-colors:!bg-[Highlight] forced-colors:!text-[HighlightText]'\n    },\n    isDisabled: {\n      true: 'border-black/5 bg-gray-100 text-gray-300 dark:border-white/5 dark:bg-zinc-800 dark:text-zinc-600 forced-colors:border-[GrayText] forced-colors:!bg-[ButtonFace] forced-colors:!text-[GrayText]'\n    }\n  }\n})\n\nexport function ToggleButton(props: ToggleButtonProps) {\n  return (\n    <ToggleButtonPrimitive\n      {...props}\n      className={composeRenderProps(props.className, (className, renderProps) => styles({ ...renderProps, className }))}\n    />\n  )\n}\n",
    "type": "ui"
  },
  "snippet": {
    "component": "@/components/ui/snippet",
    "raw": "'use client'\n\nimport { IconCheck, IconDuplicate } from '@irsyadadl/paranoid'\nimport { AnimatePresence, motion } from 'framer-motion'\nimport * as React from 'react'\nimport { toast } from 'sonner'\nimport { twMerge } from 'tailwind-merge'\nimport { Button, ButtonProps } from './button'\n\nconst snippetVariants = {\n  hidden: { opacity: 0, scale: 0.5 },\n  visible: { opacity: 1, scale: 1 }\n}\n\ninterface Props extends React.HTMLAttributes<HTMLDivElement> {\n  text: string\n}\n\nconst Snippet: React.FC<Props> = ({ className, text, ...props }) => {\n  const [copied, setCopied] = React.useState(false)\n\n  const handleCopy = async () => {\n    if (navigator.clipboard && window.isSecureContext) {\n      try {\n        await navigator.clipboard.writeText(text)\n        setCopied(true)\n        setTimeout(() => setCopied(false), 2000) // Reset the copied state after 2 seconds\n      } catch (error) {\n        toast.error('Failed to copy to clipboard')\n      }\n    } else {\n      toast.error('Failed to copy to clipboard')\n    }\n  }\n\n  return (\n    <div\n      {...props}\n      className={twMerge(\n        'relative flex items-center justify-between rounded-lg border bg-tertiary py-2.5 pl-3 pr-2.5 font-mono text-sm [&>svg:hover]:text-fg [&>svg]:text-muted-fg [&>svg]:transition [&_svg]:shrink-0',\n        className\n      )}\n    >\n      <span className=\"mr-6\">{text}</span>\n      <Button\n        className=\"size-7 backdrop-blur-lg text-white bg-zinc-800 border hover:bg-zinc-700 border-zinc-700\"\n        aria-label=\"Copy imports statement\"\n        size=\"square-petite\"\n        appearance=\"outline\"\n        onPress={handleCopy}\n      >\n        <AnimatePresence mode=\"wait\" initial={false}>\n          {copied ? (\n            <motion.span key=\"checkmark\" variants={snippetVariants} initial=\"hidden\" animate=\"visible\" exit=\"hidden\">\n              <IconCheck />\n            </motion.span>\n          ) : (\n            <motion.span key=\"copy\" variants={snippetVariants} initial=\"hidden\" animate=\"visible\" exit=\"hidden\">\n              <IconDuplicate />\n            </motion.span>\n          )}\n        </AnimatePresence>\n      </Button>\n    </div>\n  )\n}\n\ninterface CopyButtonProps extends ButtonProps {\n  isCopied?: boolean\n  ariaLabel?: string\n  initialIcon?: React.ReactNode\n  copiedIcon?: React.ReactNode\n}\n\nconst CopyButton = ({ initialIcon, copiedIcon, ariaLabel = 'Copy', isCopied, ...props }: CopyButtonProps) => {\n  return (\n    <Button\n      className=\"size-7 backdrop-blur-lg text-white bg-zinc-800 border hover:bg-zinc-700 border-zinc-700\"\n      aria-label={ariaLabel}\n      size=\"square-petite\"\n      appearance=\"outline\"\n      {...props}\n    >\n      <AnimatePresence mode=\"wait\" initial={false}>\n        {isCopied ? (\n          <motion.span\n            key=\"checkmark-import\"\n            variants={snippetVariants}\n            initial=\"hidden\"\n            animate=\"visible\"\n            exit=\"hidden\"\n          >\n            {copiedIcon ?? <IconCheck />}\n          </motion.span>\n        ) : (\n          <motion.span key=\"copy-import\" variants={snippetVariants} initial=\"hidden\" animate=\"visible\" exit=\"hidden\">\n            {initialIcon ?? <IconDuplicate />}\n          </motion.span>\n        )}\n      </AnimatePresence>\n    </Button>\n  )\n}\n\nexport { CopyButton, Snippet, snippetVariants }\n",
    "type": "ui"
  },
  "number-field": {
    "component": "@/components/ui/number-field",
    "raw": "'use client'\n\nimport { IconChevronDown, IconChevronUp, IconMinus, IconPlus } from '@irsyadadl/paranoid'\nimport {\n  Button,\n  type ButtonProps,\n  NumberField as NumberFieldPrimitive,\n  type NumberFieldProps as NumberFieldPrimitiveProps,\n  type ValidationResult\n} from 'react-aria-components'\nimport { Description, fieldBorderStyles, FieldError, FieldGroup, Input, Label } from './field'\nimport { cn, ctr, useMediaQuery } from './primitive'\n\nexport interface NumberFieldProps extends NumberFieldPrimitiveProps {\n  label?: string\n  description?: string\n  placeholder?: string\n  errorMessage?: string | ((validation: ValidationResult) => string)\n}\n\nexport function NumberField({ label, placeholder, description, errorMessage, ...props }: NumberFieldProps) {\n  const isMobile = useMediaQuery('(max-width: 768px)')\n  return (\n    <NumberFieldPrimitive {...props} className={ctr(props.className, 'group flex flex-col gap-1')}>\n      <Label>{label}</Label>\n      <FieldGroup className=\"group-disabled:bg-secondary\">\n        {(renderProps) => (\n          <>\n            {isMobile ? <StepperButton slot=\"decrement\" className=\"border-r\" /> : null}\n            <Input placeholder={placeholder} />\n            <div\n              className={fieldBorderStyles({\n                ...renderProps,\n                className: 'grid h-10 place-content-center border-s'\n              })}\n            >\n              {isMobile ? (\n                <StepperButton slot=\"increment\" />\n              ) : (\n                <div className=\"flex h-full flex-col\">\n                  <StepperButton slot=\"increment\" emblemType=\"chevron\" className=\"h-5 px-1\" />\n                  <div\n                    className={fieldBorderStyles({\n                      ...renderProps,\n                      className: 'border-b'\n                    })}\n                  />\n                  <StepperButton slot=\"decrement\" emblemType=\"chevron\" className=\"h-5 px-1\" />\n                </div>\n              )}\n            </div>\n          </>\n        )}\n      </FieldGroup>\n      {description && <Description>{description}</Description>}\n      <FieldError>{errorMessage}</FieldError>\n    </NumberFieldPrimitive>\n  )\n}\n\ninterface StepperButtonProps extends ButtonProps {\n  slot: 'increment' | 'decrement'\n  emblemType?: 'chevron' | 'default'\n  className?: string\n}\n\nconst StepperButton = ({ slot, className, emblemType = 'default', ...props }: StepperButtonProps) => {\n  const icon =\n    emblemType === 'chevron' ? (\n      slot === 'increment' ? (\n        <IconChevronUp className=\"size-5\" />\n      ) : (\n        <IconChevronDown className=\"size-5\" />\n      )\n    ) : slot === 'increment' ? (\n      <IconPlus />\n    ) : (\n      <IconMinus />\n    )\n  return (\n    <Button\n      className={cn(\n        'h-10 cursor-default px-2 text-muted-fg pressed:bg-primary pressed:text-primary-fg group-disabled:bg-secondary forced-colors:group-disabled:text-[GrayText]',\n        className\n      )}\n      slot={slot}\n      {...props}\n    >\n      {icon}\n    </Button>\n  )\n}\n",
    "type": "ui"
  },
  "table": {
    "component": "@/components/ui/table",
    "raw": "'use client'\n\nimport { IconChevronDown, IconChevronUp, IconDotGrid2X3 } from '@irsyadadl/paranoid'\nimport {\n  Button,\n  Cell,\n  type CellProps,\n  Collection,\n  Column,\n  type ColumnProps,\n  Row,\n  type RowProps,\n  TableBody as TableBodyPrimitive,\n  type TableBodyProps,\n  TableHeader as TableHeaderPrimitive,\n  type TableHeaderProps,\n  Table as TablePrimitive,\n  type TableProps,\n  useTableOptions\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\nimport { Checkbox } from './checkbox'\nimport { cn } from './primitive'\n\nconst table = tv({\n  slots: {\n    root: 'table w-full caption-bottom border-spacing-0 text-sm outline-none',\n    column: 'whitespace-nowrap px-4 py-3 text-left font-medium outline-none [&:has([slot=selection])]:pr-0',\n    header: 'border-b bg-secondary/50',\n    row: 'tr group relative cursor-default border-b text-fg/70 outline-none ring-primary focus-visible:ring-1 selected:bg-primary/15',\n    cell: 'whitespace-nowrap px-4 py-3 outline-none'\n  }\n})\n\nconst { root, header, column, row, cell } = table()\n\nconst TableBody = <T extends object>(props: TableBodyProps<T>) => (\n  <TableBodyPrimitive {...props} className={cn('[&_.tr:last-child]:border-0')} />\n)\n\nconst Table = ({ children, className, ...props }: TableProps & { className?: string }) => (\n  <div className=\"relative w-full overflow-auto\">\n    <TablePrimitive {...props} className={root({ className })}>\n      {children}\n    </TablePrimitive>\n  </div>\n)\n\nconst TableCell = ({ children, className, ...props }: CellProps & { className?: string }) => (\n  <Cell {...props} className={cell({ className })}>\n    {children}\n  </Cell>\n)\n\nconst TableColumn = ({ children, className, ...props }: ColumnProps & { className?: string }) => (\n  <Column isRowHeader {...props} className={column({ className })}>\n    {({ allowsSorting, sortDirection }) => (\n      <div className=\"flex items-center gap-2\">\n        <>\n          {children}\n          {allowsSorting &&\n            (sortDirection === undefined ? (\n              <div className=\"w-6\"></div>\n            ) : sortDirection === 'ascending' ? (\n              <IconChevronUp />\n            ) : (\n              <IconChevronDown />\n            ))}\n        </>\n      </div>\n    )}\n  </Column>\n)\n\nconst TableHeader = <T extends object>({\n  children,\n  className,\n  columns,\n  ...props\n}: TableHeaderProps<T> & { className?: string }) => {\n  let { selectionBehavior, selectionMode, allowsDragging } = useTableOptions()\n  return (\n    <TableHeaderPrimitive {...props} className={header()}>\n      {allowsDragging && <Column />}\n      {selectionBehavior === 'toggle' && (\n        <Column className=\"pl-4\">{selectionMode === 'multiple' && <Checkbox slot=\"selection\" />}</Column>\n      )}\n      <Collection items={columns}>{children}</Collection>\n    </TableHeaderPrimitive>\n  )\n}\n\nconst TableRow = <T extends object>({\n  children,\n  className,\n  columns,\n  id,\n  ...props\n}: RowProps<T> & { className?: string }) => {\n  let { selectionBehavior, allowsDragging } = useTableOptions()\n  return (\n    <Row\n      id={id}\n      {...props}\n      className={row({\n        className: 'href' in props ? 'cursor-pointer hover:bg-secondary/50' : ''\n      })}\n    >\n      {allowsDragging && (\n        <Cell className=\"ring-primary\">\n          <Button\n            className=\"cursor-pointer bg-transparent p-1.5 text-muted-fg pressed:cursor-grab pressed:text-fg\"\n            slot=\"drag\"\n          >\n            <IconDotGrid2X3 className=\"size-5\" />\n          </Button>\n        </Cell>\n      )}\n      {selectionBehavior === 'toggle' && (\n        <Cell className=\"pl-4\">\n          <span aria-hidden className=\"absolute inset-y-0 left-0 hidden h-full w-0.5 bg-primary group-selected:block\" />\n          <Checkbox slot=\"selection\" />\n        </Cell>\n      )}\n      <Collection items={columns}>{children}</Collection>\n    </Row>\n  )\n}\n\nexport { Table, TableBody, TableCell, TableColumn, TableHeader, TableRow }\n",
    "type": "ui"
  },
  "separator": {
    "component": "@/components/ui/separator",
    "raw": "'use client'\n\nimport { Separator as SeparatorPrimitive, type SeparatorProps } from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nconst styles = tv({\n  base: 'bg-muted forced-colors:bg-[ButtonBorder]',\n  variants: {\n    orientation: {\n      horizontal: 'h-px w-full',\n      vertical: 'w-px'\n    }\n  },\n  defaultVariants: {\n    orientation: 'horizontal'\n  }\n})\n\nexport function Separator(props: SeparatorProps) {\n  return (\n    <SeparatorPrimitive\n      {...props}\n      className={styles({\n        orientation: props.orientation,\n        className: props.className\n      })}\n    />\n  )\n}\n\nexport type { SeparatorProps }\n",
    "type": "ui"
  },
  "button": {
    "component": "@/components/ui/button",
    "raw": "'use client'\n\nimport { Button as ButtonPrimitive, type ButtonProps as ButtonPrimitiveProps } from 'react-aria-components'\nimport { tv, type VariantProps } from 'tailwind-variants'\nimport { cn } from './primitive'\n\nconst buttonStyles = tv({\n  base: [\n    'relative no-underline isolate inline-flex items-center justify-center gap-x-2 border font-medium',\n    'focus:outline-none focus:outline focus:outline-2 focus:outline-offset-2 focus:outline-primary-500',\n    'data-[disabled]:opacity-50',\n    'forced-colors:[--btn-icon:ButtonText] forced-colors:hover:[--btn-icon:ButtonText] [&>[data-slot=icon]]:-mx-0.5 [&>[data-slot=icon]]:my-1 [&>[data-slot=icon]]:size-4 [&>[data-slot=icon]]:shrink-0 [&>[data-slot=icon]]:text-[--btn-icon]'\n  ],\n  variants: {\n    intent: {\n      primary: [\n        'text-white [--btn-bg:theme(colors.primary.600)] [--btn-border:theme(colors.primary.700/90%)] [--btn-hover-overlay:theme(colors.white/10%)]',\n        '[--btn-icon:theme(colors.primary.200)] active:[--btn-icon:theme(colors.primary.300)] hover:[--btn-icon:theme(colors.primary.300)]'\n      ],\n      secondary: [\n        'text-zinc-950 [--btn-bg:white] [--btn-border:theme(colors.zinc.950/10%)] [--btn-hover-overlay:theme(colors.zinc.950/2.5%)] data-[active]:[--btn-border:theme(colors.zinc.950/15%)] data-[hover]:[--btn-border:theme(colors.zinc.950/15%)]',\n        'dark:text-white dark:[--btn-bg:theme(colors.zinc.800)] dark:[--btn-hover-overlay:theme(colors.white/5%)]',\n        '[--btn-icon:theme(colors.zinc.500)] data-[active]:[--btn-icon:theme(colors.zinc.700)] data-[hover]:[--btn-icon:theme(colors.zinc.700)] dark:[--btn-icon:theme(colors.zinc.500)] dark:data-[active]:[--btn-icon:theme(colors.zinc.400)] dark:data-[hover]:[--btn-icon:theme(colors.zinc.400)]'\n      ],\n      success: [\n        'text-white [--btn-bg:theme(colors.emerald.600)] [--btn-border:theme(colors.emerald.700/90%)] [--btn-hover-overlay:theme(colors.white/10%)]',\n        '[--btn-icon:theme(colors.white/60%)] active:[--btn-icon:theme(colors.white/80%)] hover:[--btn-icon:theme(colors.white/80%)]'\n      ],\n      'light/dark': [\n        'text-white [--btn-bg:theme(colors.zinc.900)] [--btn-border:theme(colors.zinc.950/90%)] [--btn-hover-overlay:theme(colors.white/10%)]',\n        'dark:text-zinc-950 dark:[--btn-bg:white] dark:[--btn-hover-overlay:theme(colors.zinc.950/5%)]',\n        '[--btn-icon:theme(colors.zinc.400)] active:[--btn-icon:theme(colors.zinc.300)] hover:[--btn-icon:theme(colors.zinc.300)] dark:[--btn-icon:theme(colors.zinc.500)] dark:active:[--btn-icon:theme(colors.zinc.400)] dark:hover:[--btn-icon:theme(colors.zinc.400)]'\n      ],\n      dark: [\n        'text-white [--btn-bg:theme(colors.zinc.900)] [--btn-border:theme(colors.zinc.950/90%)] [--btn-hover-overlay:theme(colors.white/10%)]',\n        'dark:[--btn-bg:theme(colors.zinc.800)] dark:[--btn-hover-overlay:theme(colors.white/5%)]',\n        '[--btn-icon:theme(colors.zinc.400)] active:[--btn-icon:theme(colors.zinc.300)] hover:[--btn-icon:theme(colors.zinc.300)]'\n      ],\n      light: [\n        'text-zinc-950 [--btn-bg:white] [--btn-border:theme(colors.zinc.950/10%)] [--btn-hover-overlay:theme(colors.zinc.950/2.5%)] active:[--btn-border:theme(colors.zinc.950/15%)] hover:[--btn-border:theme(colors.zinc.950/15%)]',\n        'dark:[--btn-hover-overlay:theme(colors.zinc.950/5%)]',\n        '[--btn-icon:theme(colors.zinc.400)] active:[--btn-icon:theme(colors.zinc.500)] hover:[--btn-icon:theme(colors.zinc.500)]'\n      ],\n      info: [\n        'text-lime-950 [--btn-bg:theme(colors.lime.300)] [--btn-border:theme(colors.lime.400/80%)] [--btn-hover-overlay:theme(colors.white/25%)]',\n        '[--btn-icon:theme(colors.lime.600)] active:[--btn-icon:theme(colors.lime.700)] hover:[--btn-icon:theme(colors.lime.700)]'\n      ],\n      warning: [\n        'text-amber-950 [--btn-bg:theme(colors.amber.400)] [--btn-border:theme(colors.amber.500/80%)] [--btn-hover-overlay:theme(colors.white/25%)]',\n        '[--btn-icon:theme(colors.amber.600)]'\n      ],\n      danger: [\n        'text-white [--btn-bg:theme(colors.red.600)] [--btn-border:theme(colors.red.700/90%)] [--btn-hover-overlay:theme(colors.white/10%)]',\n        '[--btn-icon:theme(colors.red.300)] active:[--btn-icon:theme(colors.red.200)] hover:[--btn-icon:theme(colors.red.200)]'\n      ]\n    },\n    appearance: {\n      solid:\n        'border-transparent bg-[--btn-border] dark:bg-[--btn-bg] before:absolute before:inset-0 before:-z-10 before:bg-[--btn-bg] before:shadow dark:before:hidden dark:border-white/5 after:absolute after:inset-0 after:-z-10 after:shadow-[shadow:inset_0_1px_theme(colors.white/15%)] after:active:bg-[--btn-hover-overlay] after:hover:bg-[--btn-hover-overlay] dark:after:-inset-px before:data-[disabled]:shadow-none after:data-[disabled]:shadow-none',\n      outline:\n        'border-border hover:bg-secondary/70 active:bg-secondary/70 text-fg [--btn-icon:theme(colors.zinc.400)] active:[--btn-icon:theme(colors.zinc.500)] hover:[--btn-icon:theme(colors.zinc.500)] dark:active:[--btn-icon:theme(colors.zinc.300)] dark:hover:[--btn-icon:theme(colors.zinc.300)]',\n      plain:\n        'border-transparent text-fg active:bg-fg/5 hover:bg-fg/5 [--btn-icon:theme(colors.zinc.500)] active:[--btn-icon:theme(colors.zinc.700)] hover:[--btn-icon:theme(colors.zinc.700)] dark:[--btn-icon:theme(colors.zinc.500)] dark:active:[--btn-icon:theme(colors.zinc.400)] dark:hover:[--btn-icon:theme(colors.zinc.400)]'\n    },\n\n    size: {\n      'extra-small':\n        'h-8 px-[calc(theme(spacing.3)-1px)] py-[calc(theme(spacing.1)-1px)] text-xs/4 lg:text-[0.800rem]/4',\n      small: 'h-9 px-[calc(theme(spacing.4)-1px)] py-[calc(theme(spacing[1.5])-1px)] text-sm/5 lg:text-sm/5',\n      medium: 'h-10 px-[calc(theme(spacing.4)-1px)] py-[calc(theme(spacing.2)-1px)] text-base lg:text-sm/6',\n      large:\n        'h-11 px-[calc(theme(spacing.5)-1px)] py-[calc(theme(spacing[2.5])-1px)] text-base/7 lg:text-base/7 [&>[data-slot=icon]]:size-5',\n      'square-petite': 'size-9'\n    },\n    shape: {\n      square:\n        'rounded-lg before:rounded-[calc(theme(borderRadius.lg)-1px)] after:rounded-[calc(theme(borderRadius.lg)-1px)] dark:after:rounded-lg',\n      circle: 'rounded-[9999px] before:rounded-[9998px] after:rounded-[9998px] dark:after:rounded-[9999px]'\n    }\n  },\n  defaultVariants: {\n    intent: 'primary',\n    appearance: 'solid',\n    size: 'medium',\n    shape: 'square'\n  },\n\n  compoundVariants: [\n    {\n      appearance: ['outline', 'plain'],\n      className: 'px-1',\n      size: 'extra-small'\n    },\n    {\n      appearance: ['outline', 'plain'],\n      className: 'px-[calc(theme(spacing.1)-1px)]',\n      size: 'small'\n    },\n    {\n      appearance: ['outline', 'plain'],\n      className: 'px-[calc(theme(spacing.2)-1px)]',\n      size: 'medium'\n    },\n    {\n      appearance: ['outline', 'plain'],\n      className: 'px-[calc(theme(spacing.3)-1px)]',\n      size: 'large'\n    }\n  ]\n})\n\ntype ButtonVariants = VariantProps<typeof buttonStyles>\n\ninterface ButtonProps extends ButtonPrimitiveProps, ButtonVariants {\n  className?: string\n}\n\nconst Button = ({ className, intent, appearance, size, shape, ...props }: ButtonProps) => {\n  return (\n    <ButtonPrimitive\n      className={cn(\n        buttonStyles({\n          intent,\n          appearance,\n          size,\n          shape,\n          className\n        })\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Button, ButtonPrimitive, buttonStyles, type ButtonProps }\n",
    "type": "ui"
  },
  "modal": {
    "component": "@/components/ui/modal",
    "raw": "'use client'\n\nimport { IconX } from '@irsyadadl/paranoid'\nimport * as React from 'react'\nimport {\n  Button as ButtonPrimitive,\n  type DialogProps,\n  DialogTrigger as DialogTriggerPrimitive,\n  Heading,\n  type HeadingProps,\n  ModalOverlay as ModalOverlayPrimitive,\n  type ModalOverlayProps,\n  Modal as ModalPrimitive,\n  OverlayTriggerStateContext\n} from 'react-aria-components'\nimport { tv, type VariantProps } from 'tailwind-variants'\nimport { Button, type ButtonProps } from './button'\nimport { Dialog } from './dialog'\nimport { cn, useMediaQuery } from './primitive'\n\nexport const modalVariants = tv({\n  base: [\n    'fixed bottom-0 left-[50%] top-auto z-50 grid w-full max-w-full translate-x-[-50%] gap-4 rounded-t-xl border border-b-transparent bg-background p-2 shadow-lg outline-none sm:bottom-auto sm:top-[40%] sm:translate-y-[-50%] sm:rounded-xl sm:border-b-border',\n    'sm:entering:slide-in-from-bottom-auto entering:animate-in entering:fade-in-0 entering:slide-in-from-bottom-1/2 entering:slide-in-from-left-1/2 entering:[transition-timing-function:ease-out] sm:entering:slide-in-from-top-[58%]',\n    'exiting:animate-out exiting:fade-out-0 exiting:slide-out-to-bottom-1/2 exiting:slide-out-to-left-1/2 exiting:[transition-timing-function:ease] sm:exiting:slide-out-to-top-[58%]'\n  ],\n  variants: {\n    size: {\n      xs: 'sm:max-w-xs',\n      sm: 'sm:max-w-sm',\n      md: 'sm:max-w-md',\n      lg: 'sm:max-w-lg',\n      xl: 'sm:max-w-xl',\n      '2xl': 'sm:max-w-2xl',\n      '3xl': 'sm:max-w-3xl',\n      '4xl': 'sm:max-w-4xl',\n      '5xl': 'sm:max-w-5xl'\n    }\n  },\n  defaultVariants: {\n    size: 'lg'\n  }\n})\n\nconst Modal = DialogTriggerPrimitive\n\nconst ModalTrigger = ButtonPrimitive\n\nconst ModalOverlayContext = React.createContext<{\n  isDismissable?: boolean\n}>({})\n\nconst ModalOverlay = ({ className, isDismissable = true, ...props }: ModalOverlayProps) => (\n  <ModalOverlayContext.Provider value={{ isDismissable: isDismissable }}>\n    <ModalOverlayPrimitive\n      isDismissable={isDismissable}\n      className={(values) =>\n        cn(\n          'fixed inset-0 z-50 bg-black/60 entering:animate-in entering:fade-in-0 exiting:animate-in exiting:fade-out-0',\n          typeof className === 'function' ? className(values) : className\n        )\n      }\n      {...props}\n    />\n  </ModalOverlayContext.Provider>\n)\n\nexport interface ModalContentProps\n  extends Omit<React.ComponentProps<typeof Modal>, 'children'>,\n    VariantProps<typeof modalVariants> {\n  children?: DialogProps['children']\n  role?: DialogProps['role']\n  closeButton?: boolean\n  className?: string\n}\n\ninterface CloseButtonIndicatorProps {\n  desktop?: boolean\n  className?: string\n  close: () => void\n  dismissable?: boolean | undefined\n}\n\nconst CloseButtonIndicator = ({ className, ...props }: CloseButtonIndicatorProps) => {\n  return (\n    <Button\n      appearance=\"plain\"\n      size=\"square-petite\"\n      aria-label=\"Close\"\n      autoFocus={!props.desktop}\n      onPress={props.close}\n      className={cn('close absolute right-1 size-6 top-1 z-50', className, props.dismissable === false && 'hidden')}\n    >\n      <IconX className=\"size-4\" />\n    </Button>\n  )\n}\n\nconst ModalContent = ({ className, children, size, role, closeButton = true, ...props }: ModalContentProps) => {\n  const { isDismissable } = React.useContext(ModalOverlayContext)\n  const isDesktop = useMediaQuery('(min-width: 1024px)')\n  return (\n    <ModalPrimitive className={modalVariants({ size, className })} {...props}>\n      <Dialog role={role}>\n        {(values) => (\n          <>\n            {typeof children === 'function' ? children(values) : children}\n            {closeButton && (\n              <CloseButtonIndicator desktop={isDesktop} close={values.close} dismissable={isDismissable} />\n            )}\n          </>\n        )}\n      </Dialog>\n    </ModalPrimitive>\n  )\n}\n\nconst ModalHeader = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n  <div className={cn('mb-6 flex flex-col gap-y-0.5 pr-1 text-center sm:pr-0 sm:text-left', className)} {...props} />\n)\n\ninterface ModalCloseProps extends ButtonProps {}\n\nconst ModalClose = ({ className, ...props }: ModalCloseProps) => {\n  const state = React.useContext(OverlayTriggerStateContext)!\n  return <Button appearance=\"outline\" onPress={() => state.close()} {...props} />\n}\n\nconst ModalBody = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n  <div className={cn('pb-6', className)} {...props} />\n)\n\nconst ModalFooter = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n  <div className={cn('flex flex-col-reverse gap-2 sm:flex-row sm:justify-between', className)} {...props} />\n)\n\nconst ModalTitle = ({ className, ...props }: HeadingProps) => (\n  <Heading\n    slot=\"title\"\n    className={cn('text-xl font-semibold leading-none tracking-tight lg:text-lg', className)}\n    {...props}\n  />\n)\n\nconst ModalDescription = ({ className, ...props }: HeadingProps) => (\n  <p className={cn('text-sm text-muted-fg', className)} {...props} />\n)\n\nexport {\n  CloseButtonIndicator,\n  Modal,\n  ModalBody,\n  ModalClose,\n  ModalContent,\n  ModalDescription,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n  ModalTitle,\n  ModalTrigger,\n  type ModalOverlayProps\n}\n",
    "type": "ui"
  },
  "checkbox": {
    "component": "@/components/ui/checkbox",
    "raw": "'use client'\nimport { type ReactNode } from 'react'\nimport {\n  CheckboxGroup as CheckboxGroupPrimitive,\n  type CheckboxGroupProps as CheckboxGroupPrimitiveProps,\n  Checkbox as CheckboxPrimitive,\n  type CheckboxProps,\n  composeRenderProps,\n  type ValidationResult\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\nimport { Description, FieldError, Label } from './field'\nimport { ctr } from './primitive'\n\ninterface CheckboxGroupProps extends Omit<CheckboxGroupPrimitiveProps, 'children'> {\n  label?: string\n  children?: ReactNode\n  description?: string\n  errorMessage?: string | ((validation: ValidationResult) => string)\n}\n\nconst CheckboxGroup = (props: CheckboxGroupProps) => {\n  return (\n    <CheckboxGroupPrimitive {...props} className={ctr(props.className, 'flex flex-col gap-2')}>\n      <Label>{props.label}</Label>\n      {props.children}\n      {props.description && <Description>{props.description}</Description>}\n      <FieldError>{props.errorMessage}</FieldError>\n    </CheckboxGroupPrimitive>\n  )\n}\n\nconst checkboxStyles = tv({\n  base: 'racc group flex items-center gap-2 text-sm transition',\n  variants: {\n    isDisabled: {\n      false: 'opacity-100',\n      true: 'opacity-50'\n    }\n  }\n})\n\nconst boxStyles = tv({\n  base: 'flex size-4 flex-shrink-0 items-center justify-center rounded border text-background transition',\n  variants: {\n    isSelected: {\n      false: 'border-toggle bg-secondary',\n      true: [\n        'border-primary/70 bg-primary text-primary-fg',\n        'group-invalid:border-danger/70 group-invalid:bg-danger group-invalid:text-danger-fg'\n      ]\n    },\n    isFocused: {\n      true: [\n        'border-primary/70 ring-4 ring-primary/20',\n        'group-invalid:border-danger/70 group-invalid:text-danger-fg group-invalid:ring-danger/20'\n      ]\n    },\n    isInvalid: {\n      true: 'border-danger/70 bg-danger/20 text-danger-fg ring-danger/20'\n    }\n  }\n})\nconst Checkbox = (props: CheckboxProps) => {\n  return (\n    <CheckboxPrimitive\n      {...props}\n      className={composeRenderProps(props.className, (className, renderProps) =>\n        checkboxStyles({ ...renderProps, className })\n      )}\n    >\n      {({ isSelected, isIndeterminate, ...renderProps }) => (\n        <>\n          <div\n            className={boxStyles({\n              isSelected: isSelected || isIndeterminate,\n              ...renderProps\n            })}\n          >\n            {isIndeterminate ? (\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                width={24}\n                height={24}\n                viewBox=\"0 0 24 24\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                strokeWidth={2.5}\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                className=\"size-3\"\n              >\n                <line x1={5} y1={12} x2={19} y2={12} />\n              </svg>\n            ) : isSelected ? (\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                width={24}\n                height={24}\n                viewBox=\"0 0 24 24\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                strokeWidth={2.5}\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                className=\"size-3\"\n              >\n                <polyline points=\"20 6 9 17 4 12\" />\n              </svg>\n            ) : null}\n          </div>\n          {props.children}\n        </>\n      )}\n    </CheckboxPrimitive>\n  )\n}\n\nexport { Checkbox, CheckboxGroup }\n",
    "type": "ui"
  },
  "select": {
    "component": "@/components/ui/select",
    "raw": "'use client'\n\nimport { IconChevronLgDown } from '@irsyadadl/paranoid'\nimport React from 'react'\nimport {\n  Button,\n  Select as SelectPrimitive,\n  type SelectProps as SelectPrimitiveProps,\n  SelectValue,\n  type ValidationResult\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\nimport { DropdownItem, DropdownSection } from './dropdown'\nimport { Description, FieldError, Label } from './field'\nimport { ListBoxPicker } from './list-box'\nimport { PopoverPicker } from './popover'\nimport { ctr, focusStyles } from './primitive'\n\nconst selectTriggerStyles = tv({\n  extend: focusStyles,\n  base: 'btr group-disabled:bg-secondary group-disabled:opacity-50 focus-visible:border-primary focus-visible:ring-4 focus-visible:ring-primary/20 group-open:border-primary w-full group-open:ring-4 group-open:ring-primary/20 flex h-10 w-full cursor-default items-center gap-4 rounded-lg border border-input bg-background py-2 pl-3 pr-2 text-start shadow-[inset_0_1px_0_0_rgba(255,255,255,0.1)] transition dark:shadow-none',\n  variants: {\n    isDisabled: {\n      false:\n        'text-fg group-invalid:border-danger group-invalid:ring-danger/20 forced-colors:group-invalid:border-[Mark]',\n      true: 'bg-secondary text-muted-fg forced-colors:border-[GrayText] forced-colors:text-[GrayText]'\n    }\n  }\n})\n\ninterface SelectProps<T extends object> extends Omit<SelectPrimitiveProps<T>, 'children'> {\n  label?: string\n  description?: string\n  errorMessage?: string | ((validation: ValidationResult) => string)\n  items?: Iterable<T>\n  children: React.ReactNode | ((item: T) => React.ReactNode)\n}\n\nfunction Select<T extends object>({ label, description, errorMessage, children, items, ...props }: SelectProps<T>) {\n  return (\n    <SelectPrimitive {...props} className={ctr(props.className, 'group flex w-full flex-col gap-1')}>\n      {label && <Label>{label}</Label>}\n      <Button className={selectTriggerStyles()}>\n        <SelectValue className=\"flex-1 text-base placeholder-shown:text-muted-fg lg:text-sm\" />\n        <IconChevronLgDown\n          aria-hidden\n          className=\"size-4 text-muted-fg duration-300 group-open:rotate-180 group-open:text-fg group-disabled:opacity-50 forced-colors:text-[ButtonText] forced-colors:group-disabled:text-[GrayText]\"\n        />\n      </Button>\n      {description && <Description>{description}</Description>}\n      <FieldError>{errorMessage}</FieldError>\n      <PopoverPicker>\n        <ListBoxPicker items={items}>{children}</ListBoxPicker>\n      </PopoverPicker>\n    </SelectPrimitive>\n  )\n}\n\nconst SelectItem = DropdownItem\nconst SelectSection = DropdownSection\n\nexport { Select, SelectItem, SelectSection }\n",
    "type": "ui"
  },
  "textarea": {
    "component": "@/components/ui/textarea",
    "raw": "'use client'\n\nimport {\n  TextArea as TextAreaPrimitive,\n  TextField as TextFieldPrimitive,\n  TextFieldProps as TextFieldPrimitiveProps,\n  ValidationResult\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\nimport { Description, FieldError, Label } from './field'\nimport { ctr, focusStyles } from './primitive'\n\nexport interface TextareaProps extends TextFieldPrimitiveProps {\n  autoSize?: boolean\n  label?: string\n  placeholder?: string\n  description?: string\n  errorMessage?: string | ((validation: ValidationResult) => string)\n}\n\nconst textAriaStyles = tv({\n  extend: focusStyles,\n  base: 'w-full min-w-0 rounded-md border border-input bg-background px-2.5 py-2 text-base shadow-sm outline-none transition duration-200 disabled:bg-secondary disabled:opacity-50 sm:text-sm'\n})\n\nexport function Textarea({ placeholder, label, description, errorMessage, ...props }: TextareaProps) {\n  return (\n    <TextFieldPrimitive {...props} className={ctr(props.className, 'group flex flex-col gap-1')}>\n      {label && <Label>{label}</Label>}\n      <TextAreaPrimitive placeholder={placeholder} className={textAriaStyles} />\n      {description && <Description>{description}</Description>}\n      <FieldError>{errorMessage}</FieldError>\n    </TextFieldPrimitive>\n  )\n}\n",
    "type": "ui"
  },
  "loading-dots": {
    "component": "@/components/ui/loading-dots",
    "raw": "'use client'\n\nimport { cn } from './primitive'\n\nconst dots = 'mx-[1px] inline-block size-[0.3125rem] animate-blink rounded-md'\n\nexport const LoadingDots = ({ className }: { className: string }) => {\n  return (\n    <span className=\"mx-2 inline-flex items-center\">\n      <span className={cn(dots, className)} />\n      <span className={cn(dots, 'animation-delay-[200ms]', className)} />\n      <span className={cn(dots, 'animation-delay-[400ms]', className)} />\n    </span>\n  )\n}\n",
    "type": "ui"
  },
  "skeleton": {
    "component": "@/components/ui/skeleton",
    "raw": "import { cn } from './primitive'\n\nfunction Skeleton({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {\n  return <div className={cn('animate-pulse rounded-md bg-muted', className)} {...props} />\n}\n\nexport { Skeleton }\n",
    "type": "ui"
  },
  "form": {
    "component": "@/components/ui/form",
    "raw": "'use client'\n\nimport { Form as FormPrimitive, FormProps as FormPrimitiveProps } from 'react-aria-components'\n\ninterface FormProps extends FormPrimitiveProps {\n  onSubmit(): void\n}\n\nfunction Form({ onSubmit, ...props }: FormProps) {\n  const action = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault()\n    onSubmit()\n  }\n  return <FormPrimitive onSubmit={action} {...props} />\n}\n\nexport { Form, type FormProps }\n",
    "type": "ui"
  },
  "carousel": {
    "component": "@/components/ui/carousel",
    "raw": "'use client'\nimport useEmblaCarousel, { type UseEmblaCarouselType } from 'embla-carousel-react'\nimport * as React from 'react'\n\nimport { IconChevronLgLeft, IconChevronLgRight } from '@irsyadadl/paranoid'\nimport { Button, ButtonProps } from './button'\nimport { cn } from './primitive'\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ninterface CarouselComponent\n  extends React.ForwardRefExoticComponent<\n    React.HTMLAttributes<HTMLDivElement> & CarouselProps & React.RefAttributes<HTMLDivElement>\n  > {\n  Content: React.ForwardRefExoticComponent<React.HTMLAttributes<HTMLDivElement> & React.RefAttributes<HTMLDivElement>>\n  Item: React.ForwardRefExoticComponent<React.HTMLAttributes<HTMLDivElement> & React.RefAttributes<HTMLDivElement>>\n  Previous: React.ForwardRefExoticComponent<\n    React.ButtonHTMLAttributes<HTMLButtonElement> & React.RefAttributes<HTMLButtonElement>\n  >\n  Next: React.ForwardRefExoticComponent<\n    React.ButtonHTMLAttributes<HTMLButtonElement> & React.RefAttributes<HTMLButtonElement>\n  >\n  Handler: React.ForwardRefExoticComponent<React.HTMLAttributes<HTMLDivElement> & React.RefAttributes<HTMLDivElement>>\n}\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: 'horizontal' | 'vertical'\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error('useCarousel must be used within a <Carousel />')\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement> & CarouselProps>(\n  ({ orientation = 'horizontal', opts, setApi, plugins, className, children, ...props }, ref) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === 'horizontal' ? 'x' : 'y'\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === 'ArrowLeft') {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === 'ArrowRight') {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on('reInit', onSelect)\n      api.on('select', onSelect)\n\n      return () => {\n        api?.off('select', onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation: orientation || (opts?.axis === 'y' ? 'vertical' : 'horizontal'),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn('relative', className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n) as CarouselComponent\nCarousel.displayName = 'Carousel'\n\nconst CarouselContent = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(\n  ({ className, ...props }, ref) => {\n    const { carouselRef, orientation } = useCarousel()\n\n    return (\n      <div ref={carouselRef} className=\"overflow-hidden\">\n        <div\n          ref={ref}\n          className={cn('flex', orientation === 'horizontal' ? '-ml-4' : '-mt-4 flex-col', className)}\n          {...props}\n        />\n      </div>\n    )\n  }\n)\nCarouselContent.displayName = 'CarouselContent'\n\nconst CarouselItem = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(\n  ({ className, ...props }, ref) => {\n    const { orientation } = useCarousel()\n\n    return (\n      <div\n        ref={ref}\n        role=\"group\"\n        aria-roledescription=\"slide\"\n        className={cn('min-w-0 shrink-0 grow-0 basis-full', orientation === 'horizontal' ? 'pl-4' : 'pt-4', className)}\n        {...props}\n      />\n    )\n  }\n)\nCarouselItem.displayName = 'CarouselItem'\n\nconst CarouselHandler = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(\n  ({ className, ...props }, ref) => {\n    const { orientation } = useCarousel()\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          'mt-6 flex items-center gap-x-2',\n          orientation === 'horizontal' ? 'justify-end' : 'justify-center',\n          className\n        )}\n        {...props}\n      />\n    )\n  }\n)\nCarouselHandler.displayName = 'CarouselHandler'\n\nconst CarouselPrevious = ({ className, intent = 'secondary', size = 'square-petite', ...props }: ButtonProps) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      intent={intent}\n      size={size}\n      className={cn('size-8 rounded-full', orientation === 'vertical' ? 'rotate-90' : '', className)}\n      isDisabled={!canScrollPrev}\n      onPress={scrollPrev}\n      {...props}\n    >\n      <IconChevronLgLeft className=\"size-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n}\n\nconst CarouselNext = ({ className, intent = 'secondary', size = 'square-petite', ...props }: ButtonProps) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      intent={intent}\n      size={size}\n      className={cn('size-8 rounded-full', orientation === 'vertical' ? 'rotate-90' : '', className)}\n      isDisabled={!canScrollNext}\n      onPress={scrollNext}\n      {...props}\n    >\n      <IconChevronLgRight className=\"size-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n}\n\nexport { Carousel, CarouselContent, CarouselHandler, CarouselItem, CarouselNext, CarouselPrevious, type CarouselApi }\n",
    "type": "ui"
  }
}